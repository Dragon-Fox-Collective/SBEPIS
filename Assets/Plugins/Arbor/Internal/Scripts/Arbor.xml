<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Arbor</name>
    </assembly>
    <members>
        <member name="T:Arbor.AddBehaviourMenu">
            <summary>
            Attribute that specifies the name of at AddBehaviour menu.
            </summary>
        </member>
        <member name="F:Arbor.AddBehaviourMenu.localization">
            <summary>
            Flag for localization. If true, convert to word of each language with menuName as key.
            </summary>
        </member>
        <member name="P:Arbor.AddBehaviourMenu.menuName">
            <summary>
            Menu name
            </summary>
        </member>
        <member name="M:Arbor.AddBehaviourMenu.#ctor(System.String)">
            <summary>
            AddBehaviourMenu constructor
            </summary>
            <param name="menuName">
            Menu name.
            <list type="bullet">
            <item><description>Hierarchized with "/" separator.</description></item>
            <item><description>If it is empty or null it is not displayed in the list.</description></item>
            </list>
            </param>
        </member>
        <member name="T:Arbor.AddCalculatorMenu">
            <summary>
            Attribute that specifies the name of at AddBehaviour menu.
            </summary>
        </member>
        <member name="P:Arbor.AddCalculatorMenu.menuName">
            <summary>
            Menu name
            </summary>
        </member>
        <member name="M:Arbor.AddCalculatorMenu.#ctor(System.String)">
            <summary>
            AddCalculatorMenu constructor
            </summary>
            <param name="menuName">
            Menu name.
            <list type="bullet">
            <item><description>Hierarchized with "/" separator.</description></item>
            <item><description>If it is empty or null it is not displayed in the list.</description></item>
            </list>
            </param>
        </member>
        <member name="T:Arbor.AnimatorBoolParameterReference">
            <summary>
            A reference to the Boolean parameter of Animator.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorBoolParameterReference.Set(System.Boolean)">
            <summary>
            Set the value.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.AnimatorBoolParameterReference.Get">
            <summary>
            Get the value.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:Arbor.AnimatorFloatParameterReference">
            <summary>
            A reference to the float parameter of Animator.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorFloatParameterReference.Set(System.Single)">
            <summary>
            Set the value.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.AnimatorFloatParameterReference.Set(System.Single,System.Single,System.Single)">
            <summary>
            Set the value.
            </summary>
            <param name="value">Value</param>
            <param name="dampTime">Damp Time</param>
            <param name="deltaTime">Delta Time</param>
        </member>
        <member name="M:Arbor.AnimatorFloatParameterReference.Get">
            <summary>
            Get the value.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:Arbor.AnimatorIntParameterReference">
            <summary>
            A reference to the int parameter of Animator.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorIntParameterReference.Set(System.Int32)">
            <summary>
            Set the value.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.AnimatorIntParameterReference.Get">
            <summary>
            Get the value.
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:Arbor.AnimatorName">
            <summary>
            A class that handles names related to Animator.
            </summary>
        </member>
        <member name="P:Arbor.AnimatorName.name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Arbor.AnimatorName.hash">
            <summary>
            Returns Animator.StringToHash (name). If name is null or empty, it will be null.
            </summary>
        </member>
        <member name="T:Arbor.AnimatorParameterNameAttribute">
            <summary>
            An attribute that specifies the parameter name setting for <see cref="T:Arbor.AnimatorName"/>.
            </summary>
        </member>
        <member name="F:Arbor.AnimatorParameterNameAttribute.hasType">
            <summary>
            A flag that has a type.
            </summary>
        </member>
        <member name="F:Arbor.AnimatorParameterNameAttribute.type">
            <summary>
            Parameter type
            </summary>
        </member>
        <member name="M:Arbor.AnimatorParameterNameAttribute.#ctor">
            <summary>
            AnimatorParameterNameAttribute constructor<br/>
            Used to set parameter names without restrictions on the parameter type.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorParameterNameAttribute.#ctor(UnityEngine.AnimatorControllerParameterType)">
            <summary>
            AnimatorParameterNameAttribute constructor<br/>
            Only the specified parameter type can be set.
            </summary>
            <param name="type">parameter type</param>
        </member>
        <member name="T:Arbor.AnimatorParameterReference">
            <summary>
            Reference Animator parameters.
            </summary>
        </member>
        <member name="F:Arbor.AnimatorParameterReference._Animator">
            <summary>
            Animator parameters are stored.
            </summary>
        </member>
        <member name="F:Arbor.AnimatorParameterReference._Name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="F:Arbor.AnimatorParameterReference.type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="P:Arbor.AnimatorParameterReference.animator">
            <summary>
            Animator parameters are stored.
            </summary>
        </member>
        <member name="P:Arbor.AnimatorParameterReference.name">
            <summary>
            Parameter name.
            </summary>
        </member>
        <member name="P:Arbor.AnimatorParameterReference.nameHash">
            <summary>
            Returns the hash value of the parameter name. If the parameter name is null or empty, it will be null.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorParameterReference.#ctor">
            <summary>
            AnimatorParameterReference constructor
            </summary>
        </member>
        <member name="T:Arbor.AnimatorTriggerParameterReference">
            <summary>
            A reference to the Boolean parameter of Animator.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorTriggerParameterReference.Set">
            <summary>
            Set the trigger.
            </summary>
        </member>
        <member name="M:Arbor.AnimatorTriggerParameterReference.Reset">
            <summary>
            Reset the trigger.
            </summary>
        </member>
        <member name="T:Arbor.ArborReferenceUtility">
            <summary>
            Arbor reference utility class
            </summary>
        </member>
        <member name="F:Arbor.ArborReferenceUtility.docUrl">
            <summary>
            Document URL
            </summary>
        </member>
        <member name="F:Arbor.ArborReferenceUtility.inspectorDirectoryName">
            <summary>
            Directory name of Inspector Reference
            </summary>
        </member>
        <member name="F:Arbor.ArborReferenceUtility.componentUrl">
            <summary>
            Component Document URL
            </summary>
        </member>
        <member name="T:Arbor.AttributeHelper">
            <summary>
            A helper class for Attribute.
            </summary>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes(System.Reflection.Assembly)">
            <summary>
            Get Attributes.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>Attributes</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Get Attribute (generic)
            </summary>
            <param name="assembly">Assembly</param>
            <param name="targetType">Target Type</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="assembly">Assembly</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="assembly">Assembly</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
            Whether has Attribute
            </summary>
            <param name="assembly">Assembly</param>
            <param name="targetType">Target Type</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute``1(System.Reflection.Assembly)">
            <summary>
            Whether has Attribute
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="assembly">Assembly</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            Get Attributes.
            </summary>
            <param name="member">MemberInfo</param>
            <returns>Attributes</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes(System.Type)">
            <summary>
            Get Attributes.
            </summary>
            <param name="type">Type</param>
            <returns>Attributes</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Get Attribute (generic)
            </summary>
            <param name="member">MemberInfo</param>
            <param name="targetType">Target Type</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute(System.Type,System.Type)">
            <summary>
            Get Attribute (generic)
            </summary>
            <param name="type">Type</param>
            <param name="targetType">Target Type</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="member">MemberInfo</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttribute``1(System.Type)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="type">Type</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="member">MemberInfo</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.GetAttributes``1(System.Type)">
            <summary>
            Get Attribute (generic)
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="type">Type</param>
            <returns>Attribute</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Whether has Attribute
            </summary>
            <param name="member">MemberInfo</param>
            <param name="targetType">Target Type</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute(System.Type,System.Type)">
            <summary>
            Whether has Attribute
            </summary>
            <param name="type">Type</param>
            <param name="targetType">Target Type</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Whether has Attribute
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="member">MemberInfo</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="M:Arbor.AttributeHelper.HasAttribute``1(System.Type)">
            <summary>
            Whether has Attribute
            </summary>
            <typeparam name="T">Target Type</typeparam>
            <param name="type">Type</param>
            <returns>Whether has attribute.</returns>
        </member>
        <member name="T:Arbor.BehaviourHelp">
            <summary>
            Attribute that specifies the URL to be displayed from the Help button of StateBehaviour.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourHelp.url">
            <summary>
            Url to display in browser when pressing help button
            </summary>
        </member>
        <member name="M:Arbor.BehaviourHelp.#ctor(System.String)">
            <summary>
            BehaviourHelp constructor
            </summary>
            <param name="url">Help page url</param>
        </member>
        <member name="T:Arbor.BehaviourTitle">
            <summary>
            Attribute that specifies the title to display the StateBehaviour.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTitle.localization">
            <summary>
            Flag for localization. If true, convert to word of each language with titleName as key.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTitle.useNicifyName">
            <summary>
            Flag that uses a name to display on Editor. Default true.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTitle.titleName">
            <summary>
            Title name
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTitle.#ctor(System.String)">
            <summary>
            BehaviourTitle constructor
            </summary>
            <param name="titleName">Title name</param>
        </member>
        <member name="T:Arbor.BehaviourTree.AbortFlags">
            <summary>
            Abort flag
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.AbortFlags.Self">
            <summary>
            Abort self, and any sub-trees running under this node.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.AbortFlags.LowerPriority">
            <summary>
            Abort any nodes with lower priority than this node.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ActionBehaviour">
            <summary>
            Class that defines the behavior of the action. Inherited and to use.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.AddBehaviourMenu" /></description></item>
            <item><description><see cref="T:Arbor.HideBehaviour" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourTitle" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourHelp" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.BehaviourTree.ActionBehaviour.actionNode">
            <summary>
            Get the ActionNode.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionBehaviour.FinishExecute(System.Boolean)">
            <summary>
            Finish Execute.
            </summary>
            <param name="result">Execute result.</param>
        </member>
        <member name="P:Arbor.BehaviourTree.ActionBehaviour.schedulerUpdateOnExecute">
            <summary>
            Whether to update the scheduler with OnExecute
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionBehaviour.OnAwake">
            <summary>
            This function is called when the own node becomes active for the first time.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionBehaviour.WaitForExecute">
            <summary>
            Wait for the call to Execute.
            </summary>
            <returns>Returns an awaitable structure.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionBehaviour.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ActionNode">
            <summary>
            The node that executes the action
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionNode.CreateActionBehaviour(System.Type)">
            <summary>
            Create a ActionBehaviour. Use it in the editor.
            </summary>
            <param name="classType">ActionBehaviour type</param>
            <returns>Returns the created ActionBehaviour.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.ActionNode.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ActionNodeList">
            <summary>
            List of action nodes
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.BehaviourTreeInternal">
            <summary>
            Internal class of <see cref="!:Arbor.BehaviourTree.BehaviourTree" />.
            To actually attach to GameObject is to use the <see cref = "!:Arbor.BehaviourTree.BehaviourTree" />.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.BehaviourTreeInternal.restartOnFinish">
            <summary>
            Flag to restart at finish.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.BehaviourTreeInternal.executionSettings">
            <summary>
            Settings related to execution.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.BehaviourTreeInternal.nodeBranchies">
            <summary>
            Get NodeBranch List
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.BehaviourTreeInternal.compositeNodes">
            <summary>
            Get CompositeNode List
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.BehaviourTreeInternal.actionNodes">
            <summary>
            Get ActionNode List
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.BehaviourTreeInternal.rootNode">
            <summary>
            Get RootNode
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.BehaviourTreeInternal.currentNode">
            <summary>
            Current active node
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnPlay">
            <summary>
            Called when you start playing.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnStop">
            <summary>
            Called when play is stopped.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnPause">
            <summary>
            Called when you pause.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnResume">
            <summary>
            Called when resuming
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnUpdate">
            <summary>
            Called when updating.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnLateUpdate">
            <summary>
            Called when LateUpdate.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnFixedUpdate">
            <summary>
            Called when FixedUpdate.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.IsRevaluation(Arbor.BehaviourTree.TreeNodeBase)">
            <summary>
            It returns the reevaluation node.
            </summary>
            <param name="node">Node</param>
            <returns>Returns true if it is a reevaluation node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CreateComposite(UnityEngine.Vector2,System.Int32,System.Type)">
            <summary>
            Create Composite.
            </summary>
            <param name="position">Node position</param>
            <param name="nodeID">Node ID</param>
            <param name="classType">CompositeBehaviour type</param>
            <returns>The created coomposite node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CreateComposite(UnityEngine.Vector2,System.Type)">
            <summary>
            Create Composite.
            </summary>
            <param name="position">Node position</param>
            <param name="classType">CompositeBehaviour type</param>
            <returns>The created coomposite node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CreateAction(UnityEngine.Vector2,System.Int32,System.Type)">
            <summary>
            Create ActionNode.
            </summary>
            <param name="position">Node position</param>
            <param name="nodeID">Node ID</param>
            <param name="classType">ActionBehaviour type</param>
            <returns>The created action node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CreateAction(UnityEngine.Vector2,System.Type)">
            <summary>
            Create ActionNode.
            </summary>
            <param name="position">Node position</param>
            <param name="classType">ActionBehaviour type</param>
            <returns>The created action node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnReset">
            <summary>
            Reset or create callback.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CalculatePriority">
            <summary>
            Calculate priority of nodes.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnDeleteNode(Arbor.Node)">
            <summary>
            Delete node.
            </summary>
            <param name="node">The node to delete</param>
            <returns>Returns true if deleted, false otherwise.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnValidateNodes">
            <summary>
            Called when the node is changed.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.CheckLoop(Arbor.BehaviourTree.TreeNodeBase,Arbor.BehaviourTree.TreeNodeBase)">
            <summary>
            Check whether the connection of the node is looping.
            </summary>
            <param name="parentNode">Parent node</param>
            <param name="childNode">Child node</param>
            <returns>Returns true if it is looping.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.ConnectBranch(System.Int32,Arbor.BehaviourTree.TreeNodeBase,Arbor.BehaviourTree.TreeNodeBase)">
            <summary>
            Connect NodeBranch.
            </summary>
            <param name="branchID">ID of the NodeBranch to be created</param>
            <param name="parentNode">Parent node.</param>
            <param name="childNode">Child node.</param>
            <returns>Connected NodeBranch</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.ConnectBranch(Arbor.BehaviourTree.TreeNodeBase,Arbor.BehaviourTree.TreeNodeBase)">
            <summary>
            Connect NodeBranch.
            </summary>
            <param name="parentNode">Parent node.</param>
            <param name="childNode">Child node.</param>
            <returns>Connected NodeBranch</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.DisconnectBranch(Arbor.BehaviourTree.NodeBranch)">
            <summary>
            Disconnect NodeBranch
            </summary>
            <param name="branch">Disconnect NodeBranch</param>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.Execute">
            <summary>
            Execute manually.
            Please call this method at any timing when UpdateSettings.type is Manual.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.BehaviourTreeInternal.OnRegisterNodes">
            <summary>
            Register nodes
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ChildLinkSlot">
            <summary>
            Slot class for linking with Node.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ChildLinkSlot.branchID">
            <summary>
            BranchID of NodeBranch
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ChildrenLinkSlot">
            <summary>
            Slot class for linking with Node.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ChildrenLinkSlot.branchIDs">
            <summary>
            BranchID of NodeBranch
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.CompositeBehaviour">
            <summary>
            Class that defines the behavior of the composite. Inherited and to use.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.CompositeBehaviour.compositeNode">
            <summary>
            Get the CompositeNode.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeBehaviour.GetBeginIndex">
            <summary>
            Get the child node index to be executed at the start.
            </summary>
            <returns>Index of child node</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeBehaviour.GetNextIndex(System.Int32)">
            <summary>
            Get the child node index to be executed.
            </summary>
            <param name="currentIndex">Current index</param>
            <returns>Index of child node</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeBehaviour.GetInterruptIndex(Arbor.BehaviourTree.TreeNodeBase)">
            <summary>
            Get the index of the interrupted node.
            </summary>
            <param name="node">Interrupted node</param>
            <returns>Index of child node</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeBehaviour.CanExecute(Arbor.BehaviourTree.NodeStatus)">
            <summary>
            It is judged whether it can be executed.
            </summary>
            <param name="childStatus">State of child node</param>
            <returns>Returns true if it can be executed.</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.CompositeNode">
            <summary>
            This node controls the execution of child nodes.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.CompositeNode._ChildrenLink">
            <summary>
            Link to child nodes.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeNode.CreateCompositeBehaviour(System.Type)">
            <summary>
            Create a CompositeBehaviour. Use it in the editor.
            </summary>
            <param name="classType">CompositeBehaviour type</param>
            <returns>Returns the created CompositeBehaviour.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeNode.GetChildrenLinkSlot">
            <summary>
            Get ChildrenLinkSlot.
            </summary>
            <returns>Returns a ChildrenLinkSlot.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeNode.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeNode.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.CompositeNode.OnBeforeSerialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnBeforeSerialize.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.CompositeNodeList">
            <summary>
            List of composite nodes
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.Decorator">
            <summary>
            A class that defines decoration for composite nodes and action nodes. Inherit and use it.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.AddBehaviourMenu" /></description></item>
            <item><description><see cref="T:Arbor.HideBehaviour" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourTitle" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourHelp" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator._AbortFlags">
            <summary>
            Abort Flags.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator._LogicalCondition">
            <summary>
            Logical operation method of condition check result
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.Decorator.behaviourEnabled">
            <summary>
            Gets or sets a value indicating whether [behaviour enabled].
            </summary>
            <value>
              <c>true</c> if [behaviour enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Arbor.BehaviourTree.Decorator.abortFlags">
            <summary>
            Abort flags
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.Decorator.logicalOperation">
            <summary>
            Get the logical operation method with the result of the previous Decorator when there are multiple Decorators.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.Decorator.isRevaluation">
            <summary>
            It returns whether to reevaluate.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.Decorator.Condition">
            <summary>
            The condition of the decorator
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator.Condition.None">
            <summary>
            No condition
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator.Condition.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator.Condition.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.Decorator.onConditionChanged">
            <summary>
            Called when the currentCondition changes
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.Decorator.currentCondition">
            <summary>
            Current condition
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.Create(Arbor.Node,System.Type)">
            <summary>
            Create Decorator
            </summary>
            <param name="node">Node</param>
            <param name="type">Decorator type</param>
            <returns>Created Decorator.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.Create``1(Arbor.Node)">
            <summary>
            Create Decorator
            </summary>
            <typeparam name="Type">Decorator type</typeparam>
            <param name="node">Node</param>
            <returns>Created Decorator.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.HasConditionCheck">
            <summary>
            It is judged whether Condition Check should be performed.
            </summary>
            <remarks>
            It returns true by default.
            To invalidate, please override and return false.
            </remarks>
            <returns>Returns true when performing ConditionCheck.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnConditionCheck">
            <summary>
            Perform ConditionCheck.
            </summary>
            <returns>Returns true if it matches the condition, false if it does not match.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnFinishExecute(System.Boolean)">
            <summary>
            FinishExecute callback.<br />
            You can change the result of the execution result.
            </summary>
            <param name="result">Execution result.</param>
            <returns>Changed result.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnRepeatCheck">
            <summary>
            Callback to decide whether to repeat again when the self node finishes.
            </summary>
            <returns>Returns true if to repeat, false otherwise.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnRepeatCheck(System.Boolean)">
            <summary>
            Callback to decide whether to repeat again when the self node finishes.
            </summary>
            <param name="nodeResult">Node processing result</param>
            <returns>Returns true if to repeat, false otherwise.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnRevaluationEnter">
            <summary>
            Called when entering the re-evaluation target
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.Decorator.OnRevaluationExit">
            <summary>
            Called when exiting the re-evaluation target
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.DecoratorList">
            <summary>
            List of decorators
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ExecutionSettings">
            <summary>
            Behavior tree execution settings.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ExecutionSettings.type">
            <summary>
            Execution type
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ExecutionSettings.maxCount">
            <summary>
            Maximum count of the action to execute.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ExecutionType">
            <summary>
            Behavior tree execution type.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ExecutionType.UntilRunning">
            <summary>
            Execute all actions until TreeNodeBase.status is NodeStatus.Running.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ExecutionType.Count">
            <summary>
            Specify the maximum count of actions to execute.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.IChildLinkSlotHolder">
            <summary>
            An interface that defines that a TreeNodeBase derived class has a connection slot to a child node
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.IChildLinkSlotHolder.ConnectChildLinkSlot(System.Int32)">
            <summary>
            Connect a NodeBranch to a child slot
            </summary>
            <param name="branchID">ID of the NodeBranch to connect to</param>
        </member>
        <member name="M:Arbor.BehaviourTree.IChildLinkSlotHolder.DisconnectChildLinkSlot(System.Int32)">
            <summary>
            Disconnect the NodeBranch from the child node.
            </summary>
            <param name="branchID">ID of the NodeBranch to disconnect</param>
        </member>
        <member name="M:Arbor.BehaviourTree.IChildLinkSlotHolder.OnCalculateChildPriority(System.Int32)">
            <summary>
            Calculate the priority of child nodes.
            </summary>
            <param name="priority">First child priority</param>
            <returns>Returns the next priority of termination.</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.IParentLinkSlotHolder">
            <summary>
            An interface that defines that a TreeNodeBase derived class has a connection slot to the parent node
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.IParentLinkSlotHolder.GetParentLinkSlot">
            <summary>
            Get ParentLinkSlot.
            </summary>
            <returns>Returns a ParentLinkSlot.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.IParentLinkSlotHolder.GetParentBranch">
            <summary>
            Get the NodeBranch connected to the parent node.
            </summary>
            <returns>Returns the NodeBranch connected to the parent node. Returns null if not connected.</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.NodeBranch">
            <summary>
            Branch classes between nodes of Behavior Tree
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeBranch.branchID">
            <summary>
            Branch ID
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeBranch.parentNodeID">
            <summary>
            Parent node ID
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeBranch.childNodeID">
            <summary>
            Child node ID
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeBranch.bezier">
            <summary>
            Bezier of the connection line. Use it in the editor.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeBranch.onActiveChanged">
            <summary>
            Called when isActive changes
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.NodeBranch.isActive">
            <summary>
            Flag for active or not. Use it in the editor.
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.NodeBranchies">
            <summary>
            List of NodeBranch
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.NodeBranchies.count">
            <summary>
             Get a count of NodeBranch.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.NodeBranchies.Item(System.Int32)">
            <summary>
            Get NodeBranch from index.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Arbor.BehaviourTree.NodeBranchies.IndexOf(Arbor.BehaviourTree.NodeBranch)">
            <summary>
            Get NodeBranch index.
            </summary>
            <param name="branch">NodeBranch</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.NodeBranchies.GetUniqueBranchID">
            <summary>
            Get the ID of NodeBranch that is not being used
            </summary>
            <returns>Returns a unique BranchID.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.NodeBranchies.GetFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.BehaviourTree.NodeBranch" /> from the branch identifier.
            </summary>
            <param name="branchID">The branch identifier.</param>
            <returns>Found <see cref = "T:Arbor.BehaviourTree.NodeBranch" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.NodeBranchies.Add(Arbor.BehaviourTree.NodeBranch)">
            <summary>
            Add a NodeBranch.
            </summary>
            <param name="nodeBranch">The NodeBranch to be added.</param>
        </member>
        <member name="M:Arbor.BehaviourTree.NodeBranchies.Remove(Arbor.BehaviourTree.NodeBranch)">
            <summary>
            Remove a node.
            </summary>
            <param name="nodeBranch">The NodeBranch to be removed.</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.NodeLinkSlot">
            <summary>
            Slot class for linking with Node.
            </summary>
        </member>
        <member name="E:Arbor.BehaviourTree.NodeLinkSlot.onConnectionChanged">
            <summary>
            Callback event when connection is changed
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.NodeLinkSlotLegacy">
            <summary>
            Slot class for linking with Node.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeLinkSlotLegacy.branchID">
            <summary>
            BranchID of NodeBranch
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.NodeStatus">
            <summary>
            Behavior tree node status
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeStatus.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.NodeStatus.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.ParentLinkSlot">
            <summary>
            Slot class for linking with Node.
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.ParentLinkSlot.branchID">
            <summary>
            BranchID of NodeBranch
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.ParentLinkSlot.SetBranch(System.Int32)">
            <summary>
            Set the ID of the Node Branch that connects to the parent node.
            </summary>
            <param name="branchID">ID of the Node Branch that connects to the parent node</param>
        </member>
        <member name="T:Arbor.BehaviourTree.RootNode">
            <summary>
            Root Node
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.RootNode._ChildNodeLink">
            <summary>
            Link to child nodes.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.RootNode.childNode">
            <summary>
            Get child node.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.RootNode.GetChildLinkSlot">
            <summary>
            Get ChildLinkSlot.
            </summary>
            <returns>Returns a ChildLinkSlot.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.RootNode.GetChildBranch">
            <summary>
            Get the NodeBranch connected to the child node.
            </summary>
            <returns>Returns a NodeBranch connected to a child node.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.RootNode.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.RootNode.IsDeletable">
            <summary>
            Returns whether or not it can be deleted.
            </summary>
            <returns>Returns true if it can be deleted.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.RootNode.GetOldName">
            <summary>
            Get the node name before Arbor 3.9.0.
            </summary>
            <returns>Old node name</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.Service">
            <summary>
            Class executed when its own node is active. Inherit and use it.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.AddBehaviourMenu" /></description></item>
            <item><description><see cref="T:Arbor.HideBehaviour" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourTitle" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourHelp" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.BehaviourTree.Service.behaviourEnabled">
            <summary>
            Gets or sets a value indicating whether [behaviour enabled].
            </summary>
            <value>
              <c>true</c> if [behaviour enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Arbor.BehaviourTree.ServiceList">
            <summary>
            Service List
            </summary>
        </member>
        <member name="T:Arbor.BehaviourTree.TreeBehaviourNode">
            <summary>
            Base class of node with TreeNodeBehaviour
            </summary>
        </member>
        <member name="F:Arbor.BehaviourTree.TreeBehaviourNode._ParentLink">
            <summary>
            Link to parent node
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeBehaviourNode.behaviour">
            <summary>
            Main behaviour
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeBehaviourNode.decoratorList">
            <summary>
            Decorator list
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeBehaviourNode.serviceList">
            <summary>
            Service list
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeBehaviourNode.breakPoint">
            <summary>
            Break point.
            When this property is true, the editor will be paused when the node becomes active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.GetBehaviourObject">
            <summary>
            Get Main Behaviour Object.
            </summary>
            <returns>Main Behaviour Object</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.AddDecorator(System.Type)">
            <summary>
            Adds the Decorator.
            </summary>
            <param name="type">Type of add Decorator</param>
            <returns>Added Decorator</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.AddDecorator``1">
            <summary>
            Adds the Decorator.
            </summary>
            <typeparam name="T">Type of add Decorator</typeparam>
            <returns>Added Decorator</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.InsertDecorator(System.Int32,System.Type)">
            <summary>
            Insert the Decorator.
            </summary>
            <param name="index">Insertion destination index</param>
            <param name="type">Type of add Decorator</param>
            <returns>Inserted Decorator</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.InsertDecorator``1(System.Int32)">
            <summary>
            Insert the Decorator.
            </summary>
            <typeparam name="T">Type of insert Decorator</typeparam>
            <param name="index">Insertion destination index</param>
            <returns>Inserted Decorator</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.AddService(System.Type)">
            <summary>
            Adds the Service.
            </summary>
            <param name="type">Type of add Service</param>
            <returns>Added Service</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.AddService``1">
            <summary>
            Adds the Service.
            </summary>
            <typeparam name="T">Type of add Service</typeparam>
            <returns>Added Service</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.InsertService(System.Int32,System.Type)">
            <summary>
            Insert the Service.
            </summary>
            <param name="index">Insertion destination index</param>
            <param name="type">Type of add Service</param>
            <returns>Inserted Service</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.InsertService``1(System.Int32)">
            <summary>
            Insert the Service.
            </summary>
            <typeparam name="T">Type of insert Service</typeparam>
            <param name="index">Insertion destination index</param>
            <returns>Inserted Service</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.OnGraphChanged">
            <summary>
            Called when the NodeGraph to which the Node belongs has changed.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.IsContainsBehaviour(Arbor.NodeBehaviour)">
            <summary>
            Check if it contains NodeBehaviour.
            </summary>
            <param name="behaviour">Check NodeBehaviour</param>
            <returns>Returns true if it contains NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.MoveDecorator(System.Int32,Arbor.BehaviourTree.TreeBehaviourNode,System.Int32)">
            <summary>
            Move the order of Decorator.
            </summary>
            <param name="fromIndex">The moving want index.</param>
            <param name="toNode">The destination Node.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.MoveService(System.Int32,Arbor.BehaviourTree.TreeBehaviourNode,System.Int32)">
            <summary>
            Move the order of Service.
            </summary>
            <param name="fromIndex">The moving want index.</param>
            <param name="toNode">The destination Node.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.DestroyBehaviour">
            <summary>
            Destroy behaviour.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.DestroyAllBehaviour">
            <summary>
            Destroy all behaviour.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeBehaviourNode.SetBehaviour(Arbor.BehaviourTree.TreeNodeBehaviour)">
            <summary>
            Set Main Behaviour.
            </summary>
            <param name="behaviour">Behaviour</param>
        </member>
        <member name="T:Arbor.BehaviourTree.TreeNodeBase">
            <summary>
            Base class of Behavior Tree's node.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.enablePriority">
            <summary>
            Returns true if it is traced from the root node and connected.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.priority">
            <summary>
            The priority of the node.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.behaviourTree">
            <summary>
            Gets the behaviour tree.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.parentNode">
            <summary>
            Get parent node.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.status">
            <summary>
            The state of the node.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBase.isActive">
            <summary>
            Returns true if it is active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBase.HasParentLinkSlot">
            <summary>
            Whether this node has a NodeLinkSlot to parent.
            </summary>
            <returns>True if it has a NodeLinkSlot to parent, false otherwise.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBase.HasChildLinkSlot">
            <summary>
            Whether this node has a NodeLinkSlot to child.
            </summary>
            <returns>True if it has a NodeLinkSlot to child, false otherwise.</returns>
        </member>
        <member name="E:Arbor.BehaviourTree.TreeNodeBase.onChangedPriority">
            <summary>
            Called when priority changes.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBase.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBase.IsDeletable">
            <summary>
            Returns whether or not it can be deleted.
            </summary>
            <returns>Returns true if it can be deleted.</returns>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBase.ToString">
            <summary>
            Convert node to string (for debugging).
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="T:Arbor.BehaviourTree.TreeNodeBehaviour">
            <summary>
            Base class that defines the behavior of TreeBehaviourNode.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBehaviour.behaviourTree">
            <summary>
            Gets the behaviour tree.
            </summary>
        </member>
        <member name="P:Arbor.BehaviourTree.TreeNodeBehaviour.treeNode">
            <summary>
            Get the TreeNodeBase.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnInitializeEnabled">
            <summary>
            Called to perform enabled initialization.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnAwake">
            <summary>
            This function is called when the own node becomes active for the first time.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnStart">
            <summary>
            This function is called when the own node becomes active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnUpdate">
            <summary>
            This function is called when updating every frame while the own node is active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnLateUpdate">
            <summary>
            This function is called in LateUpdate while the local node is active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnFixedUpdate">
            <summary>
            This function is called in FixedUpdate while the local node is active.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnEnd">
            <summary>
            This function is called when the own node ends.
            </summary>
        </member>
        <member name="M:Arbor.BehaviourTree.TreeNodeBehaviour.OnAbort">
            <summary>
            This function is called when the own node is aborted.
            </summary>
        </member>
        <member name="T:Arbor.ParameterBehaviours.SetParameterActionInternal">
            <summary>
            Internal class of <see cref="!:Arbor.ParameterBehaviours.SetParameterAction" />.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.SetParameterActionInternal._ParameterReference">
            <summary>
            Setting destination parameter.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.SetParameterActionInternal._ParameterList">
            <summary>
            Value to set
            </summary>
        </member>
        <member name="P:Arbor.ParameterBehaviours.SetParameterActionInternal.isInGraphParameter">
             <summary>
            Whether this refers to a parameter in the graph.
             </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterActionInternal.SetParameter(Arbor.Parameter)">
            <summary>
            Set parameter.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterActionInternal.OnExecute">
            <summary>
            Called when executing.
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterActionInternal.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="T:Arbor.ParameterBehaviours.GetParameterCalculatorInternal">
            <summary>
            Internal class of <see cref="!:Arbor.ParameterBehaviours.GetParameterCalculator" />.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.GetParameterCalculatorInternal._ParameterReference">
            <summary>
            Parameters to get.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.GetParameterCalculatorInternal._Output">
            <summary>
            A slot that outputs the value of the parameter.
            </summary>
        </member>
        <member name="P:Arbor.ParameterBehaviours.GetParameterCalculatorInternal.isInGraphParameter">
             <summary>
            Whether this refers to a parameter in the graph.
             </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.GetParameterCalculatorInternal.SetParameter(Arbor.Parameter)">
            <summary>
            Set parameter.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.ParameterBehaviours.GetParameterCalculatorInternal.OnCalculate">
            <summary>
            It called when it is calculated .
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.GetParameterCalculatorInternal.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="T:Arbor.ParameterBehaviours.SetParameterBehaviourInternal">
            <summary>
            Internal class of <see cref="!:Arbor.ParameterBehaviours.SetParameterBehaviour" />.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.SetParameterBehaviourInternal._ExecuteMethodFlags">
            <summary>
            The method to execute
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.SetParameterBehaviourInternal._ParameterReference">
            <summary>
            Setting destination parameter.
            </summary>
        </member>
        <member name="F:Arbor.ParameterBehaviours.SetParameterBehaviourInternal._ParameterList">
            <summary>
            Value to set
            </summary>
        </member>
        <member name="P:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.isInGraphParameter">
             <summary>
            Whether this refers to a parameter in the graph.
             </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.SetParameter(Arbor.Parameter)">
            <summary>
            Set parameter.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.OnStateBegin">
            <summary>
            Called when [state enter].
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.OnStateUpdate">
            <summary>
            Update of State. It is called every frame.
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.OnStateLateUpdate">
            <summary>
            LateUpdate for State. Every frame, called after all updates.
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.OnStateEnd">
            <summary>
            Called when [state exit].
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.OnStateFixedUpdate">
            <summary>
            FixedUpdate for State. Frame-rate-independent Update for physics operations.
            </summary>
        </member>
        <member name="M:Arbor.ParameterBehaviours.SetParameterBehaviourInternal.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="T:Arbor.Bezier2D">
            <summary>
            Class to handle the two-dimensional cubic Bezier
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.startPosition">
            <summary>
            Starting point
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.startControl">
            <summary>
            Control point of the starting point
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.endPosition">
            <summary>
            End point
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.endControl">
            <summary>
            Control point of the end point
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:Arbor.Bezier2D.isChanged">
            <summary>
            Whether it has been changed
            </summary>
        </member>
        <member name="M:Arbor.Bezier2D.#ctor">
            <summary>
            new Bezier2D.
            </summary>
        </member>
        <member name="M:Arbor.Bezier2D.#ctor(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            new Bezier2D.
            </summary>
            <param name="startPosition">Starting point</param>
            <param name="startControl">Control point of the end point</param>
            <param name="endPosition">End point</param>
            <param name="endControl">Control point of the end point</param>
        </member>
        <member name="M:Arbor.Bezier2D.#ctor(Arbor.Bezier2D)">
            <summary>
            new Bezier2D.
            </summary>
            <param name="bezier">Copy source Bezier2D</param>
        </member>
        <member name="M:Arbor.Bezier2D.SetStartPoint(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Set Start point.
            </summary>
            <param name="position">Position</param>
            <param name="control">Control point</param>
            <returns>true if changed.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.SetEndPoint(UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Set End point.
            </summary>
            <param name="position">Position</param>
            <param name="control">Control point</param>
            <returns>true if changed.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetPoint(System.Single)">
            <summary>
            Get a position on the Bezier curve.
            </summary>
            <param name="t">0-1 of value</param>
            <returns>Returns the position on the Bezier curve.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetTangent(System.Single)">
            <summary>
            Get a tangent on the Bezier curve.
            </summary>
            <param name="t">0-1 of value</param>
            <returns>Returns the tangent on the Bezier curve.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetClosestPoint(UnityEngine.Vector2,System.Single)">
            <summary>
            Get a closest point on the Bezier curve.
            </summary>
            <param name="pos">position</param>
            <param name="thresholdT">threshold of closest param.</param>
            <returns>Closest point</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetClosestParam(UnityEngine.Vector2,System.Single)">
            <summary>
            Get a closest point on the Bezier curve.
            </summary>
            <param name="pos">position</param>
            <param name="thresholdT">threshold of closest param.</param>
            <returns>Closest param</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetPoint(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Get a position on the Bezier curve.
            </summary>
            <param name="startPosition">Starting point</param>
            <param name="startControl">Control point of the starting point</param>
            <param name="endPosition">End point</param>
            <param name="endControl">Control point of the end point</param>
            <param name="t">0-1 of value</param>
            <returns>Returns the position on the Bezier curve.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetTangent(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Get a tangent on the Bezier curve.
            </summary>
            <param name="startPosition">Starting point</param>
            <param name="startControl">Control point of the starting point</param>
            <param name="endPosition">End point</param>
            <param name="endControl">Control point of the end point</param>
            <param name="t">0-1 of value</param>
            <returns>Returns the tangent on the Bezier curve.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetBoundingBox(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
            <summary>
            Get the bounding box of a Bezier curve.
            </summary>
            <param name="startPosition">Starting point</param>
            <param name="startControl">Control point of the starting point</param>
            <param name="endPosition">End point</param>
            <param name="endControl">Control point of the end point</param>
            <returns>Returns the Bezier curve bounding box.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.LinearToInterpolationParam(System.Single)">
            <summary>
            Returns normal interpolation value of Bezier curve from linear interpolation value t.
            </summary>
            <param name="t">0-1 of value</param>
            <returns>Returns normal interpolation value of Bezier curve.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetLinearPoint(System.Single)">
            <summary>
            Get a position on the Bezier curve linear.
            </summary>
            <param name="t">0-1 of value</param>
            <returns>Returns the position on the Bezier curve linear</returns>
        </member>
        <member name="M:Arbor.Bezier2D.Equals(Arbor.Bezier2D)">
            <summary>
            Returns whether this is equal to Bezier2D.
            </summary>
            <param name="bezier">Value of Bezier2D</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.Equals(System.Object)">
            <summary>
            Returns whether this is equal to object.
            </summary>
            <param name="obj">object value</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.GetHashCode">
            <summary>
            Get a hash code.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Arbor.Bezier2D.ToString">
            <summary>
            Convert value to string format.
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="M:Arbor.Bezier2D.op_Equality(Arbor.Bezier2D,Arbor.Bezier2D)">
            <summary>
            Returns whether Bezier2D is equal.
            </summary>
            <param name="x">Bezier2D</param>
            <param name="y">Bezier2D</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.Bezier2D.op_Inequality(Arbor.Bezier2D,Arbor.Bezier2D)">
            <summary>
            Returns whether Bezier2D are not equal.
            </summary>
            <param name="x">Bezier2D</param>
            <param name="y">Bezier2D</param>
            <returns>Returns true if it is not equal.</returns>
        </member>
        <member name="T:Arbor.BuiltInBehaviour">
            <summary>
            Attributes that define the built-in Behaviour. Arbor used internally.
            </summary>
        </member>
        <member name="T:Arbor.BuiltInCalculator">
            <summary>
            Attributes that define the built-in Calculator. Arbor used internally.
            </summary>
        </member>
        <member name="T:Arbor.BuiltInComponent">
            <summary>
            Attributes that define the built-in Component. Arbor used internally.
            </summary>
        </member>
        <member name="T:Arbor.CalculateScope">
            <summary>
            Scope of the calculator node. When the recalculation mode of a calculator node is scoped, it is used to improve performance by suppressing recalculations in the same scope as much as possible.
            </summary>
        </member>
        <member name="M:Arbor.CalculateScope.Begin">
            <summary>
            Begin scope.
            </summary>
        </member>
        <member name="M:Arbor.CalculateScope.End">
            <summary>
            End scope.
            </summary>
        </member>
        <member name="P:Arbor.CalculateScope.hasScope">
            <summary>
            Returns whether it has a scope.
            </summary>
        </member>
        <member name="M:Arbor.CalculateScope.OpenScope">
            <summary>
            Open the scope. Used in the using statement.
            </summary>
            <returns>Open scope.</returns>
        </member>
        <member name="T:Arbor.Calculator">
            <summary>
            Class that defines the behavior of the State. Inherited and to use.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.AddBehaviourMenu" /></description></item>
            <item><description><see cref="T:Arbor.HideBehaviour" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourTitle" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourHelp" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Arbor.Calculator.recalculateMode">
            <summary>
            Recalculate mode
            </summary>
        </member>
        <member name="P:Arbor.Calculator.calculatorNode">
            <summary>
            Get the CalculatorNode.
            </summary>
        </member>
        <member name="P:Arbor.Calculator.calculatorID">
            <summary>
            Gets the Calculator identifier.
            </summary>
        </member>
        <member name="P:Arbor.Calculator.isDirty">
            <summary>
            Whether it has been changed.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnCreated">
            <summary>
            Raises the created event.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnCheckDirty">
            <summary>
            It is called when judging whether it has been changed.
            </summary>
            <returns>Returns true if it has been changed, false otherwise.</returns>
        </member>
        <member name="M:Arbor.Calculator.SetDirty">
            <summary>
            Call if you want call OnCalculate.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.Awake">
            <summary>
            This function is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnDestroy">
            <summary>
            This function is called when MonoBehaivour will be destroyed.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnValidate">
            <summary>
            This function is called when the script is loaded or a value is changed in the inspector (Called in the editor only).
            </summary>
        </member>
        <member name="M:Arbor.Calculator.Calculate">
            <summary>
            It is calculated, if necessary.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnCalculate">
            <summary>
            It called when it is calculated .
            </summary>
        </member>
        <member name="M:Arbor.Calculator.RebuildChangeableFields">
            <summary>
            Rebuild fields to watch for changes.<br/>
            Call this when you change the instance of <see cref="T:Arbor.ParameterReference"/> or <see cref="T:Arbor.FlexiblePrimitiveBase"/> directly from script during play.
            Also <see cref="M:Arbor.NodeBehaviour.RebuildFields"/> does the same.
            </summary>
        </member>
        <member name="M:Arbor.Calculator.OnRebuildFields">
            <summary>
            It is called when reconstructing data about fields.
            </summary>
        </member>
        <member name="T:Arbor.CalculatorHelp">
            <summary>
            Attribute that specifies the URL to be displayed from the Help button of Calculator.
            </summary>
        </member>
        <member name="P:Arbor.CalculatorHelp.url">
            <summary>
            Url to display in browser when pressing help button
            </summary>
        </member>
        <member name="M:Arbor.CalculatorHelp.#ctor(System.String)">
            <summary>
            CalculatorHelp constructor
            </summary>
            <param name="url">Help page url</param>
        </member>
        <member name="T:Arbor.CalculatorNode">
            <summary>
            Class that represents a calculator
            </summary>
        </member>
        <member name="P:Arbor.CalculatorNode.calculatorID">
            <summary>
            Gets the calculator node identifier.
            </summary>
        </member>
        <member name="P:Arbor.CalculatorNode.calculator">
            <summary>
            Get the attached Calculator.
            </summary>
        </member>
        <member name="M:Arbor.CalculatorNode.GetObject">
            <summary>
            Get the Object of the attached Calculator
            </summary>
            <returns>The Object of the attached Calculator</returns>
        </member>
        <member name="M:Arbor.CalculatorNode.CreateCalculator(System.Type)">
            <summary>
            Create a Calculator. Use it in the editor.
            </summary>
            <param name="calculatorType">Calculator type</param>
            <returns>The created calculator.</returns>
        </member>
        <member name="M:Arbor.CalculatorNode.OnGraphChanged">
            <summary>
            Called when the NodeGraph to which the Node belongs has changed.
            </summary>
        </member>
        <member name="M:Arbor.CalculatorNode.IsContainsBehaviour(Arbor.NodeBehaviour)">
            <summary>
            Check if it contains NodeBehaviour.
            </summary>
            <param name="behaviour">Check NodeBehaviour</param>
            <returns>Returns true if it contains NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.CalculatorNode.GetOldName">
            <summary>
            Get the node name before Arbor 3.9.0.
            </summary>
            <returns>Old node name</returns>
        </member>
        <member name="T:Arbor.CalculatorTitle">
            <summary>
            Attribute that specifies the title to display the StateBehaviour.
            </summary>
        </member>
        <member name="P:Arbor.CalculatorTitle.titleName">
            <summary>
            Title name
            </summary>
        </member>
        <member name="M:Arbor.CalculatorTitle.#ctor(System.String)">
            <summary>
            CalculatorTitle constructor
            </summary>
            <param name="titleName">Title name</param>
        </member>
        <member name="T:Arbor.CommentNode">
            <summary>
            Class that represents a comment
            </summary>
        </member>
        <member name="P:Arbor.CommentNode.commentID">
            <summary>
            Gets the comment identifier.
            </summary>
        </member>
        <member name="F:Arbor.CommentNode.comment">
            <summary>
            Comment string.
            </summary>
        </member>
        <member name="M:Arbor.CommentNode.GetOldName">
            <summary>
            Get the node name before Arbor 3.9.0.
            </summary>
            <returns>Old node name</returns>
        </member>
        <member name="T:Arbor.ComponentSingleton`1">
            <summary>
            Component type singleton class
            </summary>
            <typeparam name="T">Specify a type that inherits from this class</typeparam>
        </member>
        <member name="P:Arbor.ComponentSingleton`1.instance">
            <summary>
            To get an instance.
            </summary>
        </member>
        <member name="P:Arbor.ComponentSingleton`1.exists">
            <summary>
            Get if the instance exists.
            </summary>
        </member>
        <member name="M:Arbor.ComponentSingleton`1.DestroySingleton">
            <summary>
            Destroy the instance
            </summary>
        </member>
        <member name="M:Arbor.ComponentSingleton`1.GetGameObjectName">
            <summary>
            Get the name of the GameObject to create.
            </summary>
            <returns>The name of the GameObject to create</returns>
        </member>
        <member name="M:Arbor.ComponentSingleton`1.Awake">
            <summary>
            This function is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:Arbor.ComponentSingleton`1.OnDestroy">
            <summary>
            This function is called when MonoBehaivour will be destroyed.
            </summary>
        </member>
        <member name="T:Arbor.ComponentUtility">
            <summary>
            Component utility class for Editor
            </summary>
        </member>
        <member name="T:Arbor.ComponentUtility.DelayCallBack">
            <summary>
            Delegate of delayed invoked method
            </summary>
        </member>
        <member name="F:Arbor.ComponentUtility.editorProcessor">
            <summary>
            Component processor in Editor
            </summary>
        </member>
        <member name="F:Arbor.ComponentUtility.useEditorProcessor">
            <summary>
            Flag using editorProcessor.
            </summary>
        </member>
        <member name="M:Arbor.ComponentUtility.AddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Add component.
            </summary>
            <param name="gameObject">GameObject</param>
            <param name="type">Component type</param>
            <returns>Component</returns>
        </member>
        <member name="M:Arbor.ComponentUtility.AddComponent``1(UnityEngine.GameObject)">
            <summary>
            Add component.
            </summary>
            <typeparam name="Type">Component type</typeparam>
            <param name="gameObject">GameObject</param>
            <returns>Component</returns>
        </member>
        <member name="M:Arbor.ComponentUtility.Destroy(UnityEngine.Object)">
            <summary>
            Destroy object.
            </summary>
            <param name="objectToUndo">Object</param>
        </member>
        <member name="M:Arbor.ComponentUtility.RecordObject(UnityEngine.Object,System.String)">
            <summary>
            Record object. Valid only in Editor.
            </summary>
            <param name="objectToUndo">Object</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.ComponentUtility.RecordObjects(UnityEngine.Object[],System.String)">
            <summary>
            Records object. Valid only in Editor.
            </summary>
            <param name="objs">Objects</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.ComponentUtility.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)">
            <summary>
            Register Object in Undo. Valid only in Editor.
            </summary>
            <param name="objectToUndo">Object</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.ComponentUtility.SetDirty(UnityEngine.Object)">
            <summary>
            Marks an Object as dirty. Valid only in Editor.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.ComponentUtility.MoveBehaviour(Arbor.Node,Arbor.NodeBehaviour)">
            <summary>
            Move behavior to node. Valid only in Editor.
            </summary>
            <param name="node">Moving destination node</param>
            <param name="behaviour">Moving NodeBehaviour</param>
        </member>
        <member name="M:Arbor.ComponentUtility.MoveParameterContainer(Arbor.NodeGraph)">
            <summary>
            Move the parameter container in the graph. Valid only in Editor.
            </summary>
            <param name="nodeGraph">Moving graph</param>
        </member>
        <member name="M:Arbor.ComponentUtility.MoveVariable(Arbor.Parameter,Arbor.VariableBase)">
            <summary>
            Move variable to parameter. Valid only in Editor.
            </summary>
            <param name="parameter">Moving destination Parameter</param>
            <param name="variable">Moving VariableBase</param>
        </member>
        <member name="M:Arbor.ComponentUtility.MoveVariableList(Arbor.Parameter,Arbor.VariableListBase)">
            <summary>
            Move variableList to parameter. Valid only in Editor.
            </summary>
            <param name="parameter">Moving destination Parameter</param>
            <param name="variableList">Moving VariableListBase</param>
        </member>
        <member name="M:Arbor.ComponentUtility.RefreshNodeGraph(Arbor.NodeGraph)">
            <summary>
            Refresh NodeGraph. Valid only in Editor.
            </summary>
            <param name="nodeGraph">NodeGraph</param>
        </member>
        <member name="M:Arbor.ComponentUtility.IsValidObject(UnityEngine.Object)">
            <summary>
            Check if Object is valid.
            </summary>
            <param name="obj">Object</param>
            <returns>Returns true if Object is valid.</returns>
        </member>
        <member name="M:Arbor.ComponentUtility.DelayDestroy(UnityEngine.Object)">
            <summary>
            Delay Destroy. Delayed only in Editor.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.ComponentUtility.DelayCall(Arbor.ComponentUtility.DelayCallBack)">
            <summary>
            Delay call. Delayed only in Editor.
            </summary>
            <param name="delayCall">Method to call</param>
        </member>
        <member name="M:Arbor.ComponentUtility.InstantiatePrefab(UnityEngine.Object)">
            <summary>
            Instantiate a prefab.
            </summary>
            <param name="prefab">Prefab</param>
            <returns>Instantiated object</returns>
            <remarks>
            When called from the Unity Editor during editing, the prefab is placed in the scene as a linked instance.
            </remarks>
        </member>
        <member name="T:Arbor.ConditionResult">
            <summary>
            Result of condition judgment
            </summary>
        </member>
        <member name="F:Arbor.ConditionResult.None">
            <summary>
            No condition
            </summary>
        </member>
        <member name="F:Arbor.ConditionResult.Success">
            <summary>
            Success
            </summary>
        </member>
        <member name="F:Arbor.ConditionResult.Failure">
            <summary>
            Failure
            </summary>
        </member>
        <member name="T:Arbor.ConstantMultilineAttribute">
            <summary>
            Display multiple lines when the type of <see cref="T:Arbor.FlexibleString"/> is Constant.
            </summary>
        </member>
        <member name="T:Arbor.ConstantRangeAttribute">
            <summary>
            Limit the value range when <see cref = "T:Arbor.FlexibleInt" /> , <see cref="T:Arbor.FlexibleLong"/> , <see cref = "T:Arbor.FlexibleFloat" /> type is Constant.
            </summary>
        </member>
        <member name="F:Arbor.ConstantRangeAttribute.min">
            <summary>
            Min value
            </summary>
        </member>
        <member name="F:Arbor.ConstantRangeAttribute.max">
            <summary>
            Max value
            </summary>
        </member>
        <member name="M:Arbor.ConstantRangeAttribute.#ctor(System.Single,System.Single)">
            <summary>
            Limit the value range when <see cref = "T:Arbor.FlexibleInt" /> , <see cref="T:Arbor.FlexibleLong"/> , <see cref = "T:Arbor.FlexibleFloat" /> type is Constant.
            </summary>
            <param name="min">Min Value</param>
            <param name="max">Max Value</param>
        </member>
        <member name="T:Arbor.DataBranch">
            <summary>
            Class that connects DataSlot.
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.branchID">
            <summary>
            ID of branch.
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.enabled">
            <summary>
            Whether to draw. For the editor.
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.inBehaviour">
            <summary>
            Input side Behaviour
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.inNodeID">
            <summary>
            Input side nodeID
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.outBehaviour">
            <summary>
            Output side Behaviour
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.outNodeID">
            <summary>
            Output side nodeID
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.lineBezier">
            <summary>
            Bezier curve of the line to be connected. For editor
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.valueSlot">
            <summary>
            The slot where the value is stored.
            </summary>
            <remarks>The slot that is valid when the value is obtained from the input slot is stored.</remarks>
        </member>
        <member name="P:Arbor.DataBranch.value">
            <summary>
            get set the value.
            When connecting to the output slot of Calculator, update it as necessary and obtain it.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.currentValue">
            <summary>
            Get the current value.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.isUsed">
            <summary>
            Gets whether or not a value is used.
            </summary>
        </member>
        <member name="F:Arbor.DataBranch.showDataValue">
            <summary>
            Gets whether or not a value is visible.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.isVisible">
            <summary>
            Gets whether or not a value is visible.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.updatedTime">
            <summary>
            Time that does not depend on timeScale when value is updated.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.outputSlotField">
            <summary>
            Get DataSlotField of output slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.outputSlot">
            <summary>
            Get the output slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.outputSlotFieldInfo">
            <summary>
            Get the FieldInfo of the output slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.outputType">
            <summary>
            Output type.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.isValidOutputSlot">
            <summary>
            Returns whether the output slot is valid.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.inputSlotField">
            <summary>
            Get the FieldInfo of the input slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.inputSlot">
            <summary>
            Get the input slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.inputSlotFieldInfo">
            <summary>
            Get the FieldInfo of the input slot.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.inputType">
            <summary>
            Input type.
            </summary>
        </member>
        <member name="P:Arbor.DataBranch.isValidInputSlot">
            <summary>
            Returns whether the input slot is valid.
            </summary>
        </member>
        <member name="M:Arbor.DataBranch.SetBehaviour(System.Int32,UnityEngine.Object,System.Int32,UnityEngine.Object)">
            <summary>
            Change Behavior.
            </summary>
            <param name="inNodeID">Node ID on the input slot side</param>
            <param name="inBehaviour">Object on the input slot side</param>
            <param name="outNodeID">Node ID on the output slot side</param>
            <param name="outBehaviour">Object on the output slot side</param>
        </member>
        <member name="M:Arbor.DataBranch.SetDirtySlotField">
            <summary>
            Mark slot field as dirty
            </summary>
        </member>
        <member name="T:Arbor.DataBranchRerouteNode">
            <summary>
            Reroute node of DataBranch.
            </summary>
        </member>
        <member name="F:Arbor.DataBranchRerouteNode.kDefaultDirection">
            <summary>
            Default direction
            </summary>
        </member>
        <member name="F:Arbor.DataBranchRerouteNode.link">
            <summary>
            Reroute slot
            </summary>
        </member>
        <member name="F:Arbor.DataBranchRerouteNode.direction">
            <summary>
            Direction of line
            </summary>
        </member>
        <member name="P:Arbor.DataBranchRerouteNode.slotField">
            <summary>
            link's DataSlotField
            </summary>
        </member>
        <member name="M:Arbor.DataBranchRerouteNode.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="T:Arbor.DataBranchRerouteNodeList">
            <summary>
            DataBranchRerouteNode List
            </summary>
        </member>
        <member name="T:Arbor.DataLinkAttribute">
            <summary>
            Attribute that makes DataSlot of normal field.
            </summary>
        </member>
        <member name="P:Arbor.DataLinkAttribute.hasUpdateTiming">
            <summary>
            Whether UpdateTiming is specified.
            </summary>
        </member>
        <member name="P:Arbor.DataLinkAttribute.updateTiming">
            <summary>
            Specified UpdateTiming
            </summary>
        </member>
        <member name="M:Arbor.DataLinkAttribute.#ctor">
            <summary>
            DataLinkAttribute constructor<br/>
            Use this constructor to specify UpdateTiming from the field.
            </summary>
        </member>
        <member name="M:Arbor.DataLinkAttribute.#ctor(Arbor.DataLinkUpdateTiming)">
            <summary>
            DataLinkAttribute constructor<br/>
            Use this constructor to specify UpdateTiming and not to change it in the editor.
            </summary>
            <param name="updateTiming">Specify UpdateTiming</param>
        </member>
        <member name="T:Arbor.DataLinkUpdateTiming">
            <summary>
            DataLink update timing
            </summary>
        </member>
        <member name="F:Arbor.DataLinkUpdateTiming.Enter">
            <summary>
            Update when entering a node.
            </summary>
        </member>
        <member name="F:Arbor.DataLinkUpdateTiming.Execute">
            <summary>
            Update when the node is executed.
            </summary>
        </member>
        <member name="F:Arbor.DataLinkUpdateTiming.Manual">
            <summary>
            Manually update.
            Use <see cref="M:Arbor.NodeBehaviour.UpdateDataLink"/> to update.
            </summary>
        </member>
        <member name="T:Arbor.IDataSlot">
            <summary>
            The interface of the slot that connects to the data flow
            </summary>
        </member>
        <member name="P:Arbor.IDataSlot.slotType">
            <summary>
            Slot type
            </summary>
        </member>
        <member name="P:Arbor.IDataSlot.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.IDataSlot.Disconnect">
            <summary>
            Disconnect the connection.
            </summary>
        </member>
        <member name="T:Arbor.DataSlot">
            <summary>
            Slot for connecting a calculator node.
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.slotType">
            <summary>
            Slot type
            </summary>
        </member>
        <member name="F:Arbor.DataSlot.nodeGraph">
            <summary>
            NodeGraph slot belongs
            </summary>
        </member>
        <member name="F:Arbor.DataSlot.position">
            <summary>
            Position on ArborEditor of slot(Editor Only)
            </summary>
        </member>
        <member name="E:Arbor.DataSlot.onConnectionChanged">
            <summary>
            Callback event when connection is changed
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.isValidField">
            <summary>
            For Editor
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.slotField">
            <summary>
            DataSlotField
            </summary>
        </member>
        <member name="E:Arbor.DataSlot.onConnectableTypeChanged">
            <summary>
            Called when the connectable type changes.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.ConnectableTypeChanged">
            <summary>
            Called when the connectable type is changed.
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="P:Arbor.DataSlot.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.connectableType">
            <summary>
            Connectable type
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.connectableTypeName">
            <summary>
            Connectable type name
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.enabledGUI">
            <summary>
            Whether the GUI for the slot is valid.
            </summary>
        </member>
        <member name="P:Arbor.DataSlot.isVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.SetVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.ClearVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.Disconnect">
            <summary>
            Disconnect the connection.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.ClearBranch">
            <summary>
            Clear the connection status. Since the DataBranch remains, call it when the connection status is no longer needed by copy and paste.
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.DirtyBranchCache">
            <summary>
            Mark the Data Branch cache to change
            </summary>
        </member>
        <member name="M:Arbor.DataSlot.IsConnectable(Arbor.DataSlot)">
            <summary>
            It is judged whether connection is possible.
            </summary>
            <param name="slot">Slot to determine</param>
            <returns>Returns true if connectable, false otherwise.</returns>
        </member>
        <member name="M:Arbor.DataSlot.IsConnectable(Arbor.DataSlot,Arbor.DataSlot)">
            <summary>
            Determine if DataSlots can connect to each other.
            </summary>
            <param name="inputSlot">Input slot</param>
            <param name="outputSlot">Output slot</param>
            <returns>Returns true if the connection is possible.</returns>
        </member>
        <member name="T:Arbor.DataSlotField">
            <summary>
            Field information of DataSlot
            </summary>
        </member>
        <member name="F:Arbor.DataSlotField.slot">
            <summary>
            DataSlot
            </summary>
        </member>
        <member name="P:Arbor.DataSlotField.fieldInfo">
            <summary>
            FieldInfo
            </summary>
        </member>
        <member name="P:Arbor.DataSlotField.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.DataSlotField.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="P:Arbor.DataSlotField.connectableType">
            <summary>
            Connectable type
            </summary>
        </member>
        <member name="P:Arbor.DataSlotField.connectableTypeName">
            <summary>
            Connectable type name
            </summary>
        </member>
        <member name="P:Arbor.DataSlotField.enabled">
            <summary>
            Whether the GUI for the slot is valid.
            </summary>
        </member>
        <member name="P:Arbor.DataSlotField.isVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlotField.SetVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlotField.ClearVisible">
            <summary>
            For Editor.
            </summary>
        </member>
        <member name="M:Arbor.DataSlotField.#ctor(Arbor.DataSlot,System.Reflection.FieldInfo)">
            <summary>
            DataSlotField constructor
            </summary>
            <param name="slot">DataSlot</param>
            <param name="fieldInfo">FieldInfo</param>
        </member>
        <member name="M:Arbor.DataSlotField.IsConnectable(Arbor.DataSlotField,Arbor.DataSlotField)">
            <summary>
            Determine if DataSlotFields can connect to each other.
            </summary>
            <param name="inputSlotField">Input slot field</param>
            <param name="outputSlotField">Output slot field</param>
            <returns>Returns true if the connection is possible.</returns>
        </member>
        <member name="M:Arbor.DataSlotField.IsConnectable(Arbor.DataSlotField)">
            <summary>
            It is judged whether connection is possible.
            </summary>
            <param name="slotField">Slot to determine</param>
            <returns>Returns true if connectable, false otherwise.</returns>
        </member>
        <member name="T:Arbor.IInputSlot">
            <summary>
            Interface of input DataSlot.
            </summary>
        </member>
        <member name="M:Arbor.IInputSlot.SetBranch(Arbor.DataBranch)">
            <summary>
            Set DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.IInputSlot.RemoveBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.IInputSlot.ResetBranch">
            <summary>
            Reset DataBranch
            </summary>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.IInputSlot.GetBranch">
            <summary>
            Get DataBranch.
            </summary>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.IInputSlot.IsConnected(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="T:Arbor.InputSlotAny">
            <summary>
            Input slot class specifying type
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.InputSlotAny.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.InputSlotAny.#ctor">
            <summary>
            InputSlotAny default constructor
            </summary>
        </member>
        <member name="M:Arbor.InputSlotAny.#ctor(Arbor.InputSlotBase)">
            <summary>
            InputSlotAny constructor
            </summary>
            <param name="inputSlot">Copy source input slot</param>
        </member>
        <member name="M:Arbor.InputSlotAny.#ctor(System.Type)">
            <summary>
            InputSlotAny constructor
            </summary>
            <param name="targetType">Input type</param>
        </member>
        <member name="T:Arbor.InputSlotBase">
            <summary>
            Input slot
            </summary>
        </member>
        <member name="F:Arbor.InputSlotBase.branchID">
            <summary>
            Branch ID
            </summary>
        </member>
        <member name="P:Arbor.InputSlotBase.slotType">
            <summary>
            Slot type
            </summary>
        </member>
        <member name="M:Arbor.InputSlotBase.DirtyBranchCache">
            <summary>
            Mark the Data Branch cache to change
            </summary>
        </member>
        <member name="P:Arbor.InputSlotBase.branch">
            <summary>
            Get branch
            </summary>
        </member>
        <member name="P:Arbor.InputSlotBase.isUsed">
            <summary>
            Gets whether or not a value is used.
            </summary>
        </member>
        <member name="P:Arbor.InputSlotBase.updatedTime">
            <summary>
            Time that does not depend on timeScale when value is updated.
            </summary>
        </member>
        <member name="M:Arbor.InputSlotBase.SetBranch(Arbor.DataBranch)">
            <summary>
            Set DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.InputSlotBase.RemoveBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.ResetBranch">
            <summary>
            Reset DataBranch
            </summary>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.GetBranch">
            <summary>
            Get DataBranch.
            </summary>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.IsConnected(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.Disconnect">
            <summary>
            Disconnect the connection.
            </summary>
        </member>
        <member name="M:Arbor.InputSlotBase.ClearBranch">
            <summary>
            Clear the connection status. Since the DataBranch remains, call it when the connection status is no longer needed by copy and paste.
            </summary>
        </member>
        <member name="M:Arbor.InputSlotBase.Calculate">
            <summary>
            Perform the calculation.
            </summary>
            <returns>Returns the output slot in which the operation result is stored. Returns null if the slot is not connected.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.GetValue(System.Object@)">
            <summary>
            Get the value
            </summary>
            <param name="value">The value you get</param>
            <returns>Returns true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.GetValue``1(``0@)">
            <summary>
            Get the value
            </summary>
            <typeparam name="T">Type of value to get</typeparam>
            <param name="value">The value you get</param>
            <returns>Returns true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.TryGetValue``1(``0@)">
            <summary>
            Try to get a value of the specified type.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value Output Arguments</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.SetInputBranch(Arbor.DataBranch)">
            <summary>
            Set DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.InputSlotBase.RemoveInputBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.InputSlotBase.GetInputBranch">
            <summary>
            Get DataBranch.
            </summary>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.IsConnectedInput(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.InputSlotBase.GetValueObject">
            <summary>
            Get the value object.
            </summary>
            <returns>Returns the value object.</returns>
        </member>
        <member name="T:Arbor.InputSlotBool">
            <summary>
            bool type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotBounds">
            <summary>
            Bounds type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotBoundsInt">
            <summary>
            BoundsInt type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotCollider">
            <summary>
            Collider type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotCollider2D">
            <summary>
            Collider2D type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotCollision">
            <summary>
            Collision type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotCollision2D">
            <summary>
            Collision2D type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotColor">
            <summary>
            Color type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotComponent">
            <summary>
            Component type of input slot
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.InputSlotComponent.GetValue``1">
            <summary>
            Get value.
            </summary>
            <typeparam name="T">Type of value to get.</typeparam>
            <returns>The value you got. If there is none, it returns null.</returns>
        </member>
        <member name="T:Arbor.InputSlotComponent`1">
            <summary>
            Component type of input slot(Generic)
            </summary>
            <typeparam name="T">The type of the Component to input</typeparam>
        </member>
        <member name="M:Arbor.InputSlotComponent`1.op_Explicit(Arbor.InputSlotComponent{`0})~Arbor.InputSlotComponent">
            <summary>
            Cast <see cref="T:Arbor.InputSlotComponent`1"/> to <see cref="T:Arbor.InputSlotComponent"/>.
            </summary>
            <param name="inputSlot"><see cref="T:Arbor.InputSlotComponent`1"/></param>
            <returns>Returns the result of casting to InputSlotComponent.</returns>
        </member>
        <member name="T:Arbor.InputSlotFloat">
            <summary>
            float type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotGameObject">
            <summary>
            GameObject type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotInt">
            <summary>
            int type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotLong">
            <summary>
            long type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlot`1">
            <summary>
            Generic class of the input slot
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:Arbor.InputSlot`1.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.InputSlot`1.GetValue(`0@)">
            <summary>
            Get the value
            </summary>
            <param name="value">The value you get</param>
            <returns>Returns true if the value can be obtained.</returns>
        </member>
        <member name="T:Arbor.InputSlotQuaternion">
            <summary>
            Quaternion type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRay">
            <summary>
            Ray type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRaycastHit">
            <summary>
            RaycastHit type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRaycastHit2D">
            <summary>
            RaycastHit2D type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRect">
            <summary>
            Rect type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRectInt">
            <summary>
            RectInt type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRectTransform">
            <summary>
            RectTransform type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRigidbody">
            <summary>
            Rigidbody type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotRigidbody2D">
            <summary>
            Rigidbody2D type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotString">
            <summary>
            string type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotTransform">
            <summary>
            Transform type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotTypable">
            <summary>
            Input slot class specifying type
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.HideSlotFields" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.InputSlotTypable.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.InputSlotTypable.#ctor">
            <summary>
            InputSlotTypable constructor
            </summary>
        </member>
        <member name="M:Arbor.InputSlotTypable.#ctor(System.Type)">
            <summary>
            InputSlotTypable constructor
            </summary>
            <param name="type">Data type to be stored in the slot</param>
        </member>
        <member name="T:Arbor.InputSlotUnityObject">
            <summary>
            UnityEngine.Object type of input slot
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.InputSlotUnityObject.GetValue``1">
            <summary>
            Get value.
            </summary>
            <typeparam name="T">Type of value to get.</typeparam>
            <returns>The value you got. If there is none, it returns null.</returns>
        </member>
        <member name="T:Arbor.InputSlotVector2">
            <summary>
            Vector2 type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotVector2Int">
            <summary>
            Vector2Int type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotVector3">
            <summary>
            Vector3 type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotVector3Int">
            <summary>
            Vector3Int type of input slot
            </summary>
        </member>
        <member name="T:Arbor.InputSlotVector4">
            <summary>
            Vector4 type of input slot
            </summary>
        </member>
        <member name="T:Arbor.IOutputSlot">
            <summary>
            Interface of output DataSlot.
            </summary>
        </member>
        <member name="P:Arbor.IOutputSlot.branchCount">
            <summary>
            Get count of DataBranch.
            </summary>
            <returns>Count of DataBranch</returns>
        </member>
        <member name="M:Arbor.IOutputSlot.AddBranch(Arbor.DataBranch)">
            <summary>
            Addition of DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.IOutputSlot.RemoveBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.IOutputSlot.RemoveBranchAt(System.Int32)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="index">Index</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.IOutputSlot.GetBranch(System.Int32)">
            <summary>
            Get DataBranch.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.IOutputSlot.IsConnected(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="T:Arbor.IOutputSlotAny">
            <summary>
            Interface that defines an output slot of any type
            </summary>
        </member>
        <member name="M:Arbor.IOutputSlotAny.SetValue``1(``0)">
            <summary>
            Set the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.IOutputSlotAny.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <returns>Returns a value.</returns>
        </member>
        <member name="M:Arbor.IOutputSlotAny.TryGetValue``1(``0@)">
            <summary>
            Try to get a value of the specified type.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value Output Arguments</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="T:Arbor.OutputSlotAny">
            <summary>
            Output slot class outputting any type
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.OutputSlotAny.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotAny.#ctor">
            <summary>
            OutputSlotAny default constructor
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotAny.#ctor(Arbor.OutputSlotBase)">
            <summary>
            OutputSlotAny constructor
            </summary>
            <param name="outputSlot">Copy source input slot</param>
        </member>
        <member name="M:Arbor.OutputSlotAny.#ctor(System.Type)">
            <summary>
            OutputSlotAny constructor
            </summary>
            <param name="targetType">Output type</param>
        </member>
        <member name="M:Arbor.OutputSlotAny.SetValue(System.Object)">
            <summary>
            Set the value
            </summary>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Arbor.OutputSlotAny.SetValue``1(``0)">
            <summary>
            Set the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.OutputSlotAny.GetValue">
            <summary>
            Returns the value.
            </summary>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotAny.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <returns>Returns a value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotAny.GetValueString">
            <summary>
            Converts a value to a string and returns it.
            </summary>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Arbor.OutputSlotAny.GetValueType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>Returns the type of the value.</returns>
        </member>
        <member name="T:Arbor.OutputSlotBase">
            <summary>
            Output slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.DirtyBranchCache">
            <summary>
            Mark the Data Branch cache to change
            </summary>
        </member>
        <member name="F:Arbor.OutputSlotBase.branchIDs">
            <summary>
            List of the destination branch
            </summary>
        </member>
        <member name="P:Arbor.OutputSlotBase.slotType">
            <summary>
            Slot type
            </summary>
        </member>
        <member name="P:Arbor.OutputSlotBase.branchCount">
            <summary>
            Get count of DataBranch.
            </summary>
            <returns>Count of DataBranch</returns>
        </member>
        <member name="P:Arbor.OutputSlotBase.isUsed">
            <summary>
            Gets whether or not a value is used.
            </summary>
        </member>
        <member name="P:Arbor.OutputSlotBase.updatedTime">
            <summary>
            Time that does not depend on timeScale when value is updated.
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.AddBranch(Arbor.DataBranch)">
            <summary>
            Addition of DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetValueType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>Returns the type of the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.OnBeforeSerialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnBeforeSerialize.
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.#ctor">
            <summary>
            OutputSlotBase constructor
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.RemoveBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.RemoveBranchAt(System.Int32)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="index">index</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetBranch(System.Int32)">
            <summary>
            Get DataBranch.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.IsConnected(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.Disconnect">
            <summary>
            Disconnect the connection.
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetValue">
            <summary>
            Returns the value.
            </summary>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetValueString">
            <summary>
            Converts a value to a string and returns it.
            </summary>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.ClearBranch">
            <summary>
            Clear the connection status. Since the DataBranch remains, call it when the connection status is no longer needed by copy and paste.
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotBase.AddOutputBranch(Arbor.DataBranch)">
            <summary>
            Addition of DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.OutputSlotBase.RemoveOutputBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetOutputBranchCount">
            <summary>
            Get count of DataBranch.
            </summary>
            <returns>Count of DataBranch</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.GetOutputBranch(System.Int32)">
            <summary>
            Get DataBranch.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.IsConnectedOutput(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.OutputSlotBase.TryGetValue``1(``0@)">
            <summary>
            Try to get a value of the specified type.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value Output Arguments</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="T:Arbor.OutputSlotBool">
            <summary>
            bool type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotBounds">
            <summary>
            Bounds type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotBoundsInt">
            <summary>
            BoundsInt type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotCollider">
            <summary>
            Collider type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotCollider2D">
            <summary>
            Collider2D type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotCollision">
            <summary>
            Collision type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotCollision2D">
            <summary>
            Collision2D type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotColor">
            <summary>
            Color type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotComponent">
            <summary>
            Component type of output slot
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.HideSlotFields" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.OutputSlotComponent.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotComponent.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotComponent`1">
            <summary>
            Component type of output slot(Generic)
            </summary>
            <typeparam name="T">The type of the Component to output</typeparam>
        </member>
        <member name="M:Arbor.OutputSlotComponent`1.op_Explicit(Arbor.OutputSlotComponent{`0})~Arbor.OutputSlotComponent">
            <summary>
            Cast <see cref="T:Arbor.OutputSlotComponent`1"/> to <see cref="T:Arbor.OutputSlotComponent"/>.
            </summary>
            <param name="outputSlot"><see cref="T:Arbor.OutputSlotComponent`1"/></param>
            <returns>Returns the result of casting to OutputSlotComponent.</returns>
        </member>
        <member name="T:Arbor.OutputSlotFloat">
            <summary>
            float type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotGameObject">
            <summary>
            GameObject type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotInt">
            <summary>
            int type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotLong">
            <summary>
            long type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlot`1">
            <summary>
            Generic class of the output slot
            </summary>
            <typeparam name="T">Type of data</typeparam>
        </member>
        <member name="P:Arbor.OutputSlot`1.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlot`1.SetValue(`0)">
            <summary>
            Set the value
            </summary>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Arbor.OutputSlot`1.GetValue">
            <summary>
            Returns the value.
            </summary>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlot`1.GetValueType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>Returns the type of the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlot`1.GetValueString">
            <summary>
            Converts a value to a string and returns it.
            </summary>
            <returns>Converted string.</returns>
        </member>
        <member name="T:Arbor.OutputSlotQuaternion">
            <summary>
            Quaternion type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRay">
            <summary>
            Ray type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRaycastHit">
            <summary>
            RaycastHit type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRaycastHit2D">
            <summary>
            RaycastHit2D type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRect">
            <summary>
            Rect type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRectInt">
            <summary>
            RectInt type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRectTransform">
            <summary>
            RectTransform type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRigidbody">
            <summary>
            Rigidbody type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotRigidbody2D">
            <summary>
            Rigidbody2D type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotString">
            <summary>
            string type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotTransform">
            <summary>
            Transform type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotTypable">
            <summary>
            Output slot class specifying type
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.HideSlotFields" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.OutputSlotTypable.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotTypable.#ctor">
            <summary>
            OutputSlotTypable constructor
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotTypable.#ctor(System.Type)">
            <summary>
            OutputSlotTypable constructor
            </summary>
            <param name="type">Data type to be stored in the slot</param>
        </member>
        <member name="M:Arbor.OutputSlotTypable.SetValue(System.Object)">
            <summary>
            Set the value
            </summary>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:Arbor.OutputSlotTypable.SetValue``1(``0)">
            <summary>
            Set the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.OutputSlotTypable.GetValue">
            <summary>
            Returns the value.
            </summary>
            <returns>Returns the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotTypable.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <returns>Returns a value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotTypable.GetValueString">
            <summary>
            Converts a value to a string and returns it.
            </summary>
            <returns>Converted string.</returns>
        </member>
        <member name="M:Arbor.OutputSlotTypable.GetValueType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>Returns the type of the value.</returns>
        </member>
        <member name="M:Arbor.OutputSlotTypable.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotUnityObject">
            <summary>
            UnityEngine.Object type of output slot
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.HideSlotFields" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.OutputSlotUnityObject.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.OutputSlotUnityObject.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotVector2">
            <summary>
            Vector2 type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotVector2Int">
            <summary>
            Vector2Int type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotVector3">
            <summary>
            Vector3 type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotVector3Int">
            <summary>
            Vector3Int type of output slot
            </summary>
        </member>
        <member name="T:Arbor.OutputSlotVector4">
            <summary>
            Vector4 type of output slot
            </summary>
        </member>
        <member name="T:Arbor.RerouteSlot">
            <summary>
            Slot used for midpoint of DataBranch.
            </summary>
        </member>
        <member name="F:Arbor.RerouteSlot.inputBranchID">
            <summary>
            Input branch ID
            </summary>
        </member>
        <member name="F:Arbor.RerouteSlot.outputBranchIDs">
            <summary>
            Output branch ID
            </summary>
        </member>
        <member name="F:Arbor.RerouteSlot.type">
            <summary>
            Connectable value type
            </summary>
        </member>
        <member name="P:Arbor.RerouteSlot.slotType">
            <summary>
            Slot type
            </summary>
        </member>
        <member name="P:Arbor.RerouteSlot.dataType">
            <summary>
            The type of data stored in the slot
            </summary>
        </member>
        <member name="M:Arbor.RerouteSlot.Disconnect">
            <summary>
            Disconnect the connection.
            </summary>
        </member>
        <member name="M:Arbor.RerouteSlot.DirtyBranchCache">
            <summary>
            Mark the Data Branch cache to change
            </summary>
        </member>
        <member name="P:Arbor.RerouteSlot.inputSlot">
            <summary>
            Access input slot interface
            </summary>
        </member>
        <member name="P:Arbor.RerouteSlot.outputSlot">
            <summary>
            Access input slot interface
            </summary>
        </member>
        <member name="M:Arbor.RerouteSlot.SetInputBranch(Arbor.DataBranch)">
            <summary>
            Set DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.RerouteSlot.RemoveInputBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.RerouteSlot.GetInputBranch">
            <summary>
            Get DataBranch.
            </summary>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.RerouteSlot.IsConnectedInput(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.RerouteSlot.AddOutputBranch(Arbor.DataBranch)">
            <summary>
            Addition of DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.RerouteSlot.RemoveOutputBranch(Arbor.DataBranch)">
            <summary>
            Remove DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
        </member>
        <member name="M:Arbor.RerouteSlot.GetOutputBranchCount">
            <summary>
            Get count of DataBranch.
            </summary>
            <returns>Count of DataBranch</returns>
        </member>
        <member name="M:Arbor.RerouteSlot.GetOutputBranch(System.Int32)">
            <summary>
            Get DataBranch.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.RerouteSlot.IsConnectedOutput(Arbor.DataBranch)">
            <summary>
            It judges whether it is connected with DataBranch.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>True if connected, false otherwise.</returns>
        </member>
        <member name="M:Arbor.RerouteSlot.#ctor">
            <summary>
            RerouteSlot constructor
            </summary>
        </member>
        <member name="M:Arbor.RerouteSlot.ClearBranch">
            <summary>
            Clear the connection status. Since the DataBranch remains, call it when the connection status is no longer needed by copy and paste.
            </summary>
        </member>
        <member name="M:Arbor.RerouteSlot.Copy(Arbor.RerouteSlot)">
            <summary>
            For editor. Copy the connection status.
            </summary>
            <param name="slot">Source slot</param>
        </member>
        <member name="T:Arbor.SlotType">
            <summary>
            Types of DataSlot
            </summary>
        </member>
        <member name="F:Arbor.SlotType.Input">
            <summary>
            Input slot
            </summary>
        </member>
        <member name="F:Arbor.SlotType.Output">
            <summary>
            Output slot
            </summary>
        </member>
        <member name="F:Arbor.SlotType.Reroute">
            <summary>
            Reroute slot
            </summary>
        </member>
        <member name="T:Arbor.HideSlotFields">
            <summary>
            Attribute to hide additional fields of DataSlot
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.OutputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.OutputSlotUnityObject"/></description></item>
            <item><description><see cref="T:Arbor.OutputSlotTypable"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotTypable"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Arbor.ValueFlow.ListMediator">
            <summary>
            A class that mediates access between the IList instance and IValueSetter and IValueGetter.
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.GetElement(System.Collections.IList,System.Int32,Arbor.ValueFlow.IValueSetter)">
            <summary>
            Set the value of the element to IValueSetter.
            </summary>
            <param name="instance">IList instance</param>
            <param name="index">Element index</param>
            <param name="container">Setting destination IValueSetter</param>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.GetElementString(System.Collections.IList,System.Int32)">
            <summary>
            Gets the string of element values.
            </summary>
            <param name="instance">IList instance</param>
            <param name="index">Element index</param>
            <returns>Value converted string</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.Contains(System.Collections.IList,Arbor.ValueFlow.IValueGetter)">
            <summary>
            Check if the value retrieved from IValueGetter is contained in the IList.
            </summary>
            <param name="instance">IList instance</param>
            <param name="container">IValueGetter to get the value</param>
            <returns>Returns true if it contains a value.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.IndexOf(System.Collections.IList,Arbor.ValueFlow.IValueGetter)">
            <summary>
            Find the index where the value obtained from IValueGetter is located.
            </summary>
            <param name="instance">IList instance</param>
            <param name="container">IValueGetter to get a value.</param>
            <returns>Index found. If not found, -1 is returned.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.LastIndexOf(System.Collections.IList,Arbor.ValueFlow.IValueGetter)">
            <summary>
            Find the index with the value retrieved from IValueGetter from the end of the list.
            </summary>
            <param name="instance">IList instance</param>
            <param name="container">IValueGetter to get a value.</param>
            <returns>Index found. If not found, -1 is returned.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.NewArray(System.Int32)">
            <summary>
            Create a array instance.
            </summary>
            <param name="count">Element count</param>
            <returns>Array instance</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.NewList">
            <summary>
            Create a List instance.
            </summary>
            <returns>List instance</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.ToList(System.Collections.IList)">
            <summary>
            Convert to List{T}.
            </summary>
            <param name="instance">IList instance</param>
            <returns>Return the result of the conversion.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.ToArray(System.Collections.IList)">
            <summary>
            Convert to array.
            </summary>
            <param name="instance">IList instance</param>
            <returns>Return the result of the conversion.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.RemoveAtIndex(System.Collections.IList,System.Int32,Arbor.ListInstanceType)">
            <summary>
            Remove an element.
            </summary>
            <param name="instance">IList instance</param>
            <param name="index">Index</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.Clear(System.Collections.IList,Arbor.ListInstanceType)">
            <summary>
            Remove all elements.
            </summary>
            <param name="instance">IList instance</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.EqualsList(System.Collections.IList,System.Collections.IList)">
            <summary>
            Determine if IList are equal.
            </summary>
            <param name="a">IList to judge</param>
            <param name="b">IList to judge</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.AddRange(System.Collections.IList,System.Collections.IList)">
            <summary>
            Add a range of lists.
            </summary>
            <param name="instance">IList instance</param>
            <param name="addToList">List to add</param>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.SetElement(System.Collections.IList,System.Int32,Arbor.ValueFlow.IValueGetter,Arbor.ListInstanceType)">
            <summary>
            Set the container.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="index">Index</param>
            <param name="valueContainer">The container to set</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.AddElement(System.Collections.IList,Arbor.ValueFlow.IValueGetter,Arbor.ListInstanceType)">
            <summary>
            Add an container.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="container">The container to add</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.InsertElement(System.Collections.IList,System.Int32,Arbor.ValueFlow.IValueGetter,Arbor.ListInstanceType)">
            <summary>
            Insert an container.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="index">Index</param>
            <param name="container">The container to insert</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.RemoveElement(System.Collections.IList,Arbor.ValueFlow.IValueGetter,Arbor.ListInstanceType)">
            <summary>
            Remove an container.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="container">The container to remove</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.GetElementType(System.Collections.IList,Arbor.ValueFlow.IValueGetter)">
            <summary>
            Get the type of an element that is common to IList and IValueGetter.
            </summary>
            <param name="instance">IList instance</param>
            <param name="container">IValueGetter to get a value.</param>
            <returns>Returns the type of the common element. If it is not common, null is returned.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ListMediator.GetElementType(System.Collections.IList,Arbor.ValueFlow.IValueSetter)">
            <summary>
            Get the type of an element that is common to IList and IValueSetter.
            </summary>
            <param name="instance">IList instance</param>
            <param name="container">IValueStter to set a value.</param>
            <returns>Returns the type of the common element. If it is not common, null is returned.</returns>
        </member>
        <member name="T:Arbor.ValueFlow.ValueMediator">
            <summary>
            A class that mediates the exchange of values. It is used to avoid boxing as much as possible where the type is determined at runtime.
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.GetRegisteredTypes">
            <summary>
            Get an array of registered types.
            </summary>
            <returns>Returns an array of registered types.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.Register``1">
            <summary>
            Register ValueMediator.
            </summary>
            <typeparam name="T">The type of value you want to broker.</typeparam>
            <remarks>By specifying the ValueMediatorInitializeOnLoadMethod attribute to a method, a ValueMediator of any type can be registered at the time of initialization.</remarks>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.RegisterEnum``1">
            <summary>
            Register Enum type in ValueMediator.
            </summary>
            <typeparam name="T">The type of value you want to broker.</typeparam>
            <remarks>By specifying the ValueMediatorInitializeOnLoadMethod attribute to a method, a ValueMediator of any type can be registered at the time of initialization.</remarks>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.HasMediator(System.Type)">
            <summary>
            Check to see if you have ValueMediator in your possession.
            </summary>
            <param name="valueType">Value type</param>
            <returns>Returns true if there is a ValueMediator.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.Get(System.Type)">
            <summary>
            Gets the ValueMediator of the specified type.
            </summary>
            <param name="type">Value type</param>
            <returns>ValueMediator found; for unregistered types, returns the ValueMediator that may be boxed.</returns>
        </member>
        <member name="F:Arbor.ValueFlow.ValueMediator.valueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="F:Arbor.ValueFlow.ValueMediator.listMediator">
            <summary>
            Mediator class for lists
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.CreateContainer">
            <summary>
            Create an IValueContainer.
            </summary>
            <returns>IValueContainer created; returns the IValueContainer that may be boxed in the case of an unregistered type.</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ValueMediator.ExportParameter(Arbor.Parameter,Arbor.ValueFlow.IValueSetter)">
            <summary>
            Exports the value of the parameter.
            </summary>
            <param name="parameter">Parameter</param>
            <param name="setter">IValueSetter to receive the value of a parameter.</param>
        </member>
        <member name="T:Arbor.ValueFlow.ValueMediatorInitializeOnLoadMethod">
            <summary>
            Attribute that specifies the callback method to be called when ValueMeditor is initialized.
            </summary>
            <remarks>The method that specifies this attribute is called during the initialization of ValueMeditor, so the ValueMeditor.Register{T} method can be called at that time for registration.</remarks>
        </member>
        <member name="T:Arbor.ValueFlow.EnumContainer`1">
            <summary>
            A class that stores an Enum type value. By mediating ValueMediator and ListMediator, access that avoids boxing becomes possible.
            </summary>
            <typeparam name="T">Enum type</typeparam>
        </member>
        <member name="T:Arbor.ValueFlow.IValueContainer">
            <summary>
            Interface that defines that the value is stored.
            </summary>
        </member>
        <member name="T:Arbor.ValueFlow.IValueContainer`1">
            <summary>
            Interface that defines that the value is stored.(Generic version)
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="T:Arbor.ValueFlow.IValueGetter">
            <summary>
            Interface to indicate that the value can get
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.IValueGetter.GetValueObject">
            <summary>
            Get value
            </summary>
            <returns>Stored value</returns>
        </member>
        <member name="T:Arbor.ValueFlow.IValueGetter`1">
            <summary>
            Interface to indicate that the value can get
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="M:Arbor.ValueFlow.IValueGetter`1.GetValue">
            <summary>
            Get value
            </summary>
            <returns>Stored value</returns>
        </member>
        <member name="T:Arbor.ValueFlow.IValueSetter">
            <summary>
            Interface to indicate that the value can set
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.IValueSetter.SetValueObject(System.Object)">
            <summary>
            Set value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="T:Arbor.ValueFlow.IValueSetter`1">
            <summary>
            Interface to indicate that the value can set
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="M:Arbor.ValueFlow.IValueSetter`1.SetValue(`0)">
            <summary>
            Set value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="T:Arbor.ValueFlow.IValueTryGetter">
            <summary>
            An interface that indicates trying to get a value with a generic method
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.IValueTryGetter.TryGetValue``1(``0@)">
            <summary>
            Try to get a value of the specified type.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="value">Value Output Arguments</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="T:Arbor.ValueFlow.ValueContainerExtensions">
            <summary>
            ValueContainer extension class
            </summary>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainerExtensions.TryGetValue``1(Arbor.ValueFlow.IValueGetter,``0@)">
            <summary>
            Try to get a value of the specified type.
            </summary>
            <typeparam name="T">Value type</typeparam>
            <param name="container">IValueGetter where the value is stored</param>
            <param name="value">Value Output Arguments</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="T:Arbor.ValueFlow.ValueContainer`1">
            <summary>
            A class that stores values, which can be accessed without boxing by using ValueMediator or ListMediator as intermediaries.
            </summary>
            <typeparam name="T">Value type</typeparam>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainer`1.GetValue">
            <summary>
            Get value
            </summary>
            <returns>Stored value</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainer`1.GetValueObject">
            <summary>
            Get value
            </summary>
            <returns>Stored value</returns>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainer`1.SetValue(`0)">
            <summary>
            Set value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainer`1.SetValueObject(System.Object)">
            <summary>
            Set value
            </summary>
            <param name="value">Value to set</param>
        </member>
        <member name="M:Arbor.ValueFlow.ValueContainer`1.ToString">
            <summary>
            Convert a value to a string.
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="T:Arbor.DebugInfiniteLoopSettings">
            <summary>
            Debug setting of infinite loop
            </summary>
        </member>
        <member name="F:Arbor.DebugInfiniteLoopSettings.maxLoopCount">
            <summary>
            Maximum loop count
            </summary>
        </member>
        <member name="F:Arbor.DebugInfiniteLoopSettings.enableLogging">
            <summary>
            Enable logging. Log output when the loop count is over maxLoopCount.
            </summary>
        </member>
        <member name="F:Arbor.DebugInfiniteLoopSettings.enableBreak">
            <summary>
            Enable Break. Debug.Break when the loop count is over maxLoopCount.
            </summary>
        </member>
        <member name="T:Arbor.DynamicReflection.DynamicField">
            <summary>
            A class that accesses Field directly.
            </summary>
            <remarks>In AOT and IL2CPP environments, it is access by Reflection.</remarks>
        </member>
        <member name="P:Arbor.DynamicReflection.DynamicField.fieldInfo">
            <summary>
            Referencing FieldInfo
            </summary>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicField.GetValue(System.Object)">
            <summary>
            Returns the value of the field.
            </summary>
            <param name="instance">An instance that has a field</param>
            <returns>Field value</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicField.SetValue(System.Object,System.Object)">
            <summary>
            Set the value of the field.
            </summary>
            <param name="instance">An instance that has a field</param>
            <param name="value">Field value</param>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicField.GetField(System.Reflection.FieldInfo)">
            <summary>
            Returns DynamicField.
            </summary>
            <param name="fieldInfo">Reference FieldInfo</param>
            <returns>DynamicField referencing the specified FieldInfo</returns>
        </member>
        <member name="T:Arbor.DynamicReflection.DynamicMethod">
            <summary>
            A class that accesses Method directly.
            </summary>
            <remarks>In AOT and IL2CPP environments, it is access by Reflection.</remarks>
        </member>
        <member name="P:Arbor.DynamicReflection.DynamicMethod.methodInfo">
            <summary>
            Referencing MethodInfo
            </summary>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicMethod.Invoke(System.Object,System.Object[])">
            <summary>
            Call method
            </summary>
            <param name="instance">An instance that has a method</param>
            <param name="arguments">Argument list</param>
            <returns>Method return value</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicMethod.GetMethod(System.Reflection.MethodInfo)">
            <summary>
            Returns DynamicMethod.
            </summary>
            <param name="methodInfo">Reference MethodInfo</param>
            <returns>DynamicMethod referencing the specified MethodInfo</returns>
        </member>
        <member name="T:Arbor.DynamicReflection.DynamicUtility">
            <summary>
            Dynamic type utility class
            </summary>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicUtility.TryCast(System.Object,System.Type,System.Object@)">
            <summary>
            Cast the object.
            </summary>
            <param name="obj">The object to cast</param>
            <param name="type">Casting type</param>
            <param name="result">Casted value</param>
            <returns>Returns true if the cast is successful.</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicUtility.Cast(System.Object,System.Type,Arbor.DynamicReflection.ExceptionMode)">
            <summary>
            Cast the object.
            </summary>
            <param name="obj">The object to cast</param>
            <param name="type">Casting type</param>
            <param name="exceptionMode">Exception mode<br />If other than Throw, return default when an exception occurs.</param>
            <returns>Casted value</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicUtility.Cast(System.Object,System.Type,System.Boolean)">
            <summary>
            Cast the object.
            </summary>
            <param name="obj">The object to cast</param>
            <param name="type">Casting type</param>
            <param name="ignoreThrowException">Flag to ignore exceptions.<br />If set to true, it will output an exception message to the log and return default when an exception occurs.</param>
            <returns>Casted value</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicUtility.GetDefault(System.Type)">
            <summary>
            Returns the default value of type.
            </summary>
            <param name="type">Default value type</param>
            <returns>Default value</returns>
        </member>
        <member name="M:Arbor.DynamicReflection.DynamicUtility.Rebox(System.Object)">
            <summary>
            Rebox object and copy the value.
            </summary>
            <param name="obj">object</param>
            <returns>Reboxed object</returns>
            <remarks>If it is not a value type, it is not copied.</remarks>
        </member>
        <member name="T:Arbor.DynamicReflection.ExceptionMode">
            <summary>
            Specify what to do with the exception that occurred
            </summary>
        </member>
        <member name="F:Arbor.DynamicReflection.ExceptionMode.Throw">
            <summary>
            Throw the exception that occurred again
            </summary>
        </member>
        <member name="F:Arbor.DynamicReflection.ExceptionMode.Log">
            <summary>
            Only output a log of the exception that occurred
            </summary>
        </member>
        <member name="F:Arbor.DynamicReflection.ExceptionMode.Ignore">
            <summary>
            Ignore the exception that occurred
            </summary>
        </member>
        <member name="T:Arbor.EachField`1">
            <summary>
            Find each serializable field
            </summary>
            <typeparam name="T">Type to find</typeparam>
        </member>
        <member name="T:Arbor.EachField`1.OnFind">
            <summary>
            Callback when found.
            </summary>
            <param name="value">find value</param>
        </member>
        <member name="T:Arbor.EachField`1.OnFindEx">
            <summary>
            Callback when found.
            </summary>
            <param name="value">find value</param>
            <param name="fieldInfo">FieldInfo of Value</param>
        </member>
        <member name="T:Arbor.EachField`1.IFindReceiver">
            <summary>
            Interface to receive the found value
            </summary>
        </member>
        <member name="M:Arbor.EachField`1.IFindReceiver.OnFind(`0,System.Reflection.FieldInfo)">
            <summary>
            Callback when found.
            </summary>
            <param name="value">find value</param>
            <param name="fieldInfo">FieldInfo of Value</param>
        </member>
        <member name="M:Arbor.EachField`1.GetFields(System.Type)">
            <summary>
            Get Fields
            </summary>
            <param name="type">Object type</param>
            <returns>Field enumerator</returns>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.OnFind)">
            <summary>
            Find the field.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="onFind">Callback If you find</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.OnFind,System.Boolean)">
            <summary>
            Find the field.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="onFind">Callback If you find</param>
            <param name="ignoreRoot">Flags that exclude rootObj</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.OnFindEx)">
            <summary>
            Find the field.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="onFind">Callback If you find</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.OnFindEx,System.Boolean)">
            <summary>
            Find the field.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="onFind">Callback If you find</param>
            <param name="ignoreRoot">Flags that exclude rootObj</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type)">
            <summary>
            Find the field and return it as a List.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <returns>List of values found</returns>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,System.Boolean)">
            <summary>
            Find the field and return it as a List.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="ignoreRoot">Flags that exclude rootObj</param>
            <returns>List of values found</returns>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,System.Collections.Generic.List{`0})">
            <summary>
            Find the field and add it to the List.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="list">List to store</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,System.Collections.Generic.List{`0},System.Boolean)">
            <summary>
            Find the field and add it to the List.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="list">List to store</param>
            <param name="ignoreRoot">Flags that exclude rootObj</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.IFindReceiver)">
            <summary>
            Find the field and call OnFind of IFindReceiver.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="receiver">Receiver</param>
        </member>
        <member name="M:Arbor.EachField`1.Find(System.Object,System.Type,Arbor.EachField{`0}.IFindReceiver,System.Boolean)">
            <summary>
            Find the field and call OnFind of IFindReceiver.
            </summary>
            <param name="rootObj">Object</param>
            <param name="type">Type of object</param>
            <param name="receiver">Receiver</param>
            <param name="ignoreRoot">Flags that exclude rootObj</param>
        </member>
        <member name="M:Arbor.EachField`1.ClearCache">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="T:Arbor.EnumFieldUtility">
            <summary>
            Utility class of FlexibleEnumAny or enum type Parameter
            </summary>
        </member>
        <member name="M:Arbor.EnumFieldUtility.IsEnum(System.Type)">
            <summary>
            Enum type check
            </summary>
            <param name="enumType">enum type</param>
            <returns>Return true if it is an enum type</returns>
        </member>
        <member name="M:Arbor.EnumFieldUtility.IsEnumFlags(System.Type)">
            <summary>
            Enum type check with System.FlagsAttribute
            </summary>
            <param name="enumType">enum type</param>
            <returns>Returns true if it is an enum type with System.FlagsAttribute.</returns>
        </member>
        <member name="M:Arbor.EnumFieldUtility.ToEnum(System.Type,System.Int32)">
            <summary>
            Convert int type to enum type.
            </summary>
            <param name="enumType">Converted enum type</param>
            <param name="value">Int type value you want to convert</param>
            <returns>Converted enum type value. If conversion is not possible, null is returned.</returns>
        </member>
        <member name="M:Arbor.EnumFieldUtility.ToInt(System.Enum)">
            <summary>
            Convert enum type to int type.
            </summary>
            <param name="value">Enum type value you want to convert</param>
            <returns>Converted int type value</returns>
        </member>
        <member name="M:Arbor.EnumFieldUtility.ToEnum``1(System.Int32)">
            <summary>
            Convert int type to enum type.
            </summary>
            <typeparam name="T">Converted enum type</typeparam>
            <param name="value">Int type value you want to convert</param>
            <returns>Converted enum type value.</returns>
        </member>
        <member name="M:Arbor.EnumFieldUtility.ToInt``1(``0)">
            <summary>
            Convert enum type to int type.
            </summary>
            <typeparam name="T">Enum type to convert</typeparam>
            <param name="value">Enum type value you want to convert</param>
            <returns>Converted int type value</returns>
        </member>
        <member name="T:Arbor.EulerAnglesAttribute">
            <summary>
            Attribute to edit Quaternion at Euler angles.
            </summary>
        </member>
        <member name="T:Arbor.Events.ArborEvent">
            <summary>
            Persistent callbacks that can also set arguments in ArborEditor
            </summary>
        </member>
        <member name="P:Arbor.Events.ArborEvent.warningMessage">
            <summary>
            Returns a message if there is a warning on the method call.
            </summary>
        </member>
        <member name="M:Arbor.Events.ArborEvent.Invoke">
            <summary>
            Calling methods
            </summary>
        </member>
        <member name="T:Arbor.Events.ArborEventUtility">
            <summary>
            ArborEvent utility class
            </summary>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetMethodName(System.Reflection.MethodInfo)">
            <summary>
            Returns the method name.
            </summary>
            <param name="methodInfo">MethodInfo that returns method name</param>
            <returns>Method name</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetFieldName(System.Reflection.FieldInfo)">
            <summary>
            Returns the field name.
            </summary>
            <param name="fieldInfo">FieldInfo that returns field name</param>
            <returns>Field name</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetPropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Returns the property name.
            </summary>
            <param name="propertyInfo">PropertyInfo that returns property name</param>
            <returns>Property name</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetMemberName(System.Reflection.MemberInfo)">
            <summary>
            Returns the member name.
            </summary>
            <param name="memberInfo">MemberInfo that returns member name</param>
            <returns>Member name</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsStatic(System.Reflection.MemberInfo)">
            <summary>
            Returns whether it is a static member.
            </summary>
            <param name="memberInfo">MemberInfo</param>
            <returns>Returns true if it is a static member.</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetParameterType(System.Type,System.Boolean)">
            <summary>
            Returns the type of parameter.
            </summary>
            <param name="type">Type</param>
            <param name="unknownToSlot">Flag to slot for unknown type</param>
            <returns>Type of parameter</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsSelectableMethod(System.Reflection.MethodInfo)">
            <summary>
            It is judged whether it is a selectable method.
            </summary>
            <param name="methodInfo">MethodInfo to determine</param>
            <returns>Returns true if it is selectable</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsSelectableField(System.Reflection.FieldInfo)">
            <summary>
            It is judged whether it is a selectable field.
            </summary>
            <param name="fieldInfo">FieldInfo to determine</param>
            <returns>Returns true if it is selectable</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsGetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Returns whether there is a get accessor.
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <returns>Returns true if there is a get accessor.</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsSetProperty(System.Reflection.PropertyInfo)">
            <summary>
            Returns whether there is a set accessor.
            </summary>
            <param name="propertyInfo">PropertyInfo</param>
            <returns>Returns true if there is a set accessor.</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.IsSelectableProperty(System.Reflection.PropertyInfo)">
            <summary>
            It is judged whether it is a selectable property.
            </summary>
            <param name="propertyInfo">PropertyInfo to determine</param>
            <returns>Returns true if it is selectable</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.Cast(System.Object,System.Type)">
            <summary>
            Cast the object.
            </summary>
            <param name="obj">The object to cast</param>
            <param name="type">Casting type</param>
            <returns>Casted value</returns>
        </member>
        <member name="M:Arbor.Events.ArborEventUtility.GetDefault(System.Type)">
            <summary>
            Returns the default value of type.
            </summary>
            <param name="type">Default value type</param>
            <returns>Default value</returns>
        </member>
        <member name="T:Arbor.Events.ArgumentAttributes">
            <summary>
            Attribute flag of argument
            </summary>
        </member>
        <member name="F:Arbor.Events.ArgumentAttributes.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Arbor.Events.ArgumentAttributes.Out">
            <summary>
            Output
            </summary>
        </member>
        <member name="T:Arbor.Events.HideEventAttribute">
            <summary>
            Attribute that hides the method in the selection popup of ArborEvent.
            </summary>
        </member>
        <member name="T:Arbor.Events.MemberType">
            <summary>
            Member type
            </summary>
        </member>
        <member name="F:Arbor.Events.MemberType.Method">
            <summary>
            Method
            </summary>
        </member>
        <member name="F:Arbor.Events.MemberType.Field">
            <summary>
            Field
            </summary>
        </member>
        <member name="F:Arbor.Events.MemberType.Property">
            <summary>
            Property
            </summary>
        </member>
        <member name="T:Arbor.Events.ParameterList">
            <summary>
            Parameter list that supports data flow.
            </summary>
        </member>
        <member name="M:Arbor.Events.ParameterList.AddElement(System.Type,Arbor.InputSlotBase)">
            <summary>
            Add an element.
            </summary>
            <param name="valueType">Value type</param>
            <param name="slot">Input slot to set</param>
            <returns>Type of parameter added</returns>
        </member>
        <member name="M:Arbor.Events.ParameterList.SetOverrideConstraint(Arbor.Events.ParameterType,System.Type)">
            <summary>
            Override type constraints on all elements of the specified parameterType
            </summary>
            <param name="parameterType">Parameter type</param>
            <param name="type">Constraint type</param>
        </member>
        <member name="M:Arbor.Events.ParameterList.GetParameterList(Arbor.Events.ParameterType)">
            <summary>
            Get a list of parameters.
            </summary>
            <param name="parameterType">Parameter type</param>
            <returns>List of parameters</returns>
        </member>
        <member name="T:Arbor.Events.ParameterType">
            <summary>
            Types of argument types available for ArborEvent
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Int">
            <summary>
            int type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Long">
            <summary>
            long type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Float">
            <summary>
            float type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Bool">
            <summary>
            bool type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.String">
            <summary>
            string type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Vector2">
            <summary>
            Vector2 type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Vector3">
            <summary>
            Vector3 type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Quaternion">
            <summary>
            Quaternion type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Rect">
            <summary>
            Rect type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Bounds">
            <summary>
            Bounds type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Color">
            <summary>
            Color type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.GameObject">
            <summary>
            GameObject type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Component">
            <summary>
            Component type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Enum">
            <summary>
            enum type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.AssetObject">
            <summary>
            AssetObject type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Vector4">
            <summary>
            Vector4 type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Vector2Int">
            <summary>
            Vector2Int type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Vector3Int">
            <summary>
            Vector3Int type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.RectInt">
            <summary>
            RectInt type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.BoundsInt">
            <summary>
            BoundsInt type
            </summary>
        </member>
        <member name="F:Arbor.Events.ParameterType.Slot">
            <summary>
            Data slot
            </summary>
            <remarks>Used when the ArborEventUtility.GetParameterType method returns Unknown.</remarks>
        </member>
        <member name="F:Arbor.Events.ParameterType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:Arbor.Events.PersistentCall">
            <summary>
            A class that makes persistent member calls by Reflection.
            Since it is for Arbor internal processing, if you want to call a member, use the built-in behavior such as ArborEvent class and InvokeMethod.
            </summary>
        </member>
        <member name="P:Arbor.Events.PersistentCall.targetType">
            <summary>
            Target type
            </summary>
        </member>
        <member name="P:Arbor.Events.PersistentCall.targetInstance">
            <summary>
            Target instance
            </summary>
        </member>
        <member name="P:Arbor.Events.PersistentCall.componentType">
            <summary>
            Component type
            </summary>
        </member>
        <member name="M:Arbor.Events.PersistentCall.#ctor">
            <summary>
            CalculatorConditionLegacy constructor
            </summary>
        </member>
        <member name="M:Arbor.Events.PersistentCall.Invoke">
            <summary>
            Invoke member.
            </summary>
        </member>
        <member name="M:Arbor.Events.PersistentCall.GetWarningMessage">
            <summary>
            Get the warning message.
            </summary>
            <returns>Returns the warning message.</returns>
        </member>
        <member name="T:Arbor.Events.PersistentGetValue">
            <summary>
            A class to get the value of a persistent member by Reflection.
            Since it is for Arbor internal processing, if you want to get the member value, use the built-in behavior such as GetValueCalculator.
            </summary>
        </member>
        <member name="P:Arbor.Events.PersistentGetValue.targetType">
            <summary>
            Target type
            </summary>
        </member>
        <member name="P:Arbor.Events.PersistentGetValue.targetInstance">
            <summary>
            Target instance
            </summary>
        </member>
        <member name="M:Arbor.Events.PersistentGetValue.Invoke">
            <summary>
            Invoke member.
            </summary>
        </member>
        <member name="M:Arbor.Events.PersistentGetValue.GetWarningMessage">
            <summary>
            Get the warning message.
            </summary>
            <returns>Returns the warning message.</returns>
        </member>
        <member name="T:Arbor.Events.ShowEventAttribute">
            <summary>
            Attributes to be displayed in selection popup even argument methods that can not be used for ArborEvent
            </summary>
            <remarks>See <see cref="T:Arbor.Events.ParameterType" /> for available argument types.</remarks>
        </member>
        <member name="T:Arbor.Events.TargetMode">
            <summary>
            Specify target instance
            </summary>
        </member>
        <member name="F:Arbor.Events.TargetMode.Component">
            <summary>
            Component
            </summary>
        </member>
        <member name="F:Arbor.Events.TargetMode.GameObject">
            <summary>
            GameObject
            </summary>
        </member>
        <member name="F:Arbor.Events.TargetMode.AssetObject">
            <summary>
            Object other than Component and GameObject
            </summary>
        </member>
        <member name="F:Arbor.Events.TargetMode.Slot">
            <summary>
            Input slot
            </summary>
        </member>
        <member name="F:Arbor.Events.TargetMode.Static">
            <summary>
            Static class
            </summary>
        </member>
        <member name="T:Arbor.ExecuteMethodFlags">
            <summary>
            Flag to set the method to be executed
            </summary>
        </member>
        <member name="F:Arbor.ExecuteMethodFlags.Enter">
            <summary>
            Execute with the method entered in the node.
            </summary>
        </member>
        <member name="F:Arbor.ExecuteMethodFlags.Update">
            <summary>
            Execute with node update method.
            </summary>
        </member>
        <member name="F:Arbor.ExecuteMethodFlags.LateUpdate">
            <summary>
            Execute at LateUpdate.
            </summary>
        </member>
        <member name="F:Arbor.ExecuteMethodFlags.Leave">
            <summary>
            Execute when leaving a node.
            </summary>
        </member>
        <member name="F:Arbor.ExecuteMethodFlags.FixedUpdate">
            <summary>
            Execute with FixedUpdate method.
            </summary>
        </member>
        <member name="T:Arbor.Extensions.BoundsIntExtensions">
            <summary>
            BoundsInt extension class
            </summary>
        </member>
        <member name="P:Arbor.Extensions.BoundsIntExtensions.zero">
            <summary>
            Returns BoundsInt (0, 0, 0, 0, 0, 0).
            </summary>
        </member>
        <member name="M:Arbor.Extensions.BoundsIntExtensions.ToString(UnityEngine.BoundsInt,System.String)">
            <summary>
            Convert BoundsInt to a string.
            </summary>
            <param name="boundsInt">BoundsInt to convert to a string</param>
            <param name="format">Format</param>
            <returns>Converted string.</returns>
        </member>
        <member name="T:Arbor.Extensions.GameObjectExtensions">
            <summary>
            GameObject extension class
            </summary>
        </member>
        <member name="M:Arbor.Extensions.GameObjectExtensions.GetComponentsTemp``1(UnityEngine.GameObject)">
            <summary>
            Get a List of components. Since the acquired List instance is shared, it can be used only temporarily.
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="gameObject">GameObject</param>
            <returns>List of components</returns>
        </member>
        <member name="M:Arbor.Extensions.GameObjectExtensions.GetComponentsTemp``1(UnityEngine.Component)">
            <summary>
            Get a List of components. Since the acquired List instance is shared, it can be used only temporarily.
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="component">Component</param>
            <returns>List of components</returns>
        </member>
        <member name="M:Arbor.Extensions.GameObjectExtensions.GetComponentsInChildrenTemp``1(UnityEngine.GameObject)">
            <summary>
            Get a List of components, including the components of the child GameObject. Since the acquired List instance is shared, it can be used only temporarily.
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="gameObject">GameObject</param>
            <returns>List of components</returns>
        </member>
        <member name="M:Arbor.Extensions.GameObjectExtensions.GetComponentsInChildrenTemp``1(UnityEngine.Component)">
            <summary>
            Get a List of components, including the components of the child GameObject. Since the acquired List instance is shared, it can be used only temporarily.
            </summary>
            <typeparam name="T">Component type</typeparam>
            <param name="component">Component</param>
            <returns>List of components</returns>
        </member>
        <member name="T:Arbor.Extensions.RectIntExtensions">
            <summary>
            RectInt extension class
            </summary>
        </member>
        <member name="P:Arbor.Extensions.RectIntExtensions.zero">
            <summary>
            Returns RectInt (0, 0, 0, 0).
            </summary>
        </member>
        <member name="M:Arbor.Extensions.RectIntExtensions.ToString(UnityEngine.RectInt,System.String)">
            <summary>
            Convert RectInt to a string.
            </summary>
            <param name="rectInt">RectInt to convert</param>
            <param name="format">Format</param>
            <returns>Converted string.</returns>
        </member>
        <member name="T:Arbor.Extensions.Vector2IntExtensions">
            <summary>
            Vector2Int extension class
            </summary>
        </member>
        <member name="M:Arbor.Extensions.Vector2IntExtensions.Div(UnityEngine.Vector2Int,System.Int32)">
            <summary>
            Divide Vector2Int by an integer.
            </summary>
            <param name="v">Vector2Int of the divisor</param>
            <param name="i">Integer for the divisor</param>
            <returns>Returns the divided Vector2Int.</returns>
        </member>
        <member name="M:Arbor.Extensions.Vector2IntExtensions.Negative(UnityEngine.Vector2Int)">
            <summary>
            Invert the sign of each component of Vector2Int.
            </summary>
            <param name="v">Vector2Int to reverse the sign of each component</param>
            <returns>Returns the result of reversing the sign of each component.</returns>
        </member>
        <member name="M:Arbor.Extensions.Vector2IntExtensions.ToString(UnityEngine.Vector2Int,System.String)">
            <summary>
            Convert Vector2Int to a string.
            </summary>
            <param name="v">Vector2Int to convert</param>
            <param name="format">Format</param>
            <returns>Converted string.</returns>
        </member>
        <member name="T:Arbor.Extensions.Vector3IntExtensions">
            <summary>
            Vector3Int extension class
            </summary>
        </member>
        <member name="M:Arbor.Extensions.Vector3IntExtensions.Div(UnityEngine.Vector3Int,System.Int32)">
            <summary>
            Divide Vector3Int by an integer.
            </summary>
            <param name="v">Vector3Int of the divisor</param>
            <param name="i">Integer for the divisor</param>
            <returns>Returns the divided Vector3Int.</returns>
        </member>
        <member name="M:Arbor.Extensions.Vector3IntExtensions.Negative(UnityEngine.Vector3Int)">
            <summary>
            Invert the sign of each component of Vector3Int.
            </summary>
            <param name="v">Vector3Int to reverse the sign of each component</param>
            <returns>Returns the result of reversing the sign of each component.</returns>
        </member>
        <member name="T:Arbor.FlexibleAssetObject">
            <summary>
            Class to handle a flexible Asset Object type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleAssetObject.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="P:Arbor.FlexibleAssetObject.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleAssetObject.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.#ctor">
            <summary>
            FlexibleAssetObject default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.#ctor(UnityEngine.Object)">
            <summary>
            FlexibleAssetObject constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.#ctor(Arbor.AssetObjectParameterReference)">
            <summary>
            FlexibleAssetObject constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.#ctor(Arbor.InputSlotUnityObject)">
            <summary>
            FlexibleAssetObject constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.op_Explicit(Arbor.FlexibleAssetObject)~UnityEngine.Object">
            <summary>
            Cast FlexibleAssetObject to Object.
            </summary>
            <param name="flexible">FlexibleAssetObject</param>
            <returns>Returns the result of casting to Object.</returns>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.op_Explicit(UnityEngine.Object)~Arbor.FlexibleAssetObject">
            <summary>
            Cast Object to FlexibleAssetObject.
            </summary>
            <param name="value">Object</param>
            <returns>Returns the result of casting to FlexibleAssetObject.</returns>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleAssetObject.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.FlexibleAssetObject.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="T:Arbor.FlexibleBool">
            <summary>
            Class to handle a flexible bool type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleBool.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleBool.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBool.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleBool.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBool.#ctor">
            <summary>
            FlexibleBool default constructor.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBool.#ctor(System.Boolean)">
            <summary>
            FlexibleBool default constructor.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleBool.#ctor(Arbor.BoolParameterReference)">
            <summary>
            FlexibleBool default constructor.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleBool.#ctor(System.Single)">
            <summary>
            FlexibleBool default constructor.
            </summary>
            <param name="probability">Probability</param>
        </member>
        <member name="M:Arbor.FlexibleBool.#ctor(Arbor.InputSlotBool)">
            <summary>
            FlexibleBool default constructor.
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleBool.op_Explicit(Arbor.FlexibleBool)~System.Boolean">
            <summary>
            Cast FlexibleBool to bool.
            </summary>
            <param name="flexible">FlexibleBool</param>
            <returns>Returns the result of casting to bool.</returns>
        </member>
        <member name="M:Arbor.FlexibleBool.op_Explicit(System.Boolean)~Arbor.FlexibleBool">
            <summary>
            Cast bool to FlexibleBool.
            </summary>
            <param name="value">bool</param>
            <returns>Returns the result of casting to FlexibleBool.</returns>
        </member>
        <member name="T:Arbor.FlexibleBounds">
            <summary>
            Class to handle a flexible Bounds type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBounds.#ctor">
            <summary>
            FlexibleBounds default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBounds.#ctor(UnityEngine.Bounds)">
            <summary>
            FlexibleBounds constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleBounds.#ctor(Arbor.BoundsParameterReference)">
            <summary>
            FlexibleBounds constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleBounds.#ctor(Arbor.InputSlotBounds)">
            <summary>
            FlexibleBounds constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleBounds.op_Explicit(Arbor.FlexibleBounds)~UnityEngine.Bounds">
            <summary>
            Cast FlexibleBounds to Bounds.
            </summary>
            <param name="flexible">FlexibleBounds</param>
            <returns>Returns the result of casting to Bounds.</returns>
        </member>
        <member name="M:Arbor.FlexibleBounds.op_Explicit(UnityEngine.Bounds)~Arbor.FlexibleBounds">
            <summary>
            Cast Bounds to FlexibleBounds.
            </summary>
            <param name="value">Bounds</param>
            <returns>Returns the result of casting to FlexibleBounds.</returns>
        </member>
        <member name="T:Arbor.FlexibleBoundsInt">
            <summary>
            Class to handle a flexible BoundsInt type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.#ctor">
            <summary>
            FlexibleBoundsInt default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.#ctor(UnityEngine.BoundsInt)">
            <summary>
            FlexibleBoundsInt constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.#ctor(Arbor.BoundsIntParameterReference)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.#ctor(Arbor.InputSlotBoundsInt)">
            <summary>
            FlexibleBoundsInt constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.op_Explicit(Arbor.FlexibleBoundsInt)~UnityEngine.BoundsInt">
            <summary>
            Cast FlexibleBoundsInt to BoundsInt.
            </summary>
            <param name="flexible">FlexibleBoundsInt</param>
            <returns>Returns the result of casting to BoundsInt.</returns>
        </member>
        <member name="M:Arbor.FlexibleBoundsInt.op_Explicit(UnityEngine.BoundsInt)~Arbor.FlexibleBoundsInt">
            <summary>
            Cast BoundsInt to FlexibleBoundsInt.
            </summary>
            <param name="value">BoundsInt</param>
            <returns>Returns the result of casting to FlexibleBoundsInt.</returns>
        </member>
        <member name="T:Arbor.FlexibleColor">
            <summary>
            Class to handle a flexible Color type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleColor.#ctor">
            <summary>
            FlexibleColor default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleColor.#ctor(UnityEngine.Color)">
            <summary>
            FlexibleColor constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleColor.#ctor(Arbor.ColorParameterReference)">
            <summary>
            FlexibleColor constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleColor.#ctor(Arbor.InputSlotColor)">
            <summary>
            FlexibleColor constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleColor.op_Explicit(Arbor.FlexibleColor)~UnityEngine.Color">
            <summary>
            Cast FlexibleColor to Color.
            </summary>
            <param name="flexible">FlexibleColor</param>
            <returns>Returns the result of casting to Color.</returns>
        </member>
        <member name="M:Arbor.FlexibleColor.op_Explicit(UnityEngine.Color)~Arbor.FlexibleColor">
            <summary>
            Cast Color to FlexibleColor.
            </summary>
            <param name="value">Color</param>
            <returns>Returns the result of casting to FlexibleColor.</returns>
        </member>
        <member name="T:Arbor.FlexibleComponent">
            <summary>
            Class to handle a flexible Component type reference method there is more than one.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.FlexibleComponent.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleComponent.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="P:Arbor.FlexibleComponent.overrideConstraintType">
            <summary>
            Overriding type constraints.<br/>
            Used for GetComponent when Type is <see cref="F:Arbor.FlexibleSceneObjectType.Hierarchy"/>.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleComponent.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.FlexibleComponent.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent.#ctor">
            <summary>
            FlexibleComponent default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleComponent.#ctor(UnityEngine.Component)">
            <summary>
            FlexibleComponent constructor
            </summary>
            <param name="component">Component</param>
        </member>
        <member name="M:Arbor.FlexibleComponent.#ctor(Arbor.ComponentParameterReference)">
            <summary>
            FlexibleComponent constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleComponent.#ctor(Arbor.InputSlotComponent)">
            <summary>
            FlexibleComponent constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleComponent.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleComponent constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleComponent.op_Explicit(Arbor.FlexibleComponent)~UnityEngine.Component">
            <summary>
            Cast FlexibleColor to Component.
            </summary>
            <param name="flexible">FlexibleComponent</param>
            <returns>Returns the result of casting to Component.</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent.op_Explicit(UnityEngine.Component)~Arbor.FlexibleComponent">
            <summary>
            Cast Component to FlexibleComponent.
            </summary>
            <param name="value">Component</param>
            <returns>Returns the result of casting to FlexibleComponent.</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleComponent.GetConstantObject">
            <summary>
            Returns an Object of FlexibleSceneObjectType.Constant.
            </summary>
            <returns>Object value at Constant</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent.OnAssignedField">
            <summary>
            Called when assigned to a field under NodeBehaviour.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleComponentBase">
            <summary>
            Base class for <see cref="T:Arbor.FlexibleComponent`1"/>.<br/>
            Defined for bridging to PropertyDrawer.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleComponent`1">
            <summary>
            Class to handle a flexible Component type reference method there is more than one(Generic).
            </summary>
            <typeparam name="T">Specify Component Type</typeparam>
        </member>
        <member name="F:Arbor.FlexibleComponent`1._Value">
            <summary>
            Constant value
            </summary>
        </member>
        <member name="F:Arbor.FlexibleComponent`1._Parameter">
            <summary>
            Parameter reference
            </summary>
        </member>
        <member name="F:Arbor.FlexibleComponent`1._Slot">
            <summary>
            Data input slot
            </summary>
        </member>
        <member name="P:Arbor.FlexibleComponent`1.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleComponent`1.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.#ctor">
            <summary>
            <see cref="T:Arbor.FlexibleComponent`1"/> default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.#ctor(`0)">
            <summary>
            <see cref="T:Arbor.FlexibleComponent`1"/> constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.#ctor(Arbor.ComponentParameterReference)">
            <summary>
            <see cref="T:Arbor.FlexibleComponent`1"/> constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            <see cref="T:Arbor.FlexibleComponent`1"/> constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.#ctor(Arbor.InputSlotComponent)">
            <summary>
            <see cref="T:Arbor.FlexibleComponent`1"/> constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.op_Explicit(Arbor.FlexibleComponent{`0})~`0">
            <summary>
            Cast <see cref="T:Arbor.FlexibleComponent`1"/> to T.
            </summary>
            <param name="flexible"><see cref="T:Arbor.FlexibleComponent`1"/></param>
            <returns>Returns the result of casting to T.</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.op_Explicit(`0)~Arbor.FlexibleComponent{`0}">
            <summary>
            Cast T to <see cref="T:Arbor.FlexibleComponent`1"/>.
            </summary>
            <param name="value">T</param>
            <returns>Returns the result of casting to FlexibleComponent&lt;T&gt;.</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.GetConstantObject">
            <summary>
            Returns an Object of FlexibleSceneObjectType.Constant.
            </summary>
            <returns>Object value at Constant</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.ToFlexibleComponent">
            <summary>
            Convert to FlexibleComponent and return it.
            </summary>
            <returns>FlexibleComponent</returns>
        </member>
        <member name="M:Arbor.FlexibleComponent`1.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleEnumAny">
            <summary>
            Class to handle a flexible enum type reference method there is more than one.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.FlexibleEnumAny.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="P:Arbor.FlexibleEnumAny.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleEnumAny.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="P:Arbor.FlexibleEnumAny.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.#ctor">
            <summary>
            FlexibleEnumAny default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.#ctor(System.Int32)">
            <summary>
            FlexibleEnumAny constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.#ctor(System.Enum)">
            <summary>
            FlexibleEnumAny constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleEnumAny constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleEnumAny constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.op_Explicit(Arbor.FlexibleEnumAny)~System.Int32">
            <summary>
            Cast FlexibleEnumAny to int.
            </summary>
            <param name="flexible">FlexibleEnumAny</param>
            <returns>Returns the result of casting to int.</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.op_Explicit(System.Int32)~Arbor.FlexibleEnumAny">
            <summary>
            Cast int to FlexibleEnumAny.
            </summary>
            <param name="value">int</param>
            <returns>Returns the result of casting to FlexibleEnumAny.</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.op_Explicit(System.Enum)~Arbor.FlexibleEnumAny">
            <summary>
            Cast System.Enum to FlexibleEnumAny.
            </summary>
            <param name="value">System.Enum</param>
            <returns>Returns the result of casting to FlexibleEnumAny.</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.GetEnumValue``1">
            <summary>
            Returns the enum type value.
            </summary>
            <typeparam name="TEnum">Type of enum</typeparam>
            <returns>Value of enum type</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleEnumAny.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleExecuteMethodFlags">
            <summary>
            Class to handle a flexible ExecuteMethodFlags type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.#ctor">
            <summary>
            FlexibleExecuteMethodFlags default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.#ctor(Arbor.ExecuteMethodFlags)">
            <summary>
            FlexibleExecuteMethodFlags constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleExecuteMethodFlags constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleExecuteMethodFlags constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.op_Explicit(Arbor.FlexibleExecuteMethodFlags)~Arbor.ExecuteMethodFlags">
            <summary>
            Cast FlexibleExecuteMethodFlags to ExecuteMethodFlags.
            </summary>
            <param name="flexible">FlexibleExecuteMethodFlags</param>
            <returns>Returns the result of casting to ExecuteMethodFlags.</returns>
        </member>
        <member name="M:Arbor.FlexibleExecuteMethodFlags.op_Explicit(Arbor.ExecuteMethodFlags)~Arbor.FlexibleExecuteMethodFlags">
            <summary>
            Cast ExecuteMethodFlags to FlexibleExecuteMethodFlags.
            </summary>
            <param name="value">ExecuteMethodFlags</param>
            <returns>Returns the result of casting to FlexibleExecuteMethodFlags.</returns>
        </member>
        <member name="T:Arbor.FlexibleFieldBase">
            <summary>
            A base class for dealing with flexible types with multiple reference methods.
            See <see cref="T:Arbor.FlexibleField`1"/> for use.
            </summary>
        </member>
        <member name="F:Arbor.FlexibleFieldBase._Type">
            <summary>
            Specified type of value
            </summary>
        </member>
        <member name="P:Arbor.FlexibleFieldBase.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="P:Arbor.FlexibleFieldBase.fieldType">
            <summary>
            It returns a field type.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleFieldBase.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleFieldBase.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleField`1">
            <summary>
            A base class for dealing with flexible types with multiple reference methods.
            To use it, inherit T by specifying a user-defined class.
            </summary>
            <typeparam name="T">Serializable type</typeparam>
        </member>
        <member name="F:Arbor.FlexibleField`1._Value">
            <summary>
            Constant value
            </summary>
        </member>
        <member name="F:Arbor.FlexibleField`1._Parameter">
            <summary>
            Parameter reference
            </summary>
        </member>
        <member name="F:Arbor.FlexibleField`1._Slot">
            <summary>
            Data input slot
            </summary>
        </member>
        <member name="P:Arbor.FlexibleField`1.fieldType">
            <summary>
            It returns a field type.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleField`1.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleField`1.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleField`1.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleField`1.#ctor">
            <summary>
            FlexibleField default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleField`1.#ctor(`0)">
            <summary>
            FlexibleField constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleField`1.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleField constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleField`1.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleField constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleField`1.op_Explicit(Arbor.FlexibleField{`0})~`0">
            <summary>
            Cast FlexibleField to T.
            </summary>
            <param name="flexible">FlexibleField</param>
            <returns>Returns the result of casting to T.</returns>
        </member>
        <member name="M:Arbor.FlexibleField`1.op_Explicit(`0)~Arbor.FlexibleField{`0}">
            <summary>
            Cast T to FlexibleField.
            </summary>
            <param name="value">T</param>
            <returns>Returns the result of casting to FlexibleField&lt;T&gt;.</returns>
        </member>
        <member name="M:Arbor.FlexibleField`1.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleFloat">
            <summary>
            Class to handle a flexible float type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleFloat.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleFloat.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleFloat.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleFloat.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleFloat.#ctor">
            <summary>
            FlexibleFloat default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleFloat.#ctor(System.Single)">
            <summary>
            FlexibleFloat constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleFloat.#ctor(Arbor.FloatParameterReference)">
            <summary>
            FlexibleFloat constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleFloat.#ctor(System.Single,System.Single)">
            <summary>
            FlexibleFloat constructor
            </summary>
            <param name="minRange">Minimum range.</param>
            <param name="maxRange">Maximum range.</param>
        </member>
        <member name="M:Arbor.FlexibleFloat.#ctor(Arbor.InputSlotFloat)">
            <summary>
            FlexibleFloat constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleFloat.op_Explicit(Arbor.FlexibleFloat)~System.Single">
            <summary>
            Cast FlexibleFloat to float.
            </summary>
            <param name="flexible">FlexibleFloat</param>
            <returns>Returns the result of casting to float.</returns>
        </member>
        <member name="M:Arbor.FlexibleFloat.op_Explicit(System.Single)~Arbor.FlexibleFloat">
            <summary>
            Cast float to FlexibleFloat.
            </summary>
            <param name="value">float</param>
            <returns>Returns the result of casting to FlexibleFloat.</returns>
        </member>
        <member name="T:Arbor.FlexibleForceMode">
            <summary>
            Class to handle a flexible ForceMode type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleForceMode.#ctor">
            <summary>
            FlexibleForceMode default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleForceMode.#ctor(UnityEngine.ForceMode)">
            <summary>
            FlexibleForceMode constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleForceMode constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleForceMode constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode.op_Explicit(Arbor.FlexibleForceMode)~UnityEngine.ForceMode">
            <summary>
            Cast FlexibleForceMode to ForceMode.
            </summary>
            <param name="flexible">FlexibleForceMode</param>
            <returns>Returns the result of casting to ForceMode.</returns>
        </member>
        <member name="M:Arbor.FlexibleForceMode.op_Explicit(UnityEngine.ForceMode)~Arbor.FlexibleForceMode">
            <summary>
            Cast ForceMode to FlexibleForceMode.
            </summary>
            <param name="value">ForceMode</param>
            <returns>Returns the result of casting to FlexibleForceMode.</returns>
        </member>
        <member name="T:Arbor.FlexibleForceMode2D">
            <summary>
            Class to handle a flexible ForceMode2D type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.#ctor">
            <summary>
            FlexibleForceMode2D default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.#ctor(UnityEngine.ForceMode2D)">
            <summary>
            FlexibleForceMode2D constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleForceMode2D constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleForceMode2D constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.op_Explicit(Arbor.FlexibleForceMode2D)~UnityEngine.ForceMode2D">
            <summary>
            Cast FlexibleForceMode2D to ForceMode2D.
            </summary>
            <param name="flexible">FlexibleForceMode2D</param>
            <returns>Returns the result of casting to ForceMode2D.</returns>
        </member>
        <member name="M:Arbor.FlexibleForceMode2D.op_Explicit(UnityEngine.ForceMode2D)~Arbor.FlexibleForceMode2D">
            <summary>
            Cast ForceMode2D to FlexibleForceMode2D.
            </summary>
            <param name="value">ForceMode2D</param>
            <returns>Returns the result of casting to FlexibleForceMode2D.</returns>
        </member>
        <member name="T:Arbor.FlexibleGameObject">
            <summary>
            Class to handle a flexible GameObject type reference method there is more than one.
            </summary>
        </member>
        <member name="F:Arbor.FlexibleGameObject._Value">
            <summary>
            Constant value
            </summary>
        </member>
        <member name="F:Arbor.FlexibleGameObject._Parameter">
            <summary>
            Parameter reference
            </summary>
        </member>
        <member name="F:Arbor.FlexibleGameObject._Slot">
            <summary>
            Data input slot
            </summary>
        </member>
        <member name="P:Arbor.FlexibleGameObject.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleGameObject.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleGameObject.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleGameObject.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleGameObject.GetConstantObject">
            <summary>
            Returns an Object of FlexibleSceneObjectType.Constant.
            </summary>
            <returns>Object value at Constant</returns>
        </member>
        <member name="M:Arbor.FlexibleGameObject.#ctor">
            <summary>
            FlexibleGameObject default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleGameObject.#ctor(UnityEngine.GameObject)">
            <summary>
            FlexibleGameObject constructor.
            </summary>
            <param name="gameObject">GameObject</param>
        </member>
        <member name="M:Arbor.FlexibleGameObject.#ctor(Arbor.GameObjectParameterReference)">
            <summary>
            FlexibleGameObject constructor.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleGameObject.#ctor(Arbor.InputSlotGameObject)">
            <summary>
            FlexibleGameObject constructor.
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleGameObject.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleGameObject constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleGameObject.op_Explicit(Arbor.FlexibleGameObject)~UnityEngine.GameObject">
            <summary>
            Cast FlexibleGameObject to GameObject.
            </summary>
            <param name="flexible">FlexibleGameObject</param>
            <returns>Returns the result of casting to GameObject.</returns>
        </member>
        <member name="M:Arbor.FlexibleGameObject.op_Explicit(UnityEngine.GameObject)~Arbor.FlexibleGameObject">
            <summary>
            Cast GameObject to FlexibleGameObject.
            </summary>
            <param name="value">GameObject</param>
            <returns>Returns the result of casting to FlexibleGameObject.</returns>
        </member>
        <member name="T:Arbor.FlexibleHierarchyType">
            <summary>
            Type referenced from Hierarchy
            </summary>
        </member>
        <member name="F:Arbor.FlexibleHierarchyType.Self">
            <summary>
            Own object
            </summary>
        </member>
        <member name="F:Arbor.FlexibleHierarchyType.RootGraph">
            <summary>
            Root graph object
            </summary>
        </member>
        <member name="F:Arbor.FlexibleHierarchyType.ParentGraph">
            <summary>
            Parent graph object
            </summary>
        </member>
        <member name="T:Arbor.FlexibleInt">
            <summary>
            Class to handle a flexible int type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleInt.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleInt.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="P:Arbor.FlexibleInt.slot">
            <summary>
            It returns a slot
            </summary>
        </member>
        <member name="M:Arbor.FlexibleInt.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleInt.#ctor">
            <summary>
            FlexibleInt default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleInt.#ctor(System.Int32)">
            <summary>
            FlexibleInt constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleInt.#ctor(Arbor.IntParameterReference)">
            <summary>
            FlexibleInt constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleInt.#ctor(System.Int32,System.Int32)">
            <summary>
            FlexibleInt constructor
            </summary>
            <param name="minRange">Minimum range.</param>
            <param name="maxRange">Maximum range.</param>
        </member>
        <member name="M:Arbor.FlexibleInt.#ctor(Arbor.InputSlotInt)">
            <summary>
            FlexibleInt constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleInt.op_Explicit(Arbor.FlexibleInt)~System.Int32">
            <summary>
            Cast FlexibleInt to int.
            </summary>
            <param name="flexible">FlexibleInt</param>
            <returns>Returns the result of casting to int.</returns>
        </member>
        <member name="M:Arbor.FlexibleInt.op_Explicit(System.Int32)~Arbor.FlexibleInt">
            <summary>
            Cast int to FlexibleInt.
            </summary>
            <param name="value">int</param>
            <returns>Returns the result of casting to FlexibleInt.</returns>
        </member>
        <member name="M:Arbor.FlexibleInt.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleKeyCode">
            <summary>
            Class to handle a flexible KeyCode type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.#ctor">
            <summary>
            FlexibleKeyCode default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.#ctor(UnityEngine.KeyCode)">
            <summary>
            FlexibleKeyCode constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleKeyCode constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleKeyCode constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.op_Explicit(Arbor.FlexibleKeyCode)~UnityEngine.KeyCode">
            <summary>
            Cast FlexibleKeyCode to KeyCode.
            </summary>
            <param name="flexible">FlexibleKeyCode</param>
            <returns>Returns the result of casting to KeyCode.</returns>
        </member>
        <member name="M:Arbor.FlexibleKeyCode.op_Explicit(UnityEngine.KeyCode)~Arbor.FlexibleKeyCode">
            <summary>
            Cast KeyCode to FlexibleKeyCode.
            </summary>
            <param name="value">KeyCode</param>
            <returns>Returns the result of casting to FlexibleKeyCode.</returns>
        </member>
        <member name="T:Arbor.FlexibleLayerMask">
            <summary>
            Class to handle a flexible LayerMask type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.#ctor">
            <summary>
            FlexibleLayerMask default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.#ctor(UnityEngine.LayerMask)">
            <summary>
            FlexibleLayerMask constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleLayerMask constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleLayerMask constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.op_Explicit(Arbor.FlexibleLayerMask)~UnityEngine.LayerMask">
            <summary>
            Cast FlexibleLayerMask to LayerMask.
            </summary>
            <param name="flexible">FlexibleLayerMask</param>
            <returns>Returns the result of casting to LayerMask.</returns>
        </member>
        <member name="M:Arbor.FlexibleLayerMask.op_Explicit(UnityEngine.LayerMask)~Arbor.FlexibleLayerMask">
            <summary>
            Cast LayerMask to FlexibleLayerMask.
            </summary>
            <param name="value">LayerMask</param>
            <returns>Returns the result of casting to FlexibleLayerMask.</returns>
        </member>
        <member name="T:Arbor.FlexibleLoadSceneMode">
            <summary>
            Class to handle a flexible LoadSceneMode type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.#ctor">
            <summary>
            FlexibleLoadSceneMode default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.#ctor(UnityEngine.SceneManagement.LoadSceneMode)">
            <summary>
            FlexibleLoadSceneMode constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleLoadSceneMode constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleLoadSceneMode constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.op_Explicit(Arbor.FlexibleLoadSceneMode)~UnityEngine.SceneManagement.LoadSceneMode">
            <summary>
            Cast FlexibleLoadSceneMode to LoadSceneMode.
            </summary>
            <param name="flexible">FlexibleLoadSceneMode</param>
            <returns>Returns the result of casting to LoadSceneMode.</returns>
        </member>
        <member name="M:Arbor.FlexibleLoadSceneMode.op_Explicit(UnityEngine.SceneManagement.LoadSceneMode)~Arbor.FlexibleLoadSceneMode">
            <summary>
            Cast LoadSceneMode to FlexibleLoadSceneMode.
            </summary>
            <param name="value">LoadSceneMode</param>
            <returns>Returns the result of casting to FlexibleLoadSceneMode.</returns>
        </member>
        <member name="T:Arbor.FlexibleLong">
            <summary>
            Class to handle a flexible long type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleLong.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleLong.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="P:Arbor.FlexibleLong.slot">
            <summary>
            It returns a slot
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLong.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleLong.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLong.#ctor">
            <summary>
            FlexibleLong default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleLong.#ctor(System.Int64)">
            <summary>
            FlexibleLong constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleLong.#ctor(Arbor.LongParameterReference)">
            <summary>
            FlexibleLong constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleLong.#ctor(System.Int64,System.Int64)">
            <summary>
            FlexibleLong constructor
            </summary>
            <param name="minRange">Minimum range.</param>
            <param name="maxRange">Maximum range.</param>
        </member>
        <member name="M:Arbor.FlexibleLong.#ctor(Arbor.InputSlotLong)">
            <summary>
            FlexibleLong constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleLong.op_Explicit(Arbor.FlexibleLong)~System.Int64">
            <summary>
            Cast FlexibleLong to long.
            </summary>
            <param name="flexible">FlexiblFlexibleLongeInt</param>
            <returns>Returns the result of casting to long.</returns>
        </member>
        <member name="M:Arbor.FlexibleLong.op_Explicit(System.Int64)~Arbor.FlexibleLong">
            <summary>
            Cast long to FlexibleLong.
            </summary>
            <param name="value">long</param>
            <returns>Returns the result of casting to FlexibleLong.</returns>
        </member>
        <member name="T:Arbor.FlexiblePrimitiveBase">
            <summary>
            Class to handle a flexible primitive type reference method there is more than one. Inherit and use it.
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveBase._Type">
            <summary>
            Reference type of primitive type
            </summary>
        </member>
        <member name="P:Arbor.FlexiblePrimitiveBase.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="M:Arbor.FlexiblePrimitiveBase.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexiblePrimitiveBase.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexiblePrimitiveType">
            <summary>
            Reference types used in the Flexible class for primitive data
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveType.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveType.Random">
            <summary>
            Random
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveType.DataSlot">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="F:Arbor.FlexiblePrimitiveType.Calculator">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="T:Arbor.FlexibleQuaternion">
            <summary>
            Class to handle a flexible Quaternion type reference method there is more than one.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleQuaternion.fieldType">
            <summary>
            It returns a field type.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleQuaternion.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleQuaternion.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.#ctor">
            <summary>
            FlexibleQuaternion default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.#ctor(UnityEngine.Quaternion)">
            <summary>
            FlexibleQuaternion constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.#ctor(Arbor.QuaternionParameterReference)">
            <summary>
            FlexibleQuaternion constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.#ctor(Arbor.InputSlotQuaternion)">
            <summary>
            FlexibleQuaternion constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.op_Explicit(Arbor.FlexibleQuaternion)~UnityEngine.Quaternion">
            <summary>
            Cast FlexibleQuaternion to Quaternion.
            </summary>
            <param name="flexible">FlexibleQuaternion</param>
            <returns>Returns the result of casting to Quaternion.</returns>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.op_Explicit(UnityEngine.Quaternion)~Arbor.FlexibleQuaternion">
            <summary>
            Cast Quaternion to FlexibleQuaternion.
            </summary>
            <param name="value">Quaternion</param>
            <returns>Returns the result of casting to FlexibleQuaternion.</returns>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleQuaternion.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleRect">
            <summary>
            Class to handle a flexible Rect type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRect.#ctor">
            <summary>
            FlexibleRect default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRect.#ctor(UnityEngine.Rect)">
            <summary>
            FlexibleRect constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleRect.#ctor(Arbor.RectParameterReference)">
            <summary>
            FlexibleRect constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleRect.#ctor(Arbor.InputSlotRect)">
            <summary>
            FlexibleRect constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleRect.op_Explicit(Arbor.FlexibleRect)~UnityEngine.Rect">
            <summary>
            Cast FlexibleRect to Rect.
            </summary>
            <param name="flexible">FlexibleRect</param>
            <returns>Returns the result of casting to Rect.</returns>
        </member>
        <member name="M:Arbor.FlexibleRect.op_Explicit(UnityEngine.Rect)~Arbor.FlexibleRect">
            <summary>
            Cast Rect to FlexibleRect.
            </summary>
            <param name="value">Rect</param>
            <returns>Returns the result of casting to FlexibleRect.</returns>
        </member>
        <member name="T:Arbor.FlexibleRectInt">
            <summary>
            Class to handle a flexible RectInt type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRectInt.#ctor">
            <summary>
            FlexibleRectInt default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRectInt.#ctor(UnityEngine.RectInt)">
            <summary>
            FlexibleRectInt constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleRectInt.#ctor(Arbor.RectIntParameterReference)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleRectInt.#ctor(Arbor.InputSlotRectInt)">
            <summary>
            FlexibleRectInt constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleRectInt.op_Explicit(Arbor.FlexibleRectInt)~UnityEngine.RectInt">
            <summary>
            Cast FlexibleRectInt to RectInt.
            </summary>
            <param name="flexible">FlexibleRectInt</param>
            <returns>Returns the result of casting to RectInt.</returns>
        </member>
        <member name="M:Arbor.FlexibleRectInt.op_Explicit(UnityEngine.RectInt)~Arbor.FlexibleRectInt">
            <summary>
            Cast RectInt to FlexibleRectInt.
            </summary>
            <param name="value">RectInt</param>
            <returns>Returns the result of casting to FlexibleRectInt.</returns>
        </member>
        <member name="T:Arbor.FlexibleRectTransform">
            <summary>
            Class to handle a flexible RectTransform type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.#ctor">
            <summary>
            FlexibleRectTransform default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.#ctor(UnityEngine.RectTransform)">
            <summary>
            FlexibleRectTransform constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.#ctor(Arbor.RectTransformParameterReference)">
            <summary>
            FlexibleRectTransform constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.#ctor(Arbor.InputSlotRectTransform)">
            <summary>
            FlexibleRectTransform constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleRectTransform constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.op_Explicit(Arbor.FlexibleRectTransform)~UnityEngine.RectTransform">
            <summary>
            Cast FlexibleRectTransform to RectTransform.
            </summary>
            <param name="flexible">FlexibleRectTransform</param>
            <returns>Returns the result of casting to RectTransform.</returns>
        </member>
        <member name="M:Arbor.FlexibleRectTransform.op_Explicit(UnityEngine.RectTransform)~Arbor.FlexibleRectTransform">
            <summary>
            Cast RectTransform to FlexibleRectTransform.
            </summary>
            <param name="value">RectTransform</param>
            <returns>Returns the result of casting to FlexibleRectTransform.</returns>
        </member>
        <member name="T:Arbor.FlexibleRigidbody">
            <summary>
            Class to handle a flexible Rigidbody type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.#ctor">
            <summary>
            FlexibleRigidbody default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.#ctor(UnityEngine.Rigidbody)">
            <summary>
            FlexibleRigidbody constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.#ctor(Arbor.RigidbodyParameterReference)">
            <summary>
            FlexibleRigidbody constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.#ctor(Arbor.InputSlotRigidbody)">
            <summary>
            FlexibleRigidbody constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleRigidbody constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.op_Explicit(Arbor.FlexibleRigidbody)~UnityEngine.Rigidbody">
            <summary>
            Cast FlexibleRigidbody to Rigidbody.
            </summary>
            <param name="flexible">FlexibleRigidbody</param>
            <returns>Returns the result of casting to Rigidbody.</returns>
        </member>
        <member name="M:Arbor.FlexibleRigidbody.op_Explicit(UnityEngine.Rigidbody)~Arbor.FlexibleRigidbody">
            <summary>
            Cast Rigidbody to FlexibleRigidbody.
            </summary>
            <param name="value">Rigidbody</param>
            <returns>Returns the result of casting to FlexibleRigidbody.</returns>
        </member>
        <member name="T:Arbor.FlexibleRigidbody2D">
            <summary>
            Class to handle a flexible Rigidbody2D type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.#ctor">
            <summary>
            FlexibleRigidbody2D default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.#ctor(UnityEngine.Rigidbody2D)">
            <summary>
            FlexibleRigidbody2D constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.#ctor(Arbor.Rigidbody2DParameterReference)">
            <summary>
            FlexibleRigidbody2D constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.#ctor(Arbor.InputSlotRigidbody2D)">
            <summary>
            FlexibleRigidbody2D constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleRigidbody2D constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.op_Explicit(Arbor.FlexibleRigidbody2D)~UnityEngine.Rigidbody2D">
            <summary>
            Cast FlexibleRigidbody2D to Rigidbody2D.
            </summary>
            <param name="flexible">FlexibleRigidbody2D</param>
            <returns>Returns the result of casting to Rigidbody2D.</returns>
        </member>
        <member name="M:Arbor.FlexibleRigidbody2D.op_Explicit(UnityEngine.Rigidbody2D)~Arbor.FlexibleRigidbody2D">
            <summary>
            Cast Rigidbody2D to FlexibleRigidbody2D.
            </summary>
            <param name="value">Rigidbody2D</param>
            <returns>Returns the result of casting to FlexibleRigidbody2D.</returns>
        </member>
        <member name="T:Arbor.FlexibleSceneObjectBase">
            <summary>
            Class to handle a flexible scene objects (GameObject, Component) type reference method there is more than one. Inherit and use it.
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectBase._Type">
            <summary>
            Specified type of value
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectBase._HierarchyType">
            <summary>
            Reference type of Hierarchy specified when Type is FlexibleSceneObjectType.Hierarchy.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.ownerObject">
            <summary>
            Return the object that owns this instance
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.fieldInfo">
            <summary>
            Return the FieldInfo that owns this instance
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.targetGraph">
            <summary>
            Returns the NodeGraph to be referenced in case of FlexibleSceneObjectType.Hierarchy.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.targetGameObject">
            <summary>
            Returns the GameObject to be referenced in case of FlexibleSceneObjectType.Hierarchy.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="P:Arbor.FlexibleSceneObjectBase.hierarchyType">
            <summary>
            In the case of FlexibleSceneObjectType.Hierarchy, return FlexibleHierarchyType representing which object to reference
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSceneObjectBase.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleSceneObjectBase.GetConstantObject">
            <summary>
            Returns an Object of FlexibleSceneObjectType.Constant.
            </summary>
            <returns>Object value at Constant</returns>
        </member>
        <member name="M:Arbor.FlexibleSceneObjectBase.SetHierarchyIfConstantNull(Arbor.FlexibleHierarchyType)">
            <summary>
            Change to FlexibleSceneObjectType.Hierarchy if FlexibleSceneObjectType.Constant and the referencing object is null.
            </summary>
            <param name="hierarchyType">FlexibleHierarchyType to set</param>
            <returns>Return true if changed.</returns>
        </member>
        <member name="M:Arbor.FlexibleSceneObjectBase.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSceneObjectBase.OnAssignedField">
            <summary>
            Called when assigned to a field under NodeBehaviour.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleSceneObjectType">
            <summary>
            Reference type used in Flexible class for scene objects
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectType.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectType.DataSlot">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="F:Arbor.FlexibleSceneObjectType.Hierarchy">
            <summary>
            Hierarchy
            </summary>
        </member>
        <member name="T:Arbor.FlexibleSpace">
            <summary>
            Class to handle a flexible Space type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSpace.#ctor">
            <summary>
            FlexibleSpace default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSpace.#ctor(UnityEngine.Space)">
            <summary>
            FlexibleSpace constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleSpace.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleSpace constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleSpace.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleSpace constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleSpace.op_Explicit(Arbor.FlexibleSpace)~UnityEngine.Space">
            <summary>
            Cast FlexibleSpace to Space.
            </summary>
            <param name="flexible">FlexibleSpace</param>
            <returns>Returns the result of casting to Space.</returns>
        </member>
        <member name="M:Arbor.FlexibleSpace.op_Explicit(UnityEngine.Space)~Arbor.FlexibleSpace">
            <summary>
            Cast Space to FlexibleSpace.
            </summary>
            <param name="value">Space</param>
            <returns>Returns the result of casting to FlexibleSpace.</returns>
        </member>
        <member name="T:Arbor.FlexibleString">
            <summary>
            Class to handle a flexible string type reference method there is more than one.
            </summary>
            <remarks>
            When FlexibleType.Constant, you can display multiple fields of editor fields by attaching the <see cref="T:Arbor.ConstantMultilineAttribute"/> attribute.
            </remarks>
        </member>
        <member name="P:Arbor.FlexibleString.type">
            <summary>
            It returns a type
            </summary>
        </member>
        <member name="P:Arbor.FlexibleString.parameter">
            <summary>
            It return a Paramter. It is null if Type is other than Parameter.
            </summary>
        </member>
        <member name="P:Arbor.FlexibleString.value">
            <summary>
            It returns a value
            </summary>
        </member>
        <member name="M:Arbor.FlexibleString.#ctor">
            <summary>
            FlexibleString default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleString.#ctor(System.String)">
            <summary>
            FlexibleString constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleString.#ctor(Arbor.StringParameterReference)">
            <summary>
            FlexibleString constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleString.#ctor(Arbor.InputSlotString)">
            <summary>
            FlexibleString constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleString.op_Explicit(Arbor.FlexibleString)~System.String">
            <summary>
            Cast FlexibleString to string.
            </summary>
            <param name="flexible">FlexibleString</param>
            <returns>Returns the result of casting to string.</returns>
        </member>
        <member name="M:Arbor.FlexibleString.op_Explicit(System.String)~Arbor.FlexibleString">
            <summary>
            Cast string to FlexibleString.
            </summary>
            <param name="value">string</param>
            <returns>Returns the result of casting to FlexibleString.</returns>
        </member>
        <member name="M:Arbor.FlexibleString.GetValueObject">
            <summary>
            Return the value as object.
            </summary>
            <returns>The value object</returns>
        </member>
        <member name="M:Arbor.FlexibleString.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.FlexibleStringComparison">
            <summary>
            Class to handle a flexible StringComparison type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.#ctor">
            <summary>
            FlexibleStringComparison default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.#ctor(System.StringComparison)">
            <summary>
            FlexibleStringComparison constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleStringComparison constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleStringComparison constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.op_Explicit(Arbor.FlexibleStringComparison)~System.StringComparison">
            <summary>
            Cast FlexibleStringComparison to StringComparison.
            </summary>
            <param name="flexible">FlexibleStringComparison</param>
            <returns>Returns the result of casting to StringComparison.</returns>
        </member>
        <member name="M:Arbor.FlexibleStringComparison.op_Explicit(System.StringComparison)~Arbor.FlexibleStringComparison">
            <summary>
            Cast StringComparison to FlexibleStringComparison.
            </summary>
            <param name="value">StringComparison</param>
            <returns>Returns the result of casting to FlexibleStringComparison.</returns>
        </member>
        <member name="T:Arbor.FlexibleTimeType">
            <summary>
            Class to handle a flexible TimeType type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTimeType.#ctor">
            <summary>
            FlexibleTimeType default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTimeType.#ctor(Arbor.TimeType)">
            <summary>
            FlexibleTimeType constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleTimeType.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleTimeType constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleTimeType.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleTimeType constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleTimeType.op_Explicit(Arbor.FlexibleTimeType)~Arbor.TimeType">
            <summary>
            Cast FlexibleTimeType to TimeType.
            </summary>
            <param name="flexible">FlexibleTimeType</param>
            <returns>Returns the result of casting to TimeType.</returns>
        </member>
        <member name="M:Arbor.FlexibleTimeType.op_Explicit(Arbor.TimeType)~Arbor.FlexibleTimeType">
            <summary>
            Cast TimeType to FlexibleTimeType.
            </summary>
            <param name="value">TimeType</param>
            <returns>Returns the result of casting to FlexibleTimeType.</returns>
        </member>
        <member name="T:Arbor.FlexibleTransform">
            <summary>
            Class to handle a flexible Transform type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTransform.#ctor">
            <summary>
            FlexibleTransform default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTransform.#ctor(UnityEngine.Transform)">
            <summary>
            FlexibleTransform constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleTransform.#ctor(Arbor.TransformParameterReference)">
            <summary>
            FlexibleTransform constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleTransform.#ctor(Arbor.InputSlotTransform)">
            <summary>
            FlexibleTransform constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleTransform.#ctor(Arbor.FlexibleHierarchyType)">
            <summary>
            FlexibleTransform constructor.
            </summary>
            <param name="hierarchyType">Hierarchy type of referenced object</param>
        </member>
        <member name="M:Arbor.FlexibleTransform.op_Explicit(Arbor.FlexibleTransform)~UnityEngine.Transform">
            <summary>
            Cast FlexibleTransform to Transform.
            </summary>
            <param name="flexible">FlexibleTransform</param>
            <returns>Returns the result of casting to Transform.</returns>
        </member>
        <member name="M:Arbor.FlexibleTransform.op_Explicit(UnityEngine.Transform)~Arbor.FlexibleTransform">
            <summary>
            Cast Transform to FlexibleTransform.
            </summary>
            <param name="value">Transform</param>
            <returns>Returns the result of casting to FlexibleTransform.</returns>
        </member>
        <member name="T:Arbor.FlexibleType">
            <summary>
            Reference type used in Flexible class
            </summary>
        </member>
        <member name="F:Arbor.FlexibleType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Arbor.FlexibleType.Parameter">
            <summary>
            Parameter
            </summary>
        </member>
        <member name="F:Arbor.FlexibleType.DataSlot">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="F:Arbor.FlexibleType.Calculator">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="T:Arbor.FlexibleVector2">
            <summary>
            Class to handle a flexible Vector2 type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector2.#ctor">
            <summary>
            FlexibleVector2 default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector2.#ctor(UnityEngine.Vector2)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleVector2.#ctor(Arbor.Vector2ParameterReference)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleVector2.#ctor(Arbor.InputSlotVector2)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleVector2.op_Explicit(Arbor.FlexibleVector2)~UnityEngine.Vector2">
            <summary>
            Cast FlexibleVector2 to Vector2.
            </summary>
            <param name="flexible">FlexibleVector2</param>
            <returns>Returns the result of casting to Vector2.</returns>
        </member>
        <member name="M:Arbor.FlexibleVector2.op_Explicit(UnityEngine.Vector2)~Arbor.FlexibleVector2">
            <summary>
            Cast Vector2 to FlexibleVector2.
            </summary>
            <param name="value">Vector2</param>
            <returns>Returns the result of casting to FlexibleVector2.</returns>
        </member>
        <member name="T:Arbor.FlexibleVector2Int">
            <summary>
            Class to handle a flexible Vector2Int type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.#ctor">
            <summary>
            FlexibleVector2Int default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.#ctor(UnityEngine.Vector2Int)">
            <summary>
            FlexibleVector2Int constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.#ctor(Arbor.Vector2IntParameterReference)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.#ctor(Arbor.InputSlotVector2Int)">
            <summary>
            FlexibleVector2Int constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.op_Explicit(Arbor.FlexibleVector2Int)~UnityEngine.Vector2Int">
            <summary>
            Cast FlexibleVector2Int to Vector2Int.
            </summary>
            <param name="flexible">FlexibleVector2Int</param>
            <returns>Returns the result of casting to Vector2Int.</returns>
        </member>
        <member name="M:Arbor.FlexibleVector2Int.op_Explicit(UnityEngine.Vector2Int)~Arbor.FlexibleVector2Int">
            <summary>
            Cast Vector2Int to FlexibleVector2Int.
            </summary>
            <param name="value">Vector2Int</param>
            <returns>Returns the result of casting to FlexibleVector2Int.</returns>
        </member>
        <member name="T:Arbor.FlexibleVector3">
            <summary>
            Class to handle a flexible Vector3 type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector3.#ctor">
            <summary>
            FlexibleVector3 default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector3.#ctor(UnityEngine.Vector3)">
            <summary>
            FlexibleVector3 constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleVector3.#ctor(Arbor.Vector3ParameterReference)">
            <summary>
            FlexibleVector3 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleVector3.#ctor(Arbor.InputSlotVector3)">
            <summary>
            FlexibleVector3 constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleVector3.op_Explicit(Arbor.FlexibleVector3)~UnityEngine.Vector3">
            <summary>
            Cast FlexibleVector3 to Vector3.
            </summary>
            <param name="flexible">FlexibleVector3</param>
            <returns>Returns the result of casting to Vector3.</returns>
        </member>
        <member name="M:Arbor.FlexibleVector3.op_Explicit(UnityEngine.Vector3)~Arbor.FlexibleVector3">
            <summary>
            Cast Vector3 to FlexibleVector3.
            </summary>
            <param name="value">Vector3</param>
            <returns>Returns the result of casting to FlexibleVector3.</returns>
        </member>
        <member name="T:Arbor.FlexibleVector3Int">
            <summary>
            Class to handle a flexible Vector3Int type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.#ctor">
            <summary>
            FlexibleVector3Int default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.#ctor(UnityEngine.Vector3Int)">
            <summary>
            FlexibleVector3Int constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.#ctor(Arbor.Vector3IntParameterReference)">
            <summary>
            FlexibleVector2 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.#ctor(Arbor.InputSlotVector3Int)">
            <summary>
            FlexibleVector3Int constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.op_Explicit(Arbor.FlexibleVector3Int)~UnityEngine.Vector3Int">
            <summary>
            Cast FlexibleVector3Int to Vector3Int.
            </summary>
            <param name="flexible">FlexibleVector3Int</param>
            <returns>Returns the result of casting to Vector3Int.</returns>
        </member>
        <member name="M:Arbor.FlexibleVector3Int.op_Explicit(UnityEngine.Vector3Int)~Arbor.FlexibleVector3Int">
            <summary>
            Cast Vector3Int to FlexibleVector3Int.
            </summary>
            <param name="value">Vector3Int</param>
            <returns>Returns the result of casting to FlexibleVector3Int.</returns>
        </member>
        <member name="T:Arbor.FlexibleVector4">
            <summary>
            Class to handle a flexible Vector4 type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector4.#ctor">
            <summary>
            FlexibleVector4 default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleVector4.#ctor(UnityEngine.Vector4)">
            <summary>
            FlexibleVector4 constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleVector4.#ctor(Arbor.Vector4ParameterReference)">
            <summary>
            FlexibleVector4 constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleVector4.#ctor(Arbor.InputSlotVector4)">
            <summary>
            FlexibleVector4 constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleVector4.op_Explicit(Arbor.FlexibleVector4)~UnityEngine.Vector4">
            <summary>
            Cast FlexibleVector4 to Vector4.
            </summary>
            <param name="flexible">FlexibleVector4</param>
            <returns>Returns the result of casting to Vector4.</returns>
        </member>
        <member name="M:Arbor.FlexibleVector4.op_Explicit(UnityEngine.Vector4)~Arbor.FlexibleVector4">
            <summary>
            Cast Vector4 to FlexibleVector4.
            </summary>
            <param name="value">Vector4</param>
            <returns>Returns the result of casting to FlexibleVector4.</returns>
        </member>
        <member name="T:Arbor.IFlexibleField">
            <summary>
            FlexibleField interface
            </summary>
        </member>
        <member name="M:Arbor.IFlexibleField.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="T:Arbor.GroupNode">
            <summary>
            Class that represents the group node
            </summary>
        </member>
        <member name="T:Arbor.GroupNode.AutoAlignment">
            <summary>
            Auto Alignment
            </summary>
        </member>
        <member name="F:Arbor.GroupNode.AutoAlignment.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Arbor.GroupNode.AutoAlignment.Vertical">
            <summary>
            Vertical
            </summary>
        </member>
        <member name="F:Arbor.GroupNode.AutoAlignment.Horizonal">
            <summary>
            Horizontal
            </summary>
        </member>
        <member name="F:Arbor.GroupNode.color">
            <summary>
            Node color
            </summary>
        </member>
        <member name="F:Arbor.GroupNode.autoAlignment">
            <summary>
            Auto Layout
            </summary>
        </member>
        <member name="M:Arbor.GroupNode.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="M:Arbor.GroupNode.OnBeforeSerialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnBeforeSerialize.
            </summary>
        </member>
        <member name="T:Arbor.HideBehaviour">
            <summary>
            The attributes you do not want to display to AddBehaviour menu.
            </summary>
        </member>
        <member name="M:Arbor.HideBehaviour.#ctor">
            <summary>
            HideBehaviour constructor
            </summary>
        </member>
        <member name="T:Arbor.IAssignFieldReceiver">
            <summary>
            Interface for receiving field information when a Serializable type is assigned to a field under NodeBehaviour
            </summary>
        </member>
        <member name="M:Arbor.IAssignFieldReceiver.OnAssignField(UnityEngine.Object,System.Reflection.FieldInfo)">
            <summary>
            A callback method that receives the assigned field information.
            </summary>
            <param name="ownerObject">The object that owns this field</param>
            <param name="fieldInfo">Field information</param>
        </member>
        <member name="T:Arbor.IComponentProcessor">
            <summary>
            Interface for Editor processing such as Undo. Used with ComponentUtility.
            </summary>
        </member>
        <member name="M:Arbor.IComponentProcessor.AddComponent(UnityEngine.GameObject,System.Type)">
            <summary>
            Add component.
            </summary>
            <param name="gameObject">GameObject</param>
            <param name="type">Component type</param>
            <returns>Component</returns>
        </member>
        <member name="M:Arbor.IComponentProcessor.Destroy(UnityEngine.Object)">
            <summary>
            Destroy object.
            </summary>
            <param name="objectToUndo">Object</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.RecordObject(UnityEngine.Object,System.String)">
            <summary>
            Record object.
            </summary>
            <param name="objectToUndo">Object</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.RecordObjects(UnityEngine.Object[],System.String)">
            <summary>
            Records object.
            </summary>
            <param name="objs">Objects</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)">
            <summary>
            Register Object in Undo.
            </summary>
            <param name="objectToUndo">Object</param>
            <param name="name">Name</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.SetDirty(UnityEngine.Object)">
            <summary>
            Marks an Object as dirty.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.MoveBehaviour(Arbor.Node,Arbor.NodeBehaviour)">
            <summary>
            Move behavior to node.
            </summary>
            <param name="node">Moving destination node</param>
            <param name="behaviour">Moving NodeBehaviour</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.MoveParameterContainer(Arbor.NodeGraph)">
            <summary>
            Move the parameter container in the graph. Valid only in Editor.
            </summary>
            <param name="nodeGraph">Moving graph</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.MoveVariable(Arbor.Parameter,Arbor.VariableBase)">
            <summary>
            Move variable to parameter. Valid only in Editor.
            </summary>
            <param name="parameter">Moving destination Parameter</param>
            <param name="variable">Moving VariableBase</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.MoveVariableList(Arbor.Parameter,Arbor.VariableListBase)">
            <summary>
            Move variable to parameter. Valid only in Editor.
            </summary>
            <param name="parameter">Moving destination Parameter</param>
            <param name="variableList">Moving VariableListBase</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.DelayDestroy(UnityEngine.Object)">
            <summary>
            Delay Destroy.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.DelayCall(Arbor.ComponentUtility.DelayCallBack)">
            <summary>
            Delay call.
            </summary>
            <param name="delayCall">Method to call</param>
        </member>
        <member name="M:Arbor.IComponentProcessor.InstantiatePrefab(UnityEngine.Object)">
            <summary>
            Instantiate a prefab.
            </summary>
            <param name="prefab">Prefab</param>
            <returns>Instantiated object</returns>
        </member>
        <member name="T:Arbor.INodeBehaviourContainer">
            <summary>
            Interface to use if Node is a NodeBehaviour container
            </summary>
        </member>
        <member name="M:Arbor.INodeBehaviourContainer.GetNodeBehaviourCount">
            <summary>
            Get count of NodeBehaviour.
            </summary>
            <returns>Count of NodeBehaviour</returns>
        </member>
        <member name="M:Arbor.INodeBehaviourContainer.GetNodeBehaviour``1(System.Int32)">
            <summary>
            Get NodeBehaviour
            </summary>
            <typeparam name="T">NodeBehaviour type</typeparam>
            <param name="index">Index</param>
            <returns>NodeBehaviour</returns>
        </member>
        <member name="M:Arbor.INodeBehaviourContainer.SetNodeBehaviour(System.Int32,Arbor.NodeBehaviour)">
            <summary>
            Set NodeBehaviour
            </summary>
            <param name="index">Index</param>
            <param name="behaviour">NodeBehaviour</param>
            <remarks>Since destruction of the NodeBehavior which was originally in the specified index is not guaranteed, refer to each node for addition and deletion.</remarks>
        </member>
        <member name="T:Arbor.INodeBehaviourSerializationCallbackReceiver">
            <summary>
            Interface to receive callbacks upon serialization and deserialization.
            </summary>
            <remarks>Used for classes that inherit from NodeBehaviour.</remarks>
        </member>
        <member name="M:Arbor.INodeBehaviourSerializationCallbackReceiver.OnBeforeSerialize">
            <summary>
            Serialization Callback.
            </summary>
            <remarks>It is called from ISerializationCallbackReceiver.OnBeforeSerialize() of NodeBehaviour.</remarks>
        </member>
        <member name="M:Arbor.INodeBehaviourSerializationCallbackReceiver.OnAfterDeserialize">
            <summary>
            Serialization Callback.
            </summary>
            <remarks>It is called from ISerializationCallbackReceiver.OnAfterDeserialize() of NodeBehaviour.</remarks>
        </member>
        <member name="T:Arbor.INodeGraphContainer">
            <summary>
            Interface to use if NodeBehaviour is a NodeGraph container
            </summary>
        </member>
        <member name="M:Arbor.INodeGraphContainer.GetNodeGraphCount">
            <summary>
            Get count of NodeGraph.
            </summary>
            <returns>Count of NodeGraph</returns>
        </member>
        <member name="M:Arbor.INodeGraphContainer.GetNodeGraph``1(System.Int32)">
            <summary>
            Get NodeGraph.
            </summary>
            <typeparam name="T">NodeGraph type.</typeparam>
            <param name="index">Index</param>
            <returns>NodeGraph</returns>
        </member>
        <member name="M:Arbor.INodeGraphContainer.SetNodeGraph(System.Int32,Arbor.NodeGraph)">
            <summary>
            Set NodeGraph.
            </summary>
            <param name="index">Index</param>
            <param name="graph">NodeGraph</param>
            <remarks>Since the destruction of the NodeGraph originally from the specified index is not guaranteed, refer to each NodeBehaviour for addition and deletion.</remarks>
        </member>
        <member name="M:Arbor.INodeGraphContainer.OnFinishNodeGraph(Arbor.NodeGraph,System.Boolean)">
            <summary>
            This function is called when NodeGraph finishes.
            </summary>
            <param name="graph">NodeGraph</param>
            <param name="success">Whether it is successful or not</param>
        </member>
        <member name="T:Arbor.Internal.AnimatorParameterTypeAttribute">
            <summary>
            An attribute that specifies AnimatorControllerParameterType as a derived class of AnimatorParameterReference
            </summary>
        </member>
        <member name="P:Arbor.Internal.AnimatorParameterTypeAttribute.parameterType">
            <summary>
            The specified AnimatorControllerParameterType
            </summary>
        </member>
        <member name="M:Arbor.Internal.AnimatorParameterTypeAttribute.#ctor(UnityEngine.AnimatorControllerParameterType)">
            <summary>
            Specifying AnimatorControllerParameterType
            </summary>
            <param name="parameterType">AnimatorControllerParameterType</param>
        </member>
        <member name="T:Arbor.Internal.ConstraintableAttribute">
            <summary>
            Attribute that specifies that it can be constrained to a derived class of ParameterReference
            </summary>
        </member>
        <member name="P:Arbor.Internal.ConstraintableAttribute.baseType">
            <summary>
            Base type of constraint
            </summary>
        </member>
        <member name="F:Arbor.Internal.ConstraintableAttribute.isList">
            <summary>
            Flag that constrains to IList&lt;&gt; only.
            </summary>
        </member>
        <member name="M:Arbor.Internal.ConstraintableAttribute.#ctor">
            <summary>
            Specify that it can be constrained
            </summary>
        </member>
        <member name="M:Arbor.Internal.ConstraintableAttribute.#ctor(System.Type)">
            <summary>
            Specify that it can be constrained
            </summary>
            <param name="baseType">Base type of constraint</param>
        </member>
        <member name="M:Arbor.Internal.ConstraintableAttribute.IsConstraintSatisfied(System.Type)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="valueType">Determining type</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="M:Arbor.Internal.ConstraintableAttribute.IsConstraintSatisfied(Arbor.Parameter)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="parameter">Determining parameter</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.Internal.ConstraintableEnumAttribute">
            <summary>
            Attribute that specifies that it can be constrained to a derived class of ParameterReference
            </summary>
        </member>
        <member name="P:Arbor.Internal.ConstraintableEnumAttribute.isList">
            <summary>
            Flag that constrains to IList&lt;&gt; only.
            </summary>
        </member>
        <member name="M:Arbor.Internal.ConstraintableEnumAttribute.#ctor">
            <summary>
            Specify that it can be constrained
            </summary>
        </member>
        <member name="M:Arbor.Internal.ConstraintableEnumAttribute.#ctor(System.Boolean)">
            <summary>
            Specify that it can be constrained
            </summary>
            <param name="isList">Whether the subject of type constraint is IList&lt;&gt; type.</param>
        </member>
        <member name="M:Arbor.Internal.ConstraintableEnumAttribute.IsConstraintSatisfied(System.Type)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="valueType">Determining type</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="M:Arbor.Internal.ConstraintableEnumAttribute.IsConstraintSatisfied(Arbor.Parameter)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="parameter">Determining parameter</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.Internal.DocumentableAttribute">
            <summary>
            Inner class to use when documenting.
            </summary>
        </member>
        <member name="T:Arbor.Internal.DocumentLabel">
            <summary>
            Inner class to use when documenting.
            </summary>
        </member>
        <member name="P:Arbor.Internal.DocumentLabel.name">
            <summary>
            Label name
            </summary>
        </member>
        <member name="M:Arbor.Internal.DocumentLabel.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Label name</param>
        </member>
        <member name="T:Arbor.Internal.DocumentManual">
            <summary>
            For internal
            </summary>
        </member>
        <member name="F:Arbor.Internal.DocumentManual.link">
            <summary>
            For internal
            </summary>
        </member>
        <member name="M:Arbor.Internal.DocumentManual.#ctor(System.String)">
            <summary>
            For internal
            </summary>
            <param name="link">Link</param>
        </member>
        <member name="T:Arbor.Internal.DocumentOrder">
            <summary>
            Inner class to use when documenting.
            </summary>
        </member>
        <member name="F:Arbor.Internal.DocumentOrder.order">
            <summary>
            Display order in document
            </summary>
        </member>
        <member name="M:Arbor.Internal.DocumentOrder.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="order">Display order in document</param>
        </member>
        <member name="T:Arbor.Internal.DocumentType">
            <summary>
            Inner class to use when documenting.
            </summary>
        </member>
        <member name="F:Arbor.Internal.DocumentType.type">
            <summary>
            The type to display in the document
            </summary>
        </member>
        <member name="M:Arbor.Internal.DocumentType.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">The type to display in the document</param>
        </member>
        <member name="T:Arbor.Internal.ExcludeTestAttribute">
            <summary>
            For Arbor Test
            </summary>
        </member>
        <member name="T:Arbor.Internal.HideInDocument">
            <summary>
            Attributes to hide in documents
            </summary>
        </member>
        <member name="T:Arbor.Internal.IConstraintableAttribute">
            <summary>
            Inner interface for associating with ParameterReference.
            </summary>
        </member>
        <member name="M:Arbor.Internal.IConstraintableAttribute.IsConstraintSatisfied(System.Type)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="valueType">Determining type</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.Internal.NodeBehaviourInternalUtility">
            <summary>
            NodeBehaviour's internal utility class. Use when you want to make an internal call directly.
            </summary>
        </member>
        <member name="M:Arbor.Internal.NodeBehaviourInternalUtility.CallPauseGraphEvent(Arbor.NodeBehaviour)">
            <summary>
            Call the event that paused the graph.
            </summary>
            <param name="nodeBehaviour">NodeBehaviour</param>
        </member>
        <member name="M:Arbor.Internal.NodeBehaviourInternalUtility.CallResumeGraphEvent(Arbor.NodeBehaviour)">
            <summary>
            Call the event that resumed from the pause of the graph.
            </summary>
            <param name="nodeBehaviour">NodeBehaviour</param>
        </member>
        <member name="T:Arbor.Internal.ParameterConstraintAttributeBase">
            <summary>
            Inner class for associating with ParameterReference.
            </summary>
        </member>
        <member name="M:Arbor.Internal.ParameterConstraintAttributeBase.IsConstraintSatisfied(Arbor.Parameter)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="parameter">Determining parameter</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.Internal.ParameterTypeAttribute">
            <summary>
            An attribute that specifies Parameter.Type as a derived class of ParameterReference
            </summary>
        </member>
        <member name="P:Arbor.Internal.ParameterTypeAttribute.parameterType">
            <summary>
            The specified Parameter.Type
            </summary>
        </member>
        <member name="M:Arbor.Internal.ParameterTypeAttribute.#ctor(Arbor.Parameter.Type)">
            <summary>
            Specifying Parameter.Type
            </summary>
            <param name="parameterType">Parameter.Type</param>
        </member>
        <member name="M:Arbor.Internal.ParameterTypeAttribute.IsConstraintSatisfied(Arbor.Parameter)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="parameter">Determining parameter</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ISerializeVersionCallbackReceiver">
            <summary>
            Callback receiver called from SerializeVersion class
            </summary>
        </member>
        <member name="P:Arbor.ISerializeVersionCallbackReceiver.newestVersion">
            <summary>
            newest version
            </summary>
        </member>
        <member name="M:Arbor.ISerializeVersionCallbackReceiver.OnInitialize">
            <summary>
            Called at initialization.
            </summary>
        </member>
        <member name="M:Arbor.ISerializeVersionCallbackReceiver.OnVersioning">
            <summary>
            Called when the serialized data is switched to version control.
            </summary>
        </member>
        <member name="M:Arbor.ISerializeVersionCallbackReceiver.OnSerialize(System.Int32)">
            <summary>
            Called when a version is updated.
            </summary>
            <param name="version">Current version</param>
        </member>
        <member name="T:Arbor.ISubGraphBehaviour">
            <summary>
            Interface to use if NodeBehaviour is a NodeGraph container
            </summary>
        </member>
        <member name="P:Arbor.ISubGraphBehaviour.isExternal">
            <summary>
            Returns whether an external graph is referenced.
            </summary>
        </member>
        <member name="M:Arbor.ISubGraphBehaviour.GetSubGraph">
            <summary>
            Get the referenced NodeGraph.
            </summary>
            <returns>NodeGraph</returns>
        </member>
        <member name="T:Arbor.ListAccessor">
            <summary>
            Access IList&lt;&gt; generated at runtime.
            </summary>
        </member>
        <member name="M:Arbor.ListAccessor.NewList">
            <summary>
            Create a List instance.
            </summary>
            <returns>List instance</returns>
        </member>
        <member name="M:Arbor.ListAccessor.NewArray(System.Int32)">
            <summary>
            Create a array instance.
            </summary>
            <param name="count">Element count</param>
            <returns>Array instance</returns>
        </member>
        <member name="M:Arbor.ListAccessor.SetElement(System.Collections.IList,System.Int32,System.Object,Arbor.ListInstanceType)">
            <summary>
            Set the element.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="index">Index</param>
            <param name="element">The element to set</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.AddElement(System.Collections.IList,System.Object,Arbor.ListInstanceType)">
            <summary>
            Add an element.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="element">The element to add</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.InsertElement(System.Collections.IList,System.Int32,System.Object,Arbor.ListInstanceType)">
            <summary>
            Insert an element.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="index">Index</param>
            <param name="element">The element to insert</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.RemoveElement(System.Collections.IList,System.Object,Arbor.ListInstanceType)">
            <summary>
            Remove an element.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="element">The element to remove</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.RemoveAtIndex(System.Collections.IList,System.Int32,Arbor.ListInstanceType)">
            <summary>
            Remove an element.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="index">Index</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.Clear(System.Collections.IList,Arbor.ListInstanceType)">
            <summary>
            Remove all elements.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <param name="instanceType">How to change the instance</param>
            <returns>The resulting instance of the change</returns>
        </member>
        <member name="M:Arbor.ListAccessor.ToArray(System.Collections.IList)">
            <summary>
            Convert to an array.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <returns>Array of conversion results</returns>
        </member>
        <member name="M:Arbor.ListAccessor.ToList(System.Collections.IList)">
            <summary>
            Convert to List.
            </summary>
            <param name="instance">Instance of type IList&lt;elementType&gt;</param>
            <returns>List of conversion results</returns>
        </member>
        <member name="M:Arbor.ListAccessor.Get(System.Type)">
            <summary>
            Get ListAccessor of specified element type.
            </summary>
            <param name="elementType">Element type</param>
            <returns>ListAccessor to access IList&lt;elementType&gt;</returns>
        </member>
        <member name="T:Arbor.ListInstanceType">
            <summary>
            Specify how to modify the List instance.
            </summary>
        </member>
        <member name="F:Arbor.ListInstanceType.Keep">
            <summary>
            Change the specified instance as it is.
            </summary>
        </member>
        <member name="F:Arbor.ListInstanceType.NewArray">
            <summary>
            Create a new array and change it.
            </summary>
        </member>
        <member name="F:Arbor.ListInstanceType.NewList">
            <summary>
            Create a new List and change it.
            </summary>
        </member>
        <member name="T:Arbor.ListUtility">
            <summary>
            List utility class
            </summary>
        </member>
        <member name="M:Arbor.ListUtility.GetElementType(System.Type)">
            <summary>
            Get the element type.
            </summary>
            <param name="listType">List type</param>
            <returns>Returns the element type.</returns>
        </member>
        <member name="M:Arbor.ListUtility.GetIListType(System.Type)">
            <summary>
            Get the type of IList&lt;elementType&gt;.
            </summary>
            <param name="elementType">Element type</param>
            <returns>Returns the type of IList&lt;elementType&gt;.</returns>
        </member>
        <member name="M:Arbor.ListUtility.GetICollectionType(System.Type)">
            <summary>
            Get the type of ICollection&lt;elementType&gt;.
            </summary>
            <param name="elementType">Element type</param>
            <returns>Returns the type of ICollection&lt;elementType&gt;.</returns>
        </member>
        <member name="M:Arbor.ListUtility.GetListType(System.Type)">
            <summary>
            Get the type of List&lt;elementType&gt;.
            </summary>
            <param name="elementType">Element type</param>
            <returns>Returns the type of List&lt;elementType&gt;.</returns>
        </member>
        <member name="M:Arbor.ListUtility.Equals(System.Collections.IList,System.Collections.IList,System.Collections.IEqualityComparer)">
            <summary>
            Determine if IList are equal.
            </summary>
            <param name="a">IList to judge</param>
            <param name="b">IList to judge</param>
            <param name="comparer">Interface for equality comparison. When null is specified, default judgment is used.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ListUtility.IndexOf(System.Collections.IList,System.Object)">
            <summary>
            Gets the index where the element is stored.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.IndexOf(System.Collections.IList,System.Object,System.Int32)">
            <summary>
            Gets the index where the element is stored.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <param name="startIndex">Start index</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.IndexOf(System.Collections.IList,System.Object,System.Int32,System.Int32)">
            <summary>
            Gets the index where the element is stored.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <param name="startIndex">Start index</param>
            <param name="count">Count</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.LastIndexOf(System.Collections.IList,System.Object)">
            <summary>
            Search the index where the element is stored from the end.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.LastIndexOf(System.Collections.IList,System.Object,System.Int32)">
            <summary>
            Search the index where the element is stored from the end.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <param name="startIndex">Start index</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.LastIndexOf(System.Collections.IList,System.Object,System.Int32,System.Int32)">
            <summary>
            Search the index where the element is stored from the end.
            </summary>
            <param name="instance">Instance of type IList</param>
            <param name="element">Element</param>
            <param name="startIndex">Start index</param>
            <param name="count">Count</param>
            <returns>The index where the element is stored. Returns -1 if there is no element.</returns>
        </member>
        <member name="M:Arbor.ListUtility.Equals``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determine if IList&lt;T&gt; are equal.
            </summary>
            <typeparam name="T">Element type</typeparam>
            <param name="a">IList&lt;T&gt; to judge</param>
            <param name="b">IList&lt;T&gt; to judge</param>
            <param name="comparer">Interface for equality comparison. When null is specified, default judgment is used.</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="T:Arbor.LogicalCondition">
            <summary>
            Logical operation of condition
            </summary>
        </member>
        <member name="F:Arbor.LogicalCondition.logicalOperation">
            <summary>
            Logical operation
            </summary>
        </member>
        <member name="F:Arbor.LogicalCondition.notOp">
            <summary>
            NOT operation flag
            </summary>
        </member>
        <member name="T:Arbor.LogicalOperation">
            <summary>
            Logical operation
            </summary>
        </member>
        <member name="F:Arbor.LogicalOperation.And">
            <summary>
            AND
            </summary>
        </member>
        <member name="F:Arbor.LogicalOperation.Or">
            <summary>
            OR
            </summary>
        </member>
        <member name="T:Arbor.Node">
            <summary>
            Base class of a node in Arbor Editor
            </summary>
        </member>
        <member name="F:Arbor.Node.defaultWidth">
            <summary>
            Default width of node
            </summary>
        </member>
        <member name="F:Arbor.Node.position">
            <summary>
            Position on the Arbor Editor.
            </summary>
        </member>
        <member name="F:Arbor.Node.showComment">
            <summary>
            Whether to display comments
            </summary>
        </member>
        <member name="F:Arbor.Node.nodeComment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:Arbor.Node.nodeGraph">
            <summary>
            Gets the NodeGraph.
            </summary>
        </member>
        <member name="P:Arbor.Node.nodeID">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:Arbor.Node.name">
            <summary>
            Node name.
            </summary>
        </member>
        <member name="M:Arbor.Node.#ctor(Arbor.NodeGraph,System.Int32)">
            <summary>
            Node constructor
            </summary>
            <param name="nodeGraph">NodeGraph with this node</param>
            <param name="nodeID">Node ID</param>
        </member>
        <member name="M:Arbor.Node.OnGraphChanged">
            <summary>
            Called when the NodeGraph to which the Node belongs has changed.
            </summary>
        </member>
        <member name="M:Arbor.Node.IsContainsBehaviour(Arbor.NodeBehaviour)">
            <summary>
            Check if it contains NodeBehaviour.
            </summary>
            <param name="behaviour">Check NodeBehaviour</param>
            <returns>Returns true if it contains NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.Node.IsDeletable">
            <summary>
            Returns whether or not it can be deleted.
            </summary>
            <returns>Returns true if it can be deleted.</returns>
        </member>
        <member name="M:Arbor.Node.GetName">
            <summary>
            Get node name.
            </summary>
            <returns>Node name</returns>
        </member>
        <member name="M:Arbor.Node.ToString">
            <summary>
            Convert node to string (for debugging).
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="M:Arbor.Node.OnAfterDeserialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnAfterDeserialize.
            </summary>
        </member>
        <member name="M:Arbor.Node.OnBeforeSerialize">
            <summary>
            Called from ISerializationCallbackReceiver.OnBeforeSerialize.
            </summary>
        </member>
        <member name="M:Arbor.Node.GetOldName">
            <summary>
            Get the node name before Arbor 3.9.0.
            </summary>
            <returns>Old node name</returns>
        </member>
        <member name="T:Arbor.NodeBehaviour">
            <summary>
            Base class for scripts to be assigned to various nodes of ArborFSM.
            </summary>
        </member>
        <member name="F:Arbor.NodeBehaviour.expanded">
            <summary>
            Expanded on ArborEditorWindow.
            </summary>
        </member>
        <member name="P:Arbor.NodeBehaviour.nodeGraph">
            <summary>
            Gets the NodeGraph.
            </summary>
        </member>
        <member name="P:Arbor.NodeBehaviour.nodeID">
            <summary>
            Gets the node identifier.
            </summary>
        </member>
        <member name="P:Arbor.NodeBehaviour.node">
            <summary>
            Get the Node.
            </summary>
        </member>
        <member name="E:Arbor.NodeBehaviour.onValidate">
            <summary>
            Callback called during OnValidate
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnValidate">
            <summary>
            This function is called when the script is loaded or when the inspector value changes (this call is only in the editor)
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.RebuildFields">
            <summary>
            For internal.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnRebuildFields">
            <summary>
            It is called when reconstructing data about fields.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.CreateNodeBehaviour(Arbor.Node,System.Type,System.Boolean)">
            <summary>
            For Editor.
            </summary>
            <param name="node">Node</param>
            <param name="type">Type</param>
            <param name="duplicate">Whether duplicated</param>
            <returns>Returns the created NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.CreateNodeBehaviour``1(Arbor.Node,System.Boolean)">
            <summary>
            For Editor.
            </summary>
            <typeparam name="Type">Type</typeparam>
            <param name="node">Node</param>
            <param name="duplicate">Whether duplicated</param>
            <returns>Returns the created NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.Destroy(Arbor.NodeBehaviour)">
            <summary>
            Destroy NodeBehaviour.
            </summary>
            <param name="behaviour">NodeBehaviour</param>
        </member>
        <member name="P:Arbor.NodeBehaviour.dataSlotCount">
            <summary>
            Number of DataSlot
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.GetDataSlot(System.Int32)">
            <summary>
            Get DataSlot.
            </summary>
            <param name="index">Index</param>
            <returns>DataSlot</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.ContainsSlot(Arbor.DataSlot)">
            <summary>
            Determine if the Data Slot is included.
            </summary>
            <param name="slot">DataSlot</param>
            <returns>Returns true if included.</returns>
        </member>
        <member name="P:Arbor.NodeBehaviour.dataSlotFieldCount">
            <summary>
            Number of DataSlotField
            </summary>
        </member>
        <member name="P:Arbor.NodeBehaviour.calculatorSlotFieldCount">
            <summary>
            Number of DataSlotField
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.GetDataSlotField(System.Int32)">
            <summary>
            Get DataSlotField.
            </summary>
            <param name="index">Index</param>
            <returns>DataSlotField</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.GetCalculatorSlotField(System.Int32)">
            <summary>
            Get DataSlotField.
            </summary>
            <param name="index">Index</param>
            <returns>DataSlotField</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.RebuildDataSlotFieldIfNecessary(Arbor.DataSlot)">
            <summary>
            Check if DataSlot exists and rebuild if necessary.
            </summary>
            <param name="slot">Data Slot to confirm existence</param>
        </member>
        <member name="M:Arbor.NodeBehaviour.GetDataSlotField(Arbor.DataSlot,System.Boolean)">
            <summary>
            Get DataSlotField.
            </summary>
            <param name="slot">DataSlot</param>
            <param name="rebuild">Rebuild if not found.</param>
            <returns>DataSlotField</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.GetCalculatorSlotField(Arbor.DataSlot)">
            <summary>
            Get DataSlotField.
            </summary>
            <param name="slot">DataSlot</param>
            <returns>DataSlotField</returns>
        </member>
        <member name="M:Arbor.NodeBehaviour.RebuildDataSlotFields">
            <summary>
            Rebuild the DataSlotField.
            </summary>
            <remarks>It is necessary to call it when changing the number of fields of DataSlot at runtime.</remarks>
        </member>
        <member name="M:Arbor.NodeBehaviour.RebuildCalculatorSlotFields">
            <summary>
            Rebuild the DataSlotField.
            </summary>
            <remarks>It is necessary to call it when changing the number of fields of DataSlot at runtime.</remarks>
        </member>
        <member name="M:Arbor.NodeBehaviour.Initialize(Arbor.NodeGraph,System.Int32)">
            <summary>
            For Editor.
            </summary>
            <param name="nodeGraph">NodeGraph</param>
            <param name="nodeID">Node ID</param>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnCreated">
            <summary>
            Raises the created event.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnInitializeEnabled">
            <summary>
            Called to perform enabled initialization.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnPreDestroy">
            <summary>
            Raises the pre destroy event.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnGraphPause">
            <summary>
            This function is called when the graph is paused.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnGraphResume">
            <summary>
            This function is called when the graph resumes.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.OnGraphStop">
            <summary>
            This function is called when the graph stops.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.UpdateDataLink">
            <summary>
            Manually update DataLink values.
            Update the value of DataLink field of <see cref="F:Arbor.DataLinkUpdateTiming.Manual"/>.
            </summary>
        </member>
        <member name="M:Arbor.NodeBehaviour.UpdateDataLink(Arbor.DataLinkUpdateTiming)">
            <summary>
            DataLink value update.
            </summary>
            <param name="updateTiming">Update call timing</param>
        </member>
        <member name="T:Arbor.NodeBehaviourList`1">
            <summary>
            NodeBehaviour list
            </summary>
            <typeparam name="T">NodeBehaviour type</typeparam>
        </member>
        <member name="P:Arbor.NodeBehaviourList`1.count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:Arbor.NodeBehaviourList`1.Item(System.Int32)">
            <summary>
            Access to specified index
            </summary>
            <param name="i">Index</param>
            <returns>NodeBehaviour stored in the index</returns>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Add(`0)">
            <summary>
            Adds the Behaviour.
            </summary>
            <param name="behaviour">Add NodeBehaviour</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Insert(System.Int32,`0)">
            <summary>
            Insert the Behaviour.
            </summary>
            <param name="index">Insertion destination index</param>
            <param name="behaviour">Insert NodeBehaviour</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.GetObject(System.Int32)">
            <summary>
            Get Object of NodeBehaviour from index.
            </summary>
            <param name="index">Index</param>
            <returns>Object</returns>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.SetObject(System.Int32,UnityEngine.Object)">
            <summary>
            Set Object of NodeBehaviour to index.
            </summary>
            <param name="index">Index</param>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.IndexOf(UnityEngine.Object)">
            <summary>
            Return index of NodeBehaviour.
            </summary>
            <param name="obj">The NodeBehaviour to locate in the State.</param>
            <returns>Returns an index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Swap(System.Int32,System.Int32)">
            <summary>
            Swap the order of NodeBehaviour.
            </summary>
            <param name="fromIndex">The swapping want index.</param>
            <param name="toIndex">Exchange destination index.</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Move(System.Int32,System.Int32)">
            <summary>
            Move the order of NodeBehaviour.
            </summary>
            <param name="fromIndex">The moving want index.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Move(System.Int32,Arbor.Node,Arbor.NodeBehaviourList{`0},System.Int32)">
            <summary>
            Move NodeBehaviour to another node.
            </summary>
            <param name="fromIndex">Source index</param>
            <param name="toNode">Destination node</param>
            <param name="toList">Destination list</param>
            <param name="toIndex">Destination index</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Destroy(Arbor.Node,UnityEngine.Object)">
            <summary>
            Destroy NodeBehaviour
            </summary>
            <param name="node">Node that has NodeBehaviour</param>
            <param name="behaviour">Object of NodeBehaviour</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Destroy(Arbor.Node,System.Int32)">
            <summary>
            Destroy NodeBehaviour
            </summary>
            <param name="node">Node that has NodeBehaviour</param>
            <param name="behaviourIndex">The index to discard</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.DestroyAll(Arbor.Node)">
            <summary>
            Destroy All NodeBehaviour.
            </summary>
            <param name="node">Node that has NodeBehaviour</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.MoveBehaviour(Arbor.Node)">
            <summary>
            Move NodeBehaviour to node. Valid only in Editor.
            </summary>
            <param name="node">Moving destination node</param>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.Contains(`0)">
            <summary>
            Returns whether it contains behaviour.
            </summary>
            <param name="behaviour">Check target</param>
            <returns>Returns true if it contains.</returns>
        </member>
        <member name="M:Arbor.NodeBehaviourList`1.ContainsObject(UnityEngine.Object)">
            <summary>
            Returns whether it contains obj.
            </summary>
            <param name="obj">Check target</param>
            <returns>Returns true if it contains.</returns>
        </member>
        <member name="T:Arbor.NodeGraph">
            <summary>
            Base class of node graph.
            </summary>
        </member>
        <member name="F:Arbor.NodeGraph._GraphName">
            <summary>
            The Graph name.<br/>
            It is used for identification and retrieval when there is more than one Graph in one GameObject.
            </summary>
        </member>
        <member name="F:Arbor.NodeGraph.playOnStart">
            <summary>
            Flag to be played at the start.
            </summary>
        </member>
        <member name="F:Arbor.NodeGraph.updateSettings">
            <summary>
            Settings related to updating.
            </summary>
        </member>
        <member name="F:Arbor.NodeGraph.debugInfiniteLoopSettings">
            <summary>
            Debug setting of infinite loop
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.onChangedGraphTree">
            <summary>
            Callback called when the graph tree changes
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.onChangedGraphName">
            <summary>
            Callback called when the graph name changes
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.graphName">
            <summary>
            The Graph name.<br/>
            It is used for identification and retrieval when there is more than one Graph in one GameObject.
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.isStarted">
            <summary>
            Returns true if Start has been called.
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.onPlayStateChanged">
            <summary>
            Called when playState changes.
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.playState">
            <summary>
            Play state
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.currentDebugInfiniteLoopSettings">
            <summary>
            Current infinite loop debug setting.
            </summary>
            <remarks>If it is a child graph, return the infinite loop debug setting of the route graph.</remarks>
        </member>
        <member name="P:Arbor.NodeGraph.parentGraph">
            <summary>
            Parent graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.rootGraph">
            <summary>
            Root graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.ownerBehaviourObject">
            <summary>
            Object of NodeBehaviour own this graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.ownerBehaviour">
            <summary>
            NodeBehaviour is the owner of this graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.parameterContainer">
            <summary>
            The ParameterContainer assigned in this graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.displayGraphName">
            <summary>
            Display name of the node graph. If graphName is empty or null, it returns "(No Name)".
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.external">
            <summary>
            Flag used as an external graph
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.nodeCount">
            <summary>
             Get a count of Node.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetNodeFromIndex(System.Int32)">
            <summary>
            Get Node from index.
            </summary>
            <param name="index">Index</param>
            <returns>Node</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetNodeFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.Node" /> from the node identifier.
            </summary>
            <param name="nodeID">The node identifier.</param>
            <returns>Found <see cref = "T:Arbor.Node" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.IsUniqueNodeID(System.Int32)">
            <summary>
            Check if it is a unique node ID.
            </summary>
            <param name="nodeID">Node ID to check if it is unique</param>
            <returns>Returns true if unique.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetUniqueNodeID">
            <summary>
            Get a unique node ID.
            </summary>
            <returns>Unique node ID</returns>
        </member>
        <member name="P:Arbor.NodeGraph.calculatorCount">
            <summary>
             Get a count of CalculatorNode.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorFromIndex(System.Int32)">
            <summary>
            Get CalculatorNode from index.
            </summary>
            <param name="index">Index</param>
            <returns>CalculatorNode</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorIndex(Arbor.CalculatorNode)">
            <summary>
            Get CalculatorNode index.
            </summary>
            <param name="calculator">CalculatorNode</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="P:Arbor.NodeGraph.calculators">
            <summary>
            Gets all of <see cref = "T:Arbor.CalculatorNode" />.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.CalculatorNode" /> from the calculator identifier.
            </summary>
            <param name="calculatorID">The calculator identifier.</param>
            <returns>Found <see cref = "T:Arbor.CalculatorNode" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateCalculator(System.Int32,System.Type)">
            <summary>
            Create calculator.
            </summary>
            <param name="nodeID">Node ID</param>
            <param name="calculatorType">Calculator type</param>
            <returns>The created calculator. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateCalculator(System.Type)">
            <summary>
            Create calculator.
            </summary>
            <param name="calculatorType">Calculator type</param>
            <returns>The created calculator.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindCalculator(Arbor.Calculator)">
            <summary>
            Acquisition of CalculatorNodes Calculator belongs.
            </summary>
            <param name="calculator">Calculator</param>
            <returns>CalculatorNodes Calculator belongs. Return null if not.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteCalculator(Arbor.CalculatorNode)">
            <summary>
            Delete calculator.
            </summary>
            <param name="calculatorNode">Calculator that you want to delete.</param>
            <returns>true if deleted</returns>
        </member>
        <member name="P:Arbor.NodeGraph.commentCount">
            <summary>
             Get a count of CommentNode.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetCommentFromIndex(System.Int32)">
            <summary>
            Get CommentNode from index.
            </summary>
            <param name="index">Index</param>
            <returns>CommentNode</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetCommentIndex(Arbor.CommentNode)">
            <summary>
            Get CommentNode index.
            </summary>
            <param name="comment">CommentNode</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="P:Arbor.NodeGraph.comments">
            <summary>
            Gets all of <see cref = "T:Arbor.CommentNode" />.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetCommentFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.CommentNode" /> from the comment identifier.
            </summary>
            <param name="commentID">The comment identifier.</param>
            <returns>Found <see cref = "T:Arbor.CommentNode" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateComment(System.Int32)">
            <summary>
            Create comment.
            </summary>
            <param name="nodeID">Node ID</param>
            <returns>The created comment. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateComment">
            <summary>
            Create comment.
            </summary>
            <returns>The created comment.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteComment(Arbor.CommentNode)">
            <summary>
            Delete comment.
            </summary>
            <param name="comment">Comment that you want to delete.</param>
        </member>
        <member name="P:Arbor.NodeGraph.groupCount">
            <summary>
             Get a count of GroupNode.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetGroupFromIndex(System.Int32)">
            <summary>
            Get GroupNode from index.
            </summary>
            <param name="index">Index</param>
            <returns>GroupNode</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateGroup(System.Int32)">
            <summary>
            Create group.
            </summary>
            <param name="nodeID">Node ID</param>
            <returns>The created group. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateGroup">
            <summary>
            Create group.
            </summary>
            <returns>The created group.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteGroup(Arbor.GroupNode)">
            <summary>
            Delete group.
            </summary>
            <param name="group">Group that you want to delete.</param>
        </member>
        <member name="M:Arbor.NodeGraph.GetGroupFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.GroupNode" /> from the group identifier.
            </summary>
            <param name="groupID">The group identifier.</param>
            <returns>Found <see cref = "T:Arbor.GroupNode" />. Returns null if not found.</returns>
        </member>
        <member name="P:Arbor.NodeGraph.dataBranchRerouteNodes">
            <summary>
            DataBranchRerouteNode list
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.calculatorBranchRerouteNodes">
            <summary>
            DataBranchRerouteNode list
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.CreateDataBranchRerouteNode(UnityEngine.Vector2,System.Type,System.Int32,UnityEngine.Vector2)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <param name="nodeID">Node ID</param>
            <param name="direction">Direction</param>
            <returns>The created DataBranchRerouteNode. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateDataBranchRerouteNode(UnityEngine.Vector2,System.Type,System.Int32)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <param name="nodeID">Node ID</param>
            <returns>The created DataBranchRerouteNode. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateCalculatorBranchRerouteNode(UnityEngine.Vector2,System.Type,System.Int32)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <param name="nodeID">Node ID</param>
            <returns>The created DataBranchRerouteNode. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateDataBranchRerouteNode(UnityEngine.Vector2,System.Type,UnityEngine.Vector2)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <param name="direction">Direction</param>
            <returns>The created DataBranchRerouteNode.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateDataBranchRerouteNode(UnityEngine.Vector2,System.Type)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <returns>The created DataBranchRerouteNode.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CreateCalculatorBranchRerouteNode(UnityEngine.Vector2,System.Type)">
            <summary>
            Create DataBranchRerouteNode.
            </summary>
            <param name="position">Position of the node</param>
            <param name="type">Value type</param>
            <returns>The created DataBranchRerouteNode.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteDataBranchRerouteNode(Arbor.DataBranchRerouteNode)">
            <summary>
            Delete DataBranchRerouteNode.
            </summary>
            <param name="rerouteNode">DataBranchRerouteNode that you want to delete.</param>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteCalculatorBranchRerouteNode(Arbor.DataBranchRerouteNode)">
            <summary>
            Delete DataBranchRerouteNode.
            </summary>
            <param name="rerouteNode">DataBranchRerouteNode that you want to delete.</param>
        </member>
        <member name="M:Arbor.NodeGraph.RegisterNode(Arbor.Node)">
            <summary>
            Register the node in the list
            </summary>
            <param name="node">Node to register</param>
        </member>
        <member name="M:Arbor.NodeGraph.RemoveNode(Arbor.Node)">
            <summary>
            Remove the node from the list.
            </summary>
            <param name="node">Node to remove</param>
        </member>
        <member name="M:Arbor.NodeGraph.OnDeleteNode(Arbor.Node)">
            <summary>
            Delete node.
            </summary>
            <param name="node">The node to delete</param>
            <returns>Returns true if deleted, false otherwise.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.OnValidateNodes">
            <summary>
            Called when the node is changed.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteNode(Arbor.Node)">
            <summary>
            Delete node.
            </summary>
            <param name="node">Node that you want to delete.</param>
            <returns>true if deleted</returns>
        </member>
        <member name="M:Arbor.NodeGraph.OnValidate">
            <summary>
            This function is called when the script is loaded or when the inspector value changes (this call is only in the editor)
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.RefreshDataBranchies">
            <summary>
            Update the connection status of Data Branch.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.FindNodeContainsBehaviour(Arbor.NodeBehaviour)">
            <summary>
            Acquisition of nodes NodeBehaviour belongs.
            </summary>
            <param name="behaviour">NodeBehaviour</param>
            <returns>Nodess NodeBehaviour belongs. Return null if not.</returns>
        </member>
        <member name="P:Arbor.NodeGraph.dataBranchCount">
            <summary>
             Get a count of DataBranch.
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.calculatorBranchCount">
            <summary>
             Get a count of DataBranch.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetDataBranchFromIndex(System.Int32)">
            <summary>
            Get DataBranch from index.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorBranchFromIndex(System.Int32)">
            <summary>
            Get DataBranch from index.
            </summary>
            <param name="index">Index</param>
            <returns>DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetDataBranchIndex(Arbor.DataBranch)">
            <summary>
            Get DataBranch index.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorBranchIndex(Arbor.DataBranch)">
            <summary>
            Get DataBranch index.
            </summary>
            <param name="branch">DataBranch</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="P:Arbor.NodeGraph.calculatorBranchies">
            <summary>
            Gets all of <see cref = "T:Arbor.DataBranch" />.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.GetDataBranchFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.DataBranch" /> from the calculator branch identifier.
            </summary>
            <param name="branchID">The calculator branch identifier.</param>
            <returns>Found <see cref = "T:Arbor.DataBranch" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.GetCalculatorBranchFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.DataBranch" /> from the calculator branch identifier.
            </summary>
            <param name="branchID">The calculator branch identifier.</param>
            <returns>Found <see cref = "T:Arbor.DataBranch" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.ConnectDataBranch(System.Int32,System.Int32,UnityEngine.Object,Arbor.DataSlot,System.Int32,UnityEngine.Object,Arbor.DataSlot)">
            <summary>
            Connect DataSlot.
            </summary>
            <param name="branchID">ID of the DataBranch to be created</param>
            <param name="inputNodeID">Input node ID.</param>
            <param name="inputObj">Input object.</param>
            <param name="inputSlot">Input slot.</param>
            <param name="outputNodeID">Output node ID.</param>
            <param name="outputObj">Output object.</param>
            <param name="outputSlot">Output slot.</param>
            <returns>Connected DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.ConnectCalculatorBranch(System.Int32,System.Int32,UnityEngine.Object,Arbor.DataSlot,System.Int32,UnityEngine.Object,Arbor.DataSlot)">
            <summary>
            Connect DataSlot.
            </summary>
            <param name="branchID">ID of the DataBranch to be created</param>
            <param name="inputNodeID">Input node ID.</param>
            <param name="inputObj">Input object.</param>
            <param name="inputSlot">Input slot.</param>
            <param name="outputNodeID">Output node ID.</param>
            <param name="outputObj">Output object.</param>
            <param name="outputSlot">Output slot.</param>
            <returns>Connected DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.ConnectDataBranch(System.Int32,UnityEngine.Object,Arbor.DataSlot,System.Int32,UnityEngine.Object,Arbor.DataSlot)">
            <summary>
            Connect DataSlot.
            </summary>
            <param name="inputNodeID">Input node ID.</param>
            <param name="inputObj">Input object.</param>
            <param name="inputSlot">Input slot.</param>
            <param name="outputNodeID">Output node ID.</param>
            <param name="outputObj">Output object.</param>
            <param name="outputSlot">Output slot.</param>
            <returns>Connected DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.ConnectCalculatorBranch(System.Int32,UnityEngine.Object,Arbor.DataSlot,System.Int32,UnityEngine.Object,Arbor.DataSlot)">
            <summary>
            Connect DataSlot.
            </summary>
            <param name="inputNodeID">Input node ID.</param>
            <param name="inputObj">Input object.</param>
            <param name="inputSlot">Input slot.</param>
            <param name="outputNodeID">Output node ID.</param>
            <param name="outputObj">Output object.</param>
            <param name="outputSlot">Output slot.</param>
            <returns>Connected DataBranch</returns>
        </member>
        <member name="M:Arbor.NodeGraph.DisconnectDataBranch(UnityEngine.Object)">
            <summary>
            Method to be used internally. In particular there is no need to call.
            </summary>
            <param name="obj">Object</param>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteDataBranch(Arbor.DataBranch,UnityEngine.Object)">
            <summary>
            Delete DataBranch.
            </summary>
            <param name="branch">DataBranch that you want to delete.</param>
            <param name="ignoreRecord">Objects that ignore recordings to Undo</param>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteDataBranch(Arbor.DataBranch)">
            <summary>
            Delete DataBranch.
            </summary>
            <param name="branch">DataBranch that you want to delete.</param>
        </member>
        <member name="M:Arbor.NodeGraph.DeleteCalculatorBranch(Arbor.DataBranch)">
            <summary>
            Delete DataBranch.
            </summary>
            <param name="branch">DataBranch that you want to delete.</param>
        </member>
        <member name="M:Arbor.NodeGraph.OnRegisterNodes">
            <summary>
            Register nodes
            </summary>
        </member>
        <member name="P:Arbor.NodeGraph.isDeserialized">
            <summary>
            Returns whether or not deserialization has been done.
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.onAfterDeserialize">
            <summary>
            Callback after deserialization
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph(System.String)">
            <summary>
            Get the NodeGraph that in the scene with the name.
            </summary>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph(System.String,System.Type)">
            <summary>
            Get the NodeGraph that in the scene with the name.
            </summary>
            <param name="name">The name of the search NodeGraph.</param>
            <param name="type">The type of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph``1(System.String)">
            <summary>
            Get the NodeGraph that in the scene with the name.
            </summary>
            <typeparam name="T">The type of the search NodeGraph.</typeparam>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs(System.String)">
            <summary>
            Get the NodeGraph of the same name that is in the scene.
            </summary>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs(System.String,System.Type)">
            <summary>
            Get the NodeGraph of the same name that is in the scene.
            </summary>
            <param name="name">The name of the search NodeGraph.</param>
            <param name="type">The type of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs``1(System.String)">
            <summary>
            Get the NodeGraph of the same name that is in the scene.
            </summary>
            <typeparam name="T">The type of the search NodeGraph.</typeparam>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph(UnityEngine.GameObject,System.String)">
            <summary>
            Get NodeGraph in the name that has been attached to the GameObject.
            </summary>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph(UnityEngine.GameObject,System.String,System.Type)">
            <summary>
            Get NodeGraph in the name that has been attached to the GameObject.
            </summary>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <param name="type">The type of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraph``1(UnityEngine.GameObject,System.String)">
            <summary>
            Get NodeGraph in the name that has been attached to the GameObject.
            </summary>
            <typeparam name="T">The type of the search NodeGraph.</typeparam>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Found NodeGraph. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs(UnityEngine.GameObject,System.String)">
            <summary>
            Get the NodeGraph of the same name that is attached to a GameObject.
            </summary>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs(UnityEngine.GameObject,System.String,System.Type)">
            <summary>
            Get the NodeGraph of the same name that is attached to a GameObject.
            </summary>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <param name="type">The type of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.FindGraphs``1(UnityEngine.GameObject,System.String)">
            <summary>
            Get the NodeGraph of the same name that is attached to a GameObject.
            </summary>
            <typeparam name="T">The type of the search NodeGraph.</typeparam>
            <param name="gameObject">Want to search GameObject.</param>
            <param name="name">The name of the search NodeGraph.</param>
            <returns>Array of found NodeGraph.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CheckLoopDataBranch(System.Int32,UnityEngine.Object,System.Int32,UnityEngine.Object)">
            <summary>
            Check if DataBranch is looping.
            </summary>
            <param name="inputNodeID">Input slot side node ID</param>
            <param name="inputObj">Input slot side Object</param>
            <param name="outputNodeID">Output slot side node ID</param>
            <param name="outputObj">Output slot side Object</param>
            <returns>Returns true if it is looping.</returns>
        </member>
        <member name="M:Arbor.NodeGraph.CheckLoopCalculatorBranch(System.Int32,UnityEngine.Object,System.Int32,UnityEngine.Object)">
            <summary>
            Check if DataBranch is looping.
            </summary>
            <param name="inputNodeID">Input slot side node ID</param>
            <param name="inputObj">Input slot side Object</param>
            <param name="outputNodeID">Output slot side node ID</param>
            <param name="outputObj">Output slot side Object</param>
            <returns>Returns true if it is looping.</returns>
        </member>
        <member name="T:Arbor.NodeGraph.NodeGraphCallback">
            <summary>
            Delegate for NodeGraph callback
            </summary>
            <param name="nodeGraph">Event occurred NodeGraph</param>
        </member>
        <member name="E:Arbor.NodeGraph.destroyCallback">
            <summary>
            Call back when being destroyed
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.stateChangedCallback">
            <summary>
            Call back when the state changes
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.StateChanged">
            <summary>
            Notifies that the status of the graph has been updated.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnDestroy">
            <summary>
            This function is called when MonoBehaivour will be destroyed.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.DestroySubComponents(System.Boolean)">
            <summary>
            Method to be used internally. In particular there is no need to call.
            </summary>
            <param name="callback">Whether to call destroyCallback.</param>
        </member>
        <member name="M:Arbor.NodeGraph.OnReset">
            <summary>
            Reset or create callback.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Create(UnityEngine.GameObject,System.Type)">
            <summary>
            Create NodeGraph
            </summary>
            <param name="gameObject">GameObject</param>
            <param name="classType">NodeGraph type</param>
            <returns>The created NodeGraph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.Create``1(UnityEngine.GameObject)">
            <summary>
            Create NodeGraph
            </summary>
            <typeparam name="GraphType">NodeGraph type</typeparam>
            <param name="gameObject">GameObject</param>
            <returns>The created NodeGraph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.Instantiate(Arbor.NodeGraph,System.Boolean)">
            <summary>
            Instantiate NodeGraph
            </summary>
            <param name="sourceGraph">Source graph</param>
            <param name="usePool">Flag to instantiate using ObjectPool.</param>
            <returns>Instantiated graph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.Instantiate``1(``0,System.Boolean)">
            <summary>
            Instantiate NodeGraph
            </summary>
            <typeparam name="GraphType">Graph type</typeparam>
            <param name="sourceGraph">Source graph</param>
            <param name="usePool">Flag to instantiate using ObjectPool.</param>
            <returns>Instantiated graph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.Instantiate(Arbor.NodeGraph,Arbor.NodeBehaviour,System.Boolean)">
            <summary>
            Instantiate NodeGraph
            </summary>
            <param name="sourceGraph">Source graph</param>
            <param name="ownerBehaviour">NodeBehaviour with chart ownership</param>
            <param name="usePool">Flag to instantiate using ObjectPool.</param>
            <returns>Instantiated graph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.Instantiate``1(``0,Arbor.NodeBehaviour,System.Boolean)">
            <summary>
            Instantiate NodeGraph
            </summary>
            <typeparam name="GraphType">Graph type</typeparam>
            <param name="sourceGraph">Source graph</param>
            <param name="ownerBehaviour">NodeBehaviour with chart ownership</param>
            <param name="usePool">Flag to instantiate using ObjectPool.</param>
            <returns>Instantiated graph</returns>
        </member>
        <member name="M:Arbor.NodeGraph.SetExternal(Arbor.NodeBehaviour,System.Boolean)">
            <summary>
            Set this graph as an external graph.
            </summary>
            <param name="ownerBehaviour">NodeBehaviour with chart ownership. If null is specified, the external graph specification is canceled.</param>
            <param name="changeParent">Flag to change the parent of Transform to owner object(Default false)</param>
            <remarks>Use <see cref="M:Arbor.NodeGraph.Instantiate(Arbor.NodeGraph,Arbor.NodeBehaviour,System.Boolean)" /> or <see cref="M:Arbor.NodeGraph.Instantiate``1(``0,Arbor.NodeBehaviour,System.Boolean)" /> to instantiate as a child graph.</remarks>
        </member>
        <member name="M:Arbor.NodeGraph.Destroy(Arbor.NodeGraph)">
            <summary>
            Destroy NodeGraph
            </summary>
            <param name="nodeGraph">NodeGraph</param>
        </member>
        <member name="M:Arbor.NodeGraph.ToString">
            <summary>
            Convert graph to string (for debugging).
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="M:Arbor.NodeGraph.OnPoolResume">
            <summary>
            Called when resuming.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnPoolSleep">
            <summary>
            Called when stored in the pool.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnPlay">
            <summary>
            Called when you start playing.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnStop">
            <summary>
            Called when play is stopped.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnPause">
            <summary>
            Called when you pause.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnResume">
            <summary>
            Called when resuming
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnUpdate">
            <summary>
            Called when updating.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnLateUpdate">
            <summary>
            Called when LateUpdate.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnFixedUpdate">
            <summary>
            Called when FixedUpdate.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnPlayOnStart">
            <summary>
            Called when playing is started with the Start method.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnResumeOnEnable">
            <summary>
            Called when resumed with the OnEnable method.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Play">
            <summary>
            Start playing.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Stop">
            <summary>
            Stopping playback.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Pause">
            <summary>
            Pause playback.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Resume">
            <summary>
            Resume playing.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Start">
            <summary>
            Start method called from Unity
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnEnable">
            <summary>
            Enabled method called from Unity
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.OnDisable">
            <summary>
            Disabled method called from Unity
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.Update">
            <summary>
            Every frame update method called from Unity
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.ExecuteUpdate(System.Boolean)">
            <summary>
            Perform an update.
            Please call this method at any timing when UpdateSettings.type is Manual.
            </summary>
            <param name="autoExecuteLateUpdate">Flag for ExecuteLateUpdate automatically</param>
        </member>
        <member name="M:Arbor.NodeGraph.ExecuteLateUpdate">
            <summary>
            Perform an LateUpdate.
            Please call this method at any timing when UpdateSettings.type is Manual.
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.LateUpdate">
            <summary>
            Delayed update method after every frame update called from Unity
            </summary>
        </member>
        <member name="M:Arbor.NodeGraph.FixedUpdate">
            <summary>
            Frame rate independent update method for physics called from Unity
            </summary>
        </member>
        <member name="E:Arbor.NodeGraph.onBreakNode">
            <summary>
            Called when a node is stopped by a breakpoint.
            </summary>
        </member>
        <member name="T:Arbor.NodeList`1">
            <summary>
            Node list
            </summary>
            <typeparam name="T">Node type</typeparam>
        </member>
        <member name="P:Arbor.NodeList`1.count">
            <summary>
             Get a count of Node.
            </summary>
        </member>
        <member name="P:Arbor.NodeList`1.Item(System.Int32)">
            <summary>
            Get Node from index.
            </summary>
            <param name="index">Index</param>
        </member>
        <member name="M:Arbor.NodeList`1.IndexOf(`0)">
            <summary>
            Get Node index.
            </summary>
            <param name="node">Node</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="M:Arbor.NodeList`1.GetFromID(System.Int32)">
            <summary>
            Gets Node from the node identifier.
            </summary>
            <param name="nodeID">The node identifier.</param>
            <returns>Found Node. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.NodeList`1.Add(`0)">
            <summary>
            Add a node.
            </summary>
            <param name="node">The node to be added.</param>
        </member>
        <member name="M:Arbor.NodeList`1.Remove(`0)">
            <summary>
            Remove a node.
            </summary>
            <param name="node">The node to be removed.</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="T:Arbor.ObjectNamesUtility">
            <summary>
            ObjectNames utility class
            </summary>
        </member>
        <member name="M:Arbor.ObjectNamesUtility.NicifyVariableName(System.String)">
            <summary>
            Process the variable name into a displayable name.
            </summary>
            <param name="name">Variable name</param>
            <returns>Returns a displayable name.</returns>
            <remarks>Insert a space before the capital letter and remove the leading <code>m_</code>, <code>_</code> or the <code>k</code> before the capital letter.</remarks>
        </member>
        <member name="T:Arbor.ObjectPooling.FlexibleLifeTimeFlags">
            <summary>
            Class to handle a flexible LifeTimeFlags type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.#ctor">
            <summary>
            FlexibleLifeTimeFlags default constructor
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.#ctor(Arbor.ObjectPooling.LifeTimeFlags)">
            <summary>
            FlexibleLifeTimeFlags constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleLifeTimeFlags constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleLifeTimeFlags constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.op_Explicit(Arbor.ObjectPooling.FlexibleLifeTimeFlags)~Arbor.ObjectPooling.LifeTimeFlags">
            <summary>
            Cast FlexibleLifeTimeFlags to LifeTimeFlags.
            </summary>
            <param name="flexible">FlexibleLifeTimeFlags</param>
            <returns>Returns the result of casting to LifeTimeFlags.</returns>
        </member>
        <member name="M:Arbor.ObjectPooling.FlexibleLifeTimeFlags.op_Explicit(Arbor.ObjectPooling.LifeTimeFlags)~Arbor.ObjectPooling.FlexibleLifeTimeFlags">
            <summary>
            Cast LifeTimeFlags to FlexibleLifeTimeFlags.
            </summary>
            <param name="value">LifeTimeFlags</param>
            <returns>Returns the result of casting to FlexibleLifeTimeFlags.</returns>
        </member>
        <member name="T:Arbor.ObjectPooling.IPoolCallbackReceiver">
            <summary>
            Interface receiving ObjectPool callback
            </summary>
            <remarks>You can receive callbacks by defining this interface for MonoBehaviour added to the game object under pool management (including child).</remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.IPoolCallbackReceiver.OnPoolResume">
            <summary>
            Called when resuming.
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.IPoolCallbackReceiver.OnPoolSleep">
            <summary>
            Called when stored in the pool.
            </summary>
        </member>
        <member name="T:Arbor.ObjectPooling.LifeTimeFlags">
            <summary>
            Lifetime of pooled objects
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.LifeTimeFlags.SceneUnloaded">
            <summary>
            The scene where the object was placed until just before being pooled remains in the pool until it is unloaded.
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.LifeTimeFlags.TimeElapsed">
            <summary>
            It remains in the pool until the specified time has passed since it was pooled.
            </summary>
        </member>
        <member name="T:Arbor.ObjectPooling.ObjectPool">
            <summary>
            ObjectPool management class
            </summary>
        </member>
        <member name="P:Arbor.ObjectPooling.ObjectPool.advancedRatePerFrame">
            <summary>
            Advanced Pooling processing frame rate (multiplication factor relative to the screen refresh rate)
            </summary>
            <remarks>
            If processing time is exceeded beyond this frame rate, it waits until the next frame.<br/>
            The default value is 10.<br/>
            If 0 or less is specified, use <see cref="P:Arbor.ObjectPooling.ObjectPool.advancedFrameRate"/>.
            </remarks>
        </member>
        <member name="P:Arbor.ObjectPooling.ObjectPool.advancedFrameRate">
            <summary>
            Advanced Pooling processing frame rate
            </summary>
            <remarks>
            If processing time is exceeded beyond this frame rate, it waits until the next frame.<br/>
            When 0 or less is specified for both advancedFrameRate and <see cref="P:Arbor.ObjectPooling.ObjectPool.advancedRatePerFrame"/>, do not wait until all pools are completed.<br/>
            The default value is 0.<br/>
            </remarks>
        </member>
        <member name="P:Arbor.ObjectPooling.ObjectPool.isReady">
            <summary>
            Returns whether Advanced pooling is completed.
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.AdvancedPool(System.Collections.Generic.IList{Arbor.ObjectPooling.PoolingItem})">
            <summary>
            Pool in advance.
            </summary>
            <param name="items">List of objects to pool</param>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.AdvancedPool(System.Collections.Generic.IEnumerable{Arbor.ObjectPooling.PoolingItem})">
            <summary>
            Pool in advance.
            </summary>
            <param name="items">List of objects to pool</param>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <param name="parent">Parent Transform</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.Space)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <param name="parent">Parent Transform</param>
            <param name="space">Coordinate system</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,UnityEngine.Space,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <param name="parent">Parent Transform</param>
            <param name="space">Coordinate system</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Transform)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <param name="instantiateInWorldSpace">If when assigning the parent the original world position should be maintained.</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate(UnityEngine.Object,UnityEngine.Transform,System.Boolean,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <param name="instantiateInWorldSpace">If when assigning the parent the original world position should be maintained.</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <param name="parent">Parent Transform</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Transform,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="position">Position</param>
            <param name="rotation">Rotation</param>
            <param name="parent">Parent Transform</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Transform)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Transform,System.Boolean)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <param name="instantiateInWorldSpace">If when assigning the parent the original world position should be maintained.</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Instantiate``1(``0,UnityEngine.Transform,System.Boolean,Arbor.ObjectPooling.LifeTimeFlags,System.Single)">
            <summary>
            Instantiate an object.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <param name="original">Original object</param>
            <param name="parent">Parent Transform</param>
            <param name="instantiateInWorldSpace">If when assigning the parent the original world position should be maintained.</param>
            <param name="lifeTimeFlags">Lifetime of pooled objects</param>
            <param name="lifeDuration">Time to live of pooled objects</param>
            <returns>Instantiated object</returns>
            <remarks>
            If there is a pooled object, resume that object.<br/>
            If there is no pool, it is newly instantiated by Object.Instantiate.
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.Destroy(UnityEngine.GameObject)">
            <summary>
            Destroy GameObject.
            </summary>
            <param name="gameObject">GameObject to destroy</param>
            <remarks>
            If it is a GameObject under pool management, return it to the pool.<br/>
            If it is not under management, it is destroyed by Object.Destroy.<br/>
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.DestroyImmediate(UnityEngine.GameObject)">
            <summary>
            Destroy GameObject immediately.
            </summary>
            <param name="gameObject">GameObject to destroy</param>
            <remarks>
            If it is a GameObject under pool management, return it to the pool.<br/>
            If it is not under management, it is destroyed by Object.DestroyImmediate.<br/>
            </remarks>
        </member>
        <member name="M:Arbor.ObjectPooling.ObjectPool.IsAlive(UnityEngine.Object)">
            <summary>
            Check if the Object is alive.
            </summary>
            <param name="obj">Object</param>
            <returns>Returns true if the object is not Destroyed and is not stored in the pool either.</returns>
        </member>
        <member name="T:Arbor.ObjectPooling.PoolingItem">
            <summary>
            Class for setting the object to the pool in advance
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.PoolingItem._Type">
            <summary>
            Object type
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.PoolingItem.original">
            <summary>
            Original object
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.PoolingItem.amount">
            <summary>
            Amount to pool
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.PoolingItem.lifeTimeFlags">
            <summary>
            ObjectPool lifetime flag
            </summary>
        </member>
        <member name="F:Arbor.ObjectPooling.PoolingItem.lifeDuration">
            <summary>
            ObjectPool lifetime
            </summary>
        </member>
        <member name="P:Arbor.ObjectPooling.PoolingItem.type">
            <summary>
            Object type
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.PoolingItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.PoolingItem.#ctor(UnityEngine.Object,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="original">Original object</param>
            <param name="amount">Amount to pool</param>
        </member>
        <member name="M:Arbor.ObjectPooling.PoolingItem.#ctor(Arbor.ObjectPooling.PoolingItem)">
            <summary>
            Copy constructor
            </summary>
            <param name="item">Copy PoolingItem</param>
        </member>
        <member name="T:Arbor.ObjectPooling.PoolingItemList">
            <summary>
            List of objects to pool
            </summary>
        </member>
        <member name="M:Arbor.ObjectPooling.PoolingItemList.AdvancedPool">
            <summary>
            Pool in advance.
            </summary>
        </member>
        <member name="T:Arbor.AddVariableMenu">
            <summary>
            AAttribute that specifies the path in ParameterContainer's parameter addition menu.
            </summary>
        </member>
        <member name="P:Arbor.AddVariableMenu.menuName">
            <summary>
            Menu name
            </summary>
        </member>
        <member name="M:Arbor.AddVariableMenu.#ctor(System.String)">
            <summary>
            AddVariableMenu constructor
            </summary>
            <param name="menuName">
            Menu name.
            <list type="bullet">
            <item><description>Hierarchized with "/" separator.</description></item>
            <item><description>If it is empty or null it is not displayed in the list.</description></item>
            </list>
            </param>
        </member>
        <member name="T:Arbor.GlobalParameterContainerInternal">
            <summary>
            Class dealing with the accessible ParameterContainer even across the scene.
            </summary>
        </member>
        <member name="F:Arbor.GlobalParameterContainerInternal._Prefab">
            <summary>
            シーンを跨ぐ際に使用する共通のParameterContainerのプレハブを指定する。
            </summary>
        </member>
        <member name="P:Arbor.GlobalParameterContainerInternal.prefab">
             <summary>
            It returns the original ParameterContainer.
             </summary>
        </member>
        <member name="P:Arbor.GlobalParameterContainerInternal.instance">
            <summary>
            It returns the ParameterContainer entity.
            </summary>
        </member>
        <member name="M:Arbor.GlobalParameterContainerInternal.Awake">
            <summary>
            This function is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="T:Arbor.AssetObjectListParameter">
            <summary>
            ListParameter of AssetObject
            </summary>
        </member>
        <member name="T:Arbor.ComponentListParameter">
            <summary>
            ListParameter of Component
            </summary>
        </member>
        <member name="T:Arbor.EnumListParameter">
            <summary>
            ListParameter of Enum
            </summary>
        </member>
        <member name="P:Arbor.EnumListParameter.listObject">
            <summary>
            List instance object
            </summary>
        </member>
        <member name="M:Arbor.EnumListParameter.SetList(System.Collections.IList)">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="T:Arbor.ListParameterAOT">
            <summary>
            AOT supported class for parameters that handle List
            </summary>
        </member>
        <member name="P:Arbor.ListParameterAOT.listObject">
            <summary>
            List instance object
            </summary>
        </member>
        <member name="M:Arbor.ListParameterAOT.#ctor(System.Type)">
            <summary>
            ListParameterAOT constructor
            </summary>
            <param name="elementType">Element type</param>
        </member>
        <member name="M:Arbor.ListParameterAOT.SetList(System.Collections.IList)">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="T:Arbor.ListParameterBase">
            <summary>
            Base class for parameters that handle List
            </summary>
        </member>
        <member name="M:Arbor.ListParameterBase.SetList(System.Collections.IList)">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="P:Arbor.ListParameterBase.listObject">
            <summary>
            List instance object
            </summary>
        </member>
        <member name="T:Arbor.ListParameterBaseInternal`1">
            <summary>
            Base class for parameters that handle List
            </summary>
            <typeparam name="T">List element type</typeparam>
        </member>
        <member name="P:Arbor.ListParameterBaseInternal`1.listInstance">
            <summary>
            List instance
            </summary>
        </member>
        <member name="P:Arbor.ListParameterBaseInternal`1.listObject">
            <summary>
            List instance object
            </summary>
        </member>
        <member name="M:Arbor.ListParameterBaseInternal`1.SetList(System.Collections.Generic.IList{`0})">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.ListParameterBaseInternal`1.SetList(System.Collections.IList)">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="T:Arbor.ListParameterBase`1">
            <summary>
            Base class for parameters that handle List
            </summary>
            <typeparam name="T">List element type</typeparam>
        </member>
        <member name="F:Arbor.ListParameterBase`1.list">
            <summary>
            List instance
            </summary>
        </member>
        <member name="P:Arbor.ListParameterBase`1.listInstance">
            <summary>
            List instance
            </summary>
        </member>
        <member name="T:Arbor.ObjectListParameterBase`1">
            <summary>
            ListParameter of UnityObject
            </summary>
            <typeparam name="T">UnityObject type</typeparam>
        </member>
        <member name="P:Arbor.ObjectListParameterBase`1.listObject">
            <summary>
            List instance object
            </summary>
        </member>
        <member name="M:Arbor.ObjectListParameterBase`1.SetList(System.Collections.IList)">
            <summary>
            Set the List.
            </summary>
            <param name="value">The List to set</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="T:Arbor.Parameter">
            <summary>
            Class of Parameter to be stored in the ParameterContainer.
            </summary>
        </member>
        <member name="T:Arbor.Parameter.DelegateOnChanged">
            <summary>
            Delegate called when changing Parameter.
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="F:Arbor.Parameter.container">
            <summary>
            Container this parameter is stored.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.type">
            <summary>
            Type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.referenceType">
            <summary>
            the type of objectReferenceValue and Enum.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.isPublicSet">
            <summary>
            Returns whether this parameter can be set from an external graph. (For parameters in graph)
            </summary>
        </member>
        <member name="P:Arbor.Parameter.isPublicGet">
            <summary>
            Returns whether this parameter can be get from an external graph. (For parameters in graph)
            </summary>
        </member>
        <member name="M:Arbor.Parameter.IsListType(Arbor.Parameter.Type)">
            <summary>
            Judges whether the type of the value handled by the specified Parameter.Type is IList&lt;&gt;.
            </summary>
            <param name="type">Parameter type</param>
            <returns>Returns true if the value type is IListIList&lt;&gt;.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetValueType(Arbor.Parameter.Type,System.Type)">
            <summary>
            Get the value type of the parameter.
            </summary>
            <param name="type">Type of parameter</param>
            <param name="referenceType">Reference type (used for Enum, Component, Variable)</param>
            <returns>Value type of the parameter</returns>
        </member>
        <member name="P:Arbor.Parameter.valueType">
            <summary>
            Get value type.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.value">
            <summary>
            Get values according to type.
            </summary>
        </member>
        <member name="E:Arbor.Parameter.onChanged">
            <summary>
            Callback function to be called when the value is changed.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.OnChanged">
            <summary>
            Call when you change the value.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.ToString">
            <summary>
            Convert value to string format.
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="M:Arbor.Parameter.ToString(System.String)">
            <summary>
            Convert value to string format.
            </summary>
            <param name="format">Numeric format string (Int, Long, Float only)</param>
            <returns>Converted string</returns>
            <remarks>For more information about numeric format specifiers, see <a href="https://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx">Standard Numeric Format Strings</a> and <a href="https://msdn.microsoft.com/en-us/library/0c899ak8(v=vs.110).aspx">Custom Numeric Format Strings</a>.</remarks>
        </member>
        <member name="M:Arbor.Parameter.SetValue``1(``0)">
            <summary>
            Set the value of the parameter.
            </summary>
            <typeparam name="T">Type of value to set</typeparam>
            <param name="value">Value to set</param>
            <returns>Returns true if the setting is successful</returns>
        </member>
        <member name="M:Arbor.Parameter.SetValue``1(Arbor.ValueFlow.IValueGetter)">
            <summary>
            Set the value of the parameter.
            </summary>
            <typeparam name="T">Type of value to set</typeparam>
            <param name="valueGetter">Interface to get the value to set</param>
            <returns>Returns true if the setting is successful</returns>
        </member>
        <member name="M:Arbor.Parameter.SetValue(Arbor.ValueFlow.IValueGetter)">
            <summary>
            Set the value of the parameter.
            </summary>
            <param name="valueGetter">Interface to get the value to set</param>
            <returns>Returns true if the setting is successful</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetValue``1(``0@)">
            <summary>
            Try to get the value of the parameter.
            </summary>
            <typeparam name="T">Type of value to get</typeparam>
            <param name="outValue">Value output argument</param>
            <returns>Returns true if the get is successful.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <returns>Get the value. If you can not get returns the default (T).</returns>
        </member>
        <member name="P:Arbor.Parameter.assetObjectValue">
            <summary>
            Value of Component type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetAssetObject(UnityEngine.Object)">
            <summary>
            It wants to set the value of the Object type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetAssetObject(UnityEngine.Object@)">
            <summary>
            Get the value of the Object type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetAssetObject(UnityEngine.Object)">
            <summary>
            Get the value of the Object type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetAssetObject``1(``0)">
            <summary>
            Set Object value
            </summary>
            <typeparam name="TObject">Type of AssetObject to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetAssetObject``1(``0@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TObject">Type of AssetObject to get</typeparam>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetAssetObject``1(``0)">
            <summary>
            Get the value of the Object type.
            </summary>
            <typeparam name="TObject">Type of AssetObject to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.assetObjectListValue">
            <summary>
            Value of ComponentList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetAssetObjectList``1(System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetAssetObjectList``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetAssetObjectList``1">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.boolValue">
            <summary>
            Value of Bool type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBool(System.Boolean)">
            <summary>
            It wants to set the value of the Bool type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBool(System.Boolean@)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBool(System.Boolean)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.boolListValue">
            <summary>
            Value of BoolList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBoolList(System.Collections.Generic.IList{System.Boolean})">
            <summary>
            It wants to set the value of the BoolList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBoolList(System.Collections.Generic.IList{System.Boolean}@)">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBoolList">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.boundsValue">
            <summary>
            Value of Bounds type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBounds(UnityEngine.Bounds)">
            <summary>
            It wants to set the value of the Bounds type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBounds(UnityEngine.Bounds@)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBounds(UnityEngine.Bounds)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBounds">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns 0 bounds.</returns>
        </member>
        <member name="P:Arbor.Parameter.boundsIntValue">
            <summary>
            Value of BoundsInt type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBoundsInt(UnityEngine.BoundsInt)">
            <summary>
            It wants to set the value of the BoundsInt type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBoundsInt(UnityEngine.BoundsInt@)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBoundsInt(UnityEngine.BoundsInt)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBoundsInt">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns BoundsInt(0, 0, 0, 0).</returns>
        </member>
        <member name="P:Arbor.Parameter.boundsIntListValue">
            <summary>
            Value of BoundsIntList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBoundsIntList(System.Collections.Generic.IList{UnityEngine.BoundsInt})">
            <summary>
            It wants to set the value of the BoundsIntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBoundsIntList(System.Collections.Generic.IList{UnityEngine.BoundsInt}@)">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBoundsIntList">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.boundsListValue">
            <summary>
            Value of BoundsList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetBoundsList(System.Collections.Generic.IList{UnityEngine.Bounds})">
            <summary>
            It wants to set the value of the BoundsList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetBoundsList(System.Collections.Generic.IList{UnityEngine.Bounds}@)">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetBoundsList">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.colorValue">
            <summary>
            Value of Color type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetColor(UnityEngine.Color)">
            <summary>
            It wants to set the value of the Color type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetColor(UnityEngine.Color@)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetColor(UnityEngine.Color)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetColor">
            <summary>
            Get the value of the Color type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Color.white.</returns>
        </member>
        <member name="P:Arbor.Parameter.colorListValue">
            <summary>
            Value of ColorList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetColorList(System.Collections.Generic.IList{UnityEngine.Color})">
            <summary>
            It wants to set the value of the ColorList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetColorList(System.Collections.Generic.IList{UnityEngine.Color}@)">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetColorList">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.componentType">
            <summary>
            Component type
            </summary>
        </member>
        <member name="P:Arbor.Parameter.componentValue">
            <summary>
            Value of Component type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetComponent(UnityEngine.Component)">
            <summary>
            It wants to set the value of the Component type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetComponent(UnityEngine.Component@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetComponent(UnityEngine.Component)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetComponent``1(``0)">
            <summary>
            Set Component value
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetComponent``1(``0@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetComponent``1(``0)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.componentListValue">
            <summary>
            Value of ComponentList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetComponentList``1(System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetComponentList``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetComponentList``1">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.isEnum">
            <summary>
            Returns whether this parameter is of type Enum.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.enumIntValue">
            <summary>
            int Value of Enum type.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.enumValue">
            <summary>
            Value of Enum type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetEnumInt(System.Int32)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetEnumInt(System.Int32@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="value">The value you get.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetEnumInt(System.Int32)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetEnum(System.Enum)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetEnum(System.Enum@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="value">The value you get.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetEnum(System.Enum)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetEnum``1(``0)">
            <summary>
            Set Enum value
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetEnum``1(``0@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="value">The value you get.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetEnum``1(``0)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetEnum``1">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns default(TEnum).</returns>
        </member>
        <member name="M:Arbor.Parameter.SetEnumList``1(System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetEnumList``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetEnumList``1">
            <summary>
            Get the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.floatValue">
            <summary>
            Value of Float type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetFloat(System.Single)">
            <summary>
            It wants to set the value of the Float type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetFloat(System.Single@)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="value">The value you get.</param>
             <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetFloat(System.Single)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.floatListValue">
            <summary>
            Value of FloatList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetFloatList(System.Collections.Generic.IList{System.Single})">
            <summary>
            It wants to set the value of the FloatList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetFloatList(System.Collections.Generic.IList{System.Single}@)">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetFloatList">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.gameObjectValue">
            <summary>
            Value of GameObject type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetGameObject(UnityEngine.GameObject)">
            <summary>
            It wants to set the value of the GameObject type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetGameObject(UnityEngine.GameObject@)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetGameObject(UnityEngine.GameObject)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.gameObjectListValue">
            <summary>
            Value of GameObjectList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetGameObjectList(System.Collections.Generic.IList{UnityEngine.GameObject})">
            <summary>
            It wants to set the value of the GameObjectList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetGameObjectList(System.Collections.Generic.IList{UnityEngine.GameObject}@)">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetGameObjectList">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.intValue">
            <summary>
            Value of Int type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetInt(System.Int32)">
            <summary>
            It wants to set the value of the Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetInt(System.Int32@)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetInt(System.Int32)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.intListValue">
            <summary>
            Value of IntList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetIntList(System.Collections.Generic.IList{System.Int32})">
            <summary>
            It wants to set the value of the IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetIntList(System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Get the value of the IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetIntList">
            <summary>
            Get the value of the IntList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.longValue">
            <summary>
            Value of Long type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetLong(System.Int64)">
            <summary>
            It wants to set the value of the Long type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetLong(System.Int64@)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetLong(System.Int64)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.longListValue">
            <summary>
            Value of LongList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetLongList(System.Collections.Generic.IList{System.Int64})">
            <summary>
            It wants to set the value of the LongList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetLongList(System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            Get the value of the LongList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetLongList">
            <summary>
            Get the value of the LongList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.objectReferenceValue">
            <summary>
            Value of Object type.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.quaternionValue">
            <summary>
            Value of Quaternion type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetQuaternion(UnityEngine.Quaternion)">
            <summary>
            It wants to set the value of the Quaternion type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetQuaternion(UnityEngine.Quaternion@)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetQuaternion(UnityEngine.Quaternion)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetQuaternion">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Quaternion.identity.</returns>
        </member>
        <member name="P:Arbor.Parameter.quaternionListValue">
            <summary>
            Value of QuaternionList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetQuaternionList(System.Collections.Generic.IList{UnityEngine.Quaternion})">
            <summary>
            It wants to set the value of the QuaternionList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetQuaternionList(System.Collections.Generic.IList{UnityEngine.Quaternion}@)">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetQuaternionList">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.rectValue">
            <summary>
            Value of Rect type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRect(UnityEngine.Rect)">
            <summary>
            It wants to set the value of the Rect type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRect(UnityEngine.Rect@)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRect(UnityEngine.Rect)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRect">
            <summary>
            Get the value of the Rect type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Rect(0, 0, 0, 0).</returns>
        </member>
        <member name="P:Arbor.Parameter.rectIntValue">
            <summary>
            Value of RectInt type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRectInt(UnityEngine.RectInt)">
            <summary>
            It wants to set the value of the RectInt type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRectInt(UnityEngine.RectInt@)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRectInt(UnityEngine.RectInt)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRectInt">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns RectInt(0, 0, 0, 0).</returns>
        </member>
        <member name="P:Arbor.Parameter.rectIntListValue">
            <summary>
            Value of RectIntList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRectIntList(System.Collections.Generic.IList{UnityEngine.RectInt})">
            <summary>
            It wants to set the value of the RectIntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRectIntList(System.Collections.Generic.IList{UnityEngine.RectInt}@)">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRectIntList">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.rectListValue">
            <summary>
            Value of RectList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRectList(System.Collections.Generic.IList{UnityEngine.Rect})">
            <summary>
            It wants to set the value of the RectList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRectList(System.Collections.Generic.IList{UnityEngine.Rect}@)">
            <summary>
            Get the value of the RectList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRectList">
            <summary>
            Get the value of the RectList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.rectTransformValue">
            <summary>
            Value of RectTransform type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRectTransform(UnityEngine.RectTransform)">
            <summary>
            It wants to set the value of the RectTransform type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRectTransform(UnityEngine.RectTransform@)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRectTransform(UnityEngine.RectTransform)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.rigidbodyValue">
            <summary>
            Value of Rigidbody type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRigidbody(UnityEngine.Rigidbody)">
            <summary>
            It wants to set the value of the Rigidbody type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRigidbody(UnityEngine.Rigidbody@)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRigidbody(UnityEngine.Rigidbody)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.rigidbody2DValue">
            <summary>
            Value of Rigidbody2D type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetRigidbody2D(UnityEngine.Rigidbody2D)">
            <summary>
            It wants to set the value of the Rigidbody2D type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetRigidbody2D(UnityEngine.Rigidbody2D@)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetRigidbody2D(UnityEngine.Rigidbody2D)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.stringValue">
            <summary>
            Value of String type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetString(System.String)">
            <summary>
            It wants to set the value of the String type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetString(System.String@)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetString(System.String)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.Parameter.stringListValue">
            <summary>
            Value of StringList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetStringList(System.Collections.Generic.IList{System.String})">
            <summary>
            It wants to set the value of the StringList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetStringList(System.Collections.Generic.IList{System.String}@)">
            <summary>
            Get the value of the StringList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetStringList">
            <summary>
            Get the value of the StringList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.transformValue">
            <summary>
            Value of Transform type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetTransform(UnityEngine.Transform)">
            <summary>
            It wants to set the value of the Transform type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetTransform(UnityEngine.Transform@)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetTransform(UnityEngine.Transform)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="T:Arbor.Parameter.Type">
            <summary>
            Parameter type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Int">
            <summary>
            Int type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Bool">
            <summary>
            Bool type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.GameObject">
            <summary>
            GameObject type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Enum">
            <summary>
            Enum type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector2">
            <summary>
            Vector2 type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector3">
            <summary>
            Vector3 type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Quaternion">
            <summary>
            Quaternion type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Rect">
            <summary>
            Rect type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Bounds">
            <summary>
            Bounds type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Color">
            <summary>
            Color type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector4">
            <summary>
            Vector4 type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector2Int">
            <summary>
            Vector2Int type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector3Int">
            <summary>
            Vector3Int type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.RectInt">
            <summary>
            RectInt type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.BoundsInt">
            <summary>
            BoundsInt type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Transform">
            <summary>
            Transform type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.RectTransform">
            <summary>
            RectTransform type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Rigidbody">
            <summary>
            Rigidbody type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Rigidbody2D">
            <summary>
            Rigidbody2D type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Component">
            <summary>
            Component type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Long">
            <summary>
            Long type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.AssetObject">
            <summary>
            Object type(Asset).
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Variable">
            <summary>
            Variable type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.IntList">
            <summary>
            List&lt;int&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.LongList">
            <summary>
            List&lt;long&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.FloatList">
            <summary>
            List&lt;float&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.BoolList">
            <summary>
            List&lt;bool&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.StringList">
            <summary>
            List&lt;string&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.EnumList">
            <summary>
            List&lt;Enum&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector2List">
            <summary>
            List&lt;Vector2&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector3List">
            <summary>
            List&lt;Vector3&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.QuaternionList">
            <summary>
            List&lt;Quaternion&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.RectList">
            <summary>
            List&lt;Rect&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.BoundsList">
            <summary>
            List&lt;Bounds&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.ColorList">
            <summary>
            List&lt;Color&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector4List">
            <summary>
            List&lt;Vector4&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector2IntList">
            <summary>
            List&lt;Vector2Int&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.Vector3IntList">
            <summary>
            List&lt;Vector3Int&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.RectIntList">
            <summary>
            List&lt;RectInt&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.BoundsIntList">
            <summary>
            List&lt;BoundsInt&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.GameObjectList">
            <summary>
            List&lt;GameObject&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.ComponentList">
            <summary>
            List&lt;Component&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.AssetObjectList">
            <summary>
            List&lt;Object(Asset)&gt; type.
            </summary>
        </member>
        <member name="F:Arbor.Parameter.Type.VariableList">
            <summary>
            VariableList type.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.variableObject">
            <summary>
            Object that contains Variable.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.variableValue">
            <summary>
            Value of Variable type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVariable(System.Object)">
            <summary>
            Set Variable value
            </summary>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVariable(System.Object@)">
            <summary>
            Get the value of the Variable type.
            </summary>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVariable(System.Object)">
            <summary>
            Get Variable value
            </summary>
            <param name="defaultValue">Default value. Returned if acquisition failed.</param>
            <returns>Value of Variable. If acquisition fails, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetVariable``1(``0)">
            <summary>
            Set Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVariable``1(``0@)">
            <summary>
            Get the value of the Variable type.
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVariable``1(``0)">
            <summary>
            Get Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="defaultValue">Default value. Returned if acquisition failed.</param>
            <returns>Value of Variable. If acquisition fails, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVariable``1(``0@)">
            <summary>
            Get Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Succeeds if true, failure if false</returns>
        </member>
        <member name="P:Arbor.Parameter.variableListObject">
            <summary>
            Object that contains VariableList.
            </summary>
        </member>
        <member name="P:Arbor.Parameter.variableListValue">
            <summary>
            Value of Variable type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVariableList(System.Object)">
            <summary>
            Set VariableList value
            </summary>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVariableList(System.Object@)">
            <summary>
            Get the value of the Variable type.
            </summary>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVariableList(System.Object)">
            <summary>
            Get Variable value
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>Value of Variable. If acquisition fails, it returns null.</returns>
        </member>
        <member name="M:Arbor.Parameter.SetVariableList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Set Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVariableList``1(System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the VariableList type.
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">The value you get.</param>
            <returns>Returns true if it succeeds.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVariableList``1">
            <summary>
            Get Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <returns>Value of Variable. If acquisition fails, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector2Value">
            <summary>
            Value of Vector2 type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector2(UnityEngine.Vector2)">
            <summary>
            It wants to set the value of the Vector2 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector2(UnityEngine.Vector2@)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2(UnityEngine.Vector2)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2.zero.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector2IntValue">
            <summary>
            Value of Vector2Int type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector2Int(UnityEngine.Vector2Int)">
            <summary>
            It wants to set the value of the Vector2Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector2Int(UnityEngine.Vector2Int@)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2Int(UnityEngine.Vector2Int)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2Int">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2Int.zero.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector2IntListValue">
            <summary>
            Value of Vector2IntList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector2IntList(System.Collections.Generic.IList{UnityEngine.Vector2Int})">
            <summary>
            It wants to set the value of the Vector2IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector2IntList(System.Collections.Generic.IList{UnityEngine.Vector2Int}@)">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2IntList">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector2ListValue">
            <summary>
            Value of Vector2List type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector2List(System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            It wants to set the value of the Vector2List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector2List(System.Collections.Generic.IList{UnityEngine.Vector2}@)">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector2List">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector3Value">
            <summary>
            Value of Vector3 type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector3(UnityEngine.Vector3)">
            <summary>
            It wants to set the value of the Vector3 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector3(UnityEngine.Vector3@)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3(UnityEngine.Vector3)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3.zero.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector3IntValue">
            <summary>
            Value of Vector3Int type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector3Int(UnityEngine.Vector3Int)">
            <summary>
            It wants to set the value of the Vector3Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector3Int(UnityEngine.Vector3Int@)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3Int(UnityEngine.Vector3Int)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3Int">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3Int.zero.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector3IntListValue">
            <summary>
            Value of Vector3IntList type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector3IntList(System.Collections.Generic.IList{UnityEngine.Vector3Int})">
            <summary>
            It wants to set the value of the Vector3IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector3IntList(System.Collections.Generic.IList{UnityEngine.Vector3Int}@)">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3IntList">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector3ListValue">
            <summary>
            Value of Vector3List type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector3List(System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            It wants to set the value of the Vector3List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector3List(System.Collections.Generic.IList{UnityEngine.Vector3}@)">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector3List">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector4Value">
            <summary>
            Value of Vector4 type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector4(UnityEngine.Vector4)">
            <summary>
            It wants to set the value of the Vector4 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector4(UnityEngine.Vector4@)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector4(UnityEngine.Vector4)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector4">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns Vector4.zero.</returns>
        </member>
        <member name="P:Arbor.Parameter.vector4ListValue">
            <summary>
            Value of Vector4List type.
            </summary>
        </member>
        <member name="M:Arbor.Parameter.SetVector4List(System.Collections.Generic.IList{UnityEngine.Vector4})">
            <summary>
            It wants to set the value of the Vector4List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.Parameter.TryGetVector4List(System.Collections.Generic.IList{UnityEngine.Vector4}@)">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <param name="value">Value.</param>
            <returns>Return true if the value can be obtained.</returns>
        </member>
        <member name="M:Arbor.Parameter.GetVector4List">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="T:Arbor.ParameterContainerBase">
            <summary>
            Base class to identify the ParameterContainer
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerBase.container">
            <summary>
            It returns the ParameterContainer entity.
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerBase.defaultContainer">
            <summary>
            It returns the original ParameterContainer.
            </summary>
        </member>
        <member name="T:Arbor.ParameterContainerInternal">
            <summary>
            ParameterContainer.
            Is used by attaching to GameObject.
            </summary>
        </member>
        <member name="F:Arbor.ParameterContainerInternal._Parameters">
            <summary>List of parameters.<br/>
            <list type="bullet">
            <item><description>From the + button, select the type of parameter to create.</description></item>
            <item><description>Select the parameter and delete it by clicking the - button.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerInternal.owner">
            <summary>
            Object own this ParameterContainer
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerInternal.parameters">
            <summary>
            Get an array of parameters.
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerInternal.parameterCount">
            <summary>
             Get a count of Parameter.
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetParameterFromIndex(System.Int32)">
            <summary>
            Get Parameter from index.
            </summary>
            <param name="index">Index</param>
            <returns>Parameter</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Create(UnityEngine.GameObject,System.Type)">
            <summary>
            Create ParameterContainer.
            </summary>
            <param name="gameObject">The GameObject to add to</param>
            <param name="type">ParameterContainer type</param>
            <returns>The created ParamreterContainer</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Create(UnityEngine.GameObject,System.Type,UnityEngine.Object)">
            <summary>
            Create ParameterContainer.
            </summary>
            <param name="gameObject">The GameObject to add to</param>
            <param name="type">ParameterContainer type</param>
            <param name="owner">Owner</param>
            <returns>The created ParamreterContainer</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Start">
            <summary>
            Start method called from Unity
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.OnValidate">
            <summary>
            This function is called when the script is loaded or when the inspector value changes (this call is only in the editor)
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Refresh">
            <summary>
            Editor only
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.AddParam(System.String,Arbor.Parameter.Type)">
            <summary>
            Add a parameter.
            </summary>
            <param name="name">Name. It is changed to a unique name if the name had been duplicated.</param>
            <param name="type">Type.</param>
            <returns>It added parameters.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetParam(System.String)">
            <summary>
            Get the parameters from the name.
            </summary>
            <param name="name">Name.</param>
            <returns>Parameters. Return null if you did not exist.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetParamID(System.String)">
            <summary>
            Get the parameters ID from the name.
            </summary>
            <param name="name">Name.</param>
            <returns>Parameters ID. Return 0 if you did not exist.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetParam(System.Int32)">
            <summary>
            Get the parameters from the ID.
            </summary>
            <param name="id">ID.</param>
            <returns>Parameters. Return null if you did not exist.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.DeleteParam(Arbor.Parameter)">
            <summary>
            Delete a parameter.
            </summary>
            <param name="parameter">Parameter.</param>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.DeleteParam(System.String)">
            <summary>
            Delete the parameters by name.
            </summary>
            <param name="name">Name.</param>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.DeleteParam(System.Int32)">
            <summary>
            Delete the parameters by ID.
            </summary>
            <param name="id">ID.</param>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.MakeUniqueName(System.String)">
            <summary>
            It generates a name that does not overlap.
            </summary>
            <param name="name">The original name.</param>
            <returns>Result.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.IsParameterType(System.String,Arbor.Parameter.Type)">
            <summary>
            Determine the type of parameter.
            </summary>
            <param name="name">Name.</param>
            <param name="type">Parameter type.</param>
            <returns>Returns true if the parameter type matches type.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.IsParameterType(System.Int32,Arbor.Parameter.Type)">
            <summary>
            Determine the type of parameter.
            </summary>
            <param name="id">ID.</param>
            <param name="type">Parameter type.</param>
            <returns>Returns true if the parameter type matches type.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.FindParameterContainsVariable(Arbor.InternalVariableBase)">
            <summary>
            Acquisition of parameters VariableBase belongs.
            </summary>
            <param name="variable">VariableBase</param>
            <returns>Parameters VariableBase belongs. Return null if not.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.DestroySubComponents">
            <summary>
            Method to be used internally. In particular there is no need to call.
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.OnDestroy">
            <summary>
            This function is called when MonoBehaivour will be destroyed.
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Destroy(Arbor.ParameterContainerInternal)">
            <summary>
            Destroy ParameterContainerInternal
            </summary>
            <param name="parameterContainer">ParameterContainerInternal</param>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.Reset">
            <summary>
            Reset to default values.
            </summary>
        </member>
        <member name="P:Arbor.ParameterContainerInternal.isDeserialized">
            <summary>
            Returns whether or not deserialization has been done.
            </summary>
        </member>
        <member name="E:Arbor.ParameterContainerInternal.onAfterDeserialize">
            <summary>
            Callback after deserialization
            </summary>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObject(System.String,UnityEngine.Object)">
            <summary>
            It wants to set the value of the AssetObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObject(System.Int32,UnityEngine.Object)">
            <summary>
            It wants to set the value of the AssetObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObject(System.String,UnityEngine.Object@)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObject(System.Int32,UnityEngine.Object@)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObject(System.String,UnityEngine.Object)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObject(System.Int32,UnityEngine.Object)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObject``1(System.String,``0)">
            <summary>
            It wants to set the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObject``1(System.Int32,``0)">
            <summary>
            It wants to set the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObject``1(System.String,``0@)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObject``1(System.Int32,``0@)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObject``1(System.String,``0)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObject``1(System.Int32,``0)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObjectList``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetAssetObjectList``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObjectList``1(System.String,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetAssetObjectList``1(System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObjectList``1(System.Int32)">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetAssetObjectList``1(System.String)">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBool(System.String,System.Boolean)">
            <summary>
            It wants to set the value of the Bool type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBool(System.Int32,System.Boolean)">
            <summary>
            It wants to set the value of the Bool type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBool(System.String,System.Boolean@)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBool(System.Int32,System.Boolean@)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBool(System.String,System.Boolean)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBool(System.Int32,System.Boolean)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBool(System.String,System.Boolean@)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBool(System.Int32,System.Boolean@)">
            <summary>
            Get the value of the Bool type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoolList(System.String,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            It wants to set the value of the BoolList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoolList(System.Int32,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            It wants to set the value of the BoolList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoolList(System.String,System.Collections.Generic.IList{System.Boolean}@)">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoolList(System.Int32,System.Collections.Generic.IList{System.Boolean}@)">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoolList(System.Int32)">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoolList(System.String)">
            <summary>
            Get the value of the BoolList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBounds(System.String,UnityEngine.Bounds)">
            <summary>
            It wants to set the value of the Bounds type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBounds(System.Int32,UnityEngine.Bounds)">
            <summary>
            It wants to set the value of the Bounds type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBounds(System.String,UnityEngine.Bounds@)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBounds(System.Int32,UnityEngine.Bounds@)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.String,UnityEngine.Bounds)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.String)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns 0 bounds.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.Int32,UnityEngine.Bounds)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.Int32)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns 0 bounds.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.String,UnityEngine.Bounds@)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBounds(System.Int32,UnityEngine.Bounds@)">
            <summary>
            Get the value of the Bounds type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsInt(System.String,UnityEngine.BoundsInt)">
            <summary>
            It wants to set the value of the BoundsInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsInt(System.Int32,UnityEngine.BoundsInt)">
            <summary>
            It wants to set the value of the BoundsInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsInt(System.String,UnityEngine.BoundsInt@)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsInt(System.Int32,UnityEngine.BoundsInt@)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsInt(System.String,UnityEngine.BoundsInt)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsInt(System.String)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns BoundsInt.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsInt(System.Int32,UnityEngine.BoundsInt)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsInt(System.Int32)">
            <summary>
            Get the value of the BoundsInt type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns BoundsInt.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsIntList(System.String,System.Collections.Generic.IList{UnityEngine.BoundsInt})">
            <summary>
            It wants to set the value of the BoundsIntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsIntList(System.Int32,System.Collections.Generic.IList{UnityEngine.BoundsInt})">
            <summary>
            It wants to set the value of the BoundsIntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsIntList(System.String,System.Collections.Generic.IList{UnityEngine.BoundsInt}@)">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsIntList(System.Int32,System.Collections.Generic.IList{UnityEngine.BoundsInt}@)">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsIntList(System.Int32)">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsIntList(System.String)">
            <summary>
            Get the value of the BoundsIntList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsList(System.String,System.Collections.Generic.IList{UnityEngine.Bounds})">
            <summary>
            It wants to set the value of the BoundsList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetBoundsList(System.Int32,System.Collections.Generic.IList{UnityEngine.Bounds})">
            <summary>
            It wants to set the value of the BoundsList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsList(System.String,System.Collections.Generic.IList{UnityEngine.Bounds}@)">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetBoundsList(System.Int32,System.Collections.Generic.IList{UnityEngine.Bounds}@)">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsList(System.Int32)">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetBoundsList(System.String)">
            <summary>
            Get the value of the BoundsList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetColor(System.String,UnityEngine.Color)">
            <summary>
            It wants to set the value of the Color type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetColor(System.Int32,UnityEngine.Color)">
            <summary>
            It wants to set the value of the Color type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetColor(System.String,UnityEngine.Color@)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetColor(System.Int32,UnityEngine.Color@)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.String,UnityEngine.Color)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.String)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Color.white.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.Int32,UnityEngine.Color)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.Int32)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Color.white.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.String,UnityEngine.Color@)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColor(System.Int32,UnityEngine.Color@)">
            <summary>
            Get the value of the Color type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetColorList(System.String,System.Collections.Generic.IList{UnityEngine.Color})">
            <summary>
            It wants to set the value of the ColorList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetColorList(System.Int32,System.Collections.Generic.IList{UnityEngine.Color})">
            <summary>
            It wants to set the value of the ColorList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetColorList(System.String,System.Collections.Generic.IList{UnityEngine.Color}@)">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetColorList(System.Int32,System.Collections.Generic.IList{UnityEngine.Color}@)">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColorList(System.Int32)">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetColorList(System.String)">
            <summary>
            Get the value of the ColorList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponent(System.String,UnityEngine.Component)">
            <summary>
            It wants to set the value of the Component type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponent(System.Int32,UnityEngine.Component)">
            <summary>
            It wants to set the value of the Component type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponent(System.String,UnityEngine.Component@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponent(System.Int32,UnityEngine.Component@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponent(System.String,UnityEngine.Component)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponent(System.Int32,UnityEngine.Component)">
            <summary>
            Get the value of the Component type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponent``1(System.String,``0)">
            <summary>
            It wants to set the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponent``1(System.Int32,``0)">
            <summary>
            It wants to set the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponent``1(System.String,``0@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponent``1(System.Int32,``0@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponent``1(System.String,``0)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponent``1(System.Int32,``0)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponentList``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetComponentList``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponentList``1(System.String,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetComponentList``1(System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponentList``1(System.Int32)">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetComponentList``1(System.String)">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.IsEnum(System.Int32)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <returns>Returns true if it is an Enum type.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.IsEnum(System.String)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <returns>Returns true if it is an Enum type.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnumInt(System.String,System.Int32)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnumInt(System.Int32,System.Int32)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnumInt(System.String,System.Int32@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnumInt(System.Int32,System.Int32@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnumInt(System.String,System.Int32)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnumInt(System.Int32,System.Int32)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnum(System.String,System.Enum)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnum(System.Int32,System.Enum)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnum(System.String,System.Enum@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnum(System.Int32,System.Enum@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum(System.String,System.Enum)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum(System.Int32,System.Enum)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnum``1(System.String,``0)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnum``1(System.Int32,``0)">
            <summary>
            It wants to set the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnum``1(System.String,``0@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnum``1(System.Int32,``0@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum``1(System.String,``0)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum``1(System.String)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns default(TEnum).</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum``1(System.Int32,``0)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnum``1(System.Int32)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns default(TEnum).</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnumList``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetEnumList``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnumList``1(System.String,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetEnumList``1(System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnumList``1(System.Int32)">
            <summary>
            Get the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetEnumList``1(System.String)">
            <summary>
            Get the value of the EnumList type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetFloat(System.String,System.Single)">
            <summary>
            It wants to set the value of the Float type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetFloat(System.Int32,System.Single)">
            <summary>
            It wants to set the value of the Float type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetFloat(System.String,System.Single@)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetFloat(System.Int32,System.Single@)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloat(System.String,System.Single)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloat(System.Int32,System.Single)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloat(System.String,System.Single@)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloat(System.Int32,System.Single@)">
            <summary>
            Get the value of the Float type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetFloatList(System.String,System.Collections.Generic.IList{System.Single})">
            <summary>
            It wants to set the value of the FloatList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetFloatList(System.Int32,System.Collections.Generic.IList{System.Single})">
            <summary>
            It wants to set the value of the FloatList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetFloatList(System.String,System.Collections.Generic.IList{System.Single}@)">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetFloatList(System.Int32,System.Collections.Generic.IList{System.Single}@)">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloatList(System.Int32)">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetFloatList(System.String)">
            <summary>
            Get the value of the FloatList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetGameObject(System.String,UnityEngine.GameObject)">
            <summary>
            It wants to set the value of the GameObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetGameObject(System.Int32,UnityEngine.GameObject)">
            <summary>
            It wants to set the value of the GameObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetGameObject(System.String,UnityEngine.GameObject@)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetGameObject(System.Int32,UnityEngine.GameObject@)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObject(System.String,UnityEngine.GameObject)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObject(System.Int32,UnityEngine.GameObject)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObject(System.String,UnityEngine.GameObject@)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObject(System.Int32,UnityEngine.GameObject@)">
            <summary>
            Get the value of the GameObject type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetGameObjectList(System.String,System.Collections.Generic.IList{UnityEngine.GameObject})">
            <summary>
            It wants to set the value of the GameObjectList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetGameObjectList(System.Int32,System.Collections.Generic.IList{UnityEngine.GameObject})">
            <summary>
            It wants to set the value of the GameObjectList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetGameObjectList(System.String,System.Collections.Generic.IList{UnityEngine.GameObject}@)">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetGameObjectList(System.Int32,System.Collections.Generic.IList{UnityEngine.GameObject}@)">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObjectList(System.Int32)">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetGameObjectList(System.String)">
            <summary>
            Get the value of the GameObjectList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetInt(System.String,System.Int32)">
            <summary>
            It wants to set the value of the Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetInt(System.Int32,System.Int32)">
            <summary>
            It wants to set the value of the Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetInt(System.String,System.Int32@)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetInt(System.Int32,System.Int32@)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetInt(System.Int32,System.Int32)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetInt(System.String,System.Int32)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetInt(System.String,System.Int32@)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetInt(System.Int32,System.Int32@)">
            <summary>
            Get the value of the Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetIntList(System.String,System.Collections.Generic.IList{System.Int32})">
            <summary>
            It wants to set the value of the IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetIntList(System.Int32,System.Collections.Generic.IList{System.Int32})">
            <summary>
            It wants to set the value of the IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetIntList(System.String,System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Get the value of the IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetIntList(System.Int32,System.Collections.Generic.IList{System.Int32}@)">
            <summary>
            Get the value of the IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetIntList(System.Int32)">
            <summary>
            Get the value of the IntList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetIntList(System.String)">
            <summary>
            Get the value of the IntList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetLong(System.String,System.Int64)">
            <summary>
            It wants to set the value of the Long type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetLong(System.Int32,System.Int64)">
            <summary>
            It wants to set the value of the Long type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetLong(System.String,System.Int64@)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetLong(System.Int32,System.Int64@)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLong(System.String,System.Int64)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLong(System.Int32,System.Int64)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLong(System.String,System.Int64@)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLong(System.Int32,System.Int64@)">
            <summary>
            Get the value of the Long type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetLongList(System.String,System.Collections.Generic.IList{System.Int64})">
            <summary>
            It wants to set the value of the LongList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetLongList(System.Int32,System.Collections.Generic.IList{System.Int64})">
            <summary>
            It wants to set the value of the LongList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetLongList(System.String,System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            Get the value of the LongList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetLongList(System.Int32,System.Collections.Generic.IList{System.Int64}@)">
            <summary>
            Get the value of the LongList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLongList(System.Int32)">
            <summary>
            Get the value of the LongList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetLongList(System.String)">
            <summary>
            Get the value of the LongList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            It wants to set the value of the Quaternion type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetQuaternion(System.Int32,UnityEngine.Quaternion)">
            <summary>
            It wants to set the value of the Quaternion type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetQuaternion(System.String,UnityEngine.Quaternion@)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetQuaternion(System.Int32,UnityEngine.Quaternion@)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.String,UnityEngine.Quaternion)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.String)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Quaternion.identity.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.Int32,UnityEngine.Quaternion)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.Int32)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Quaternion.identity.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.String,UnityEngine.Quaternion@)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternion(System.Int32,UnityEngine.Quaternion@)">
            <summary>
            Get the value of the Quaternion type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetQuaternionList(System.String,System.Collections.Generic.IList{UnityEngine.Quaternion})">
            <summary>
            It wants to set the value of the QuaternionList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetQuaternionList(System.Int32,System.Collections.Generic.IList{UnityEngine.Quaternion})">
            <summary>
            It wants to set the value of the QuaternionList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetQuaternionList(System.String,System.Collections.Generic.IList{UnityEngine.Quaternion}@)">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetQuaternionList(System.Int32,System.Collections.Generic.IList{UnityEngine.Quaternion}@)">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternionList(System.Int32)">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetQuaternionList(System.String)">
            <summary>
            Get the value of the QuaternionList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRect(System.String,UnityEngine.Rect)">
            <summary>
            It wants to set the value of the Rect type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRect(System.Int32,UnityEngine.Rect)">
            <summary>
            It wants to set the value of the Rect type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRect(System.String,UnityEngine.Rect@)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRect(System.Int32,UnityEngine.Rect@)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.String,UnityEngine.Rect)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.String)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Rect(0, 0, 0, 0).</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.Int32,UnityEngine.Rect)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.Int32)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Rect(0, 0, 0, 0).</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.String,UnityEngine.Rect@)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRect(System.Int32,UnityEngine.Rect@)">
            <summary>
            Get the value of the Rect type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectInt(System.String,UnityEngine.RectInt)">
            <summary>
            It wants to set the value of the RectInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectInt(System.Int32,UnityEngine.RectInt)">
            <summary>
            It wants to set the value of the RectInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectInt(System.String,UnityEngine.RectInt@)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectInt(System.Int32,UnityEngine.RectInt@)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectInt(System.String,UnityEngine.RectInt)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectInt(System.String)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns RectInt.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectInt(System.Int32,UnityEngine.RectInt)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectInt(System.Int32)">
            <summary>
            Get the value of the RectInt type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns RectInt.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectIntList(System.String,System.Collections.Generic.IList{UnityEngine.RectInt})">
            <summary>
            It wants to set the value of the RectIntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectIntList(System.Int32,System.Collections.Generic.IList{UnityEngine.RectInt})">
            <summary>
            It wants to set the value of the RectIntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectIntList(System.String,System.Collections.Generic.IList{UnityEngine.RectInt}@)">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectIntList(System.Int32,System.Collections.Generic.IList{UnityEngine.RectInt}@)">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectIntList(System.Int32)">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectIntList(System.String)">
            <summary>
            Get the value of the RectIntList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectList(System.String,System.Collections.Generic.IList{UnityEngine.Rect})">
            <summary>
            It wants to set the value of the RectList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectList(System.Int32,System.Collections.Generic.IList{UnityEngine.Rect})">
            <summary>
            It wants to set the value of the RectList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectList(System.String,System.Collections.Generic.IList{UnityEngine.Rect}@)">
            <summary>
            Get the value of the RectList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectList(System.Int32,System.Collections.Generic.IList{UnityEngine.Rect}@)">
            <summary>
            Get the value of the RectList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectList(System.Int32)">
            <summary>
            Get the value of the RectList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectList(System.String)">
            <summary>
            Get the value of the RectList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectTransform(System.String,UnityEngine.RectTransform)">
            <summary>
            It wants to set the value of the RectTransform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRectTransform(System.Int32,UnityEngine.RectTransform)">
            <summary>
            It wants to set the value of the RectTransform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectTransform(System.String,UnityEngine.RectTransform@)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRectTransform(System.Int32,UnityEngine.RectTransform@)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectTransform(System.String,UnityEngine.RectTransform)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectTransform(System.Int32,UnityEngine.RectTransform)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectTransform(System.String,UnityEngine.RectTransform@)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRectTransform(System.Int32,UnityEngine.RectTransform@)">
            <summary>
            Get the value of the RectTransform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRigidbody(System.String,UnityEngine.Rigidbody)">
            <summary>
            It wants to set the value of the Rigidbody type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRigidbody(System.Int32,UnityEngine.Rigidbody)">
            <summary>
            It wants to set the value of the Rigidbody type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRigidbody(System.String,UnityEngine.Rigidbody@)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRigidbody(System.Int32,UnityEngine.Rigidbody@)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody(System.String,UnityEngine.Rigidbody)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody(System.Int32,UnityEngine.Rigidbody)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody(System.String,UnityEngine.Rigidbody@)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody(System.Int32,UnityEngine.Rigidbody@)">
            <summary>
            Get the value of the Rigidbody type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRigidbody2D(System.String,UnityEngine.Rigidbody2D)">
            <summary>
            It wants to set the value of the Rigidbody2D type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetRigidbody2D(System.Int32,UnityEngine.Rigidbody2D)">
            <summary>
            It wants to set the value of the Rigidbody2D type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRigidbody2D(System.String,UnityEngine.Rigidbody2D@)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetRigidbody2D(System.Int32,UnityEngine.Rigidbody2D@)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody2D(System.String,UnityEngine.Rigidbody2D)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody2D(System.Int32,UnityEngine.Rigidbody2D)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody2D(System.String,UnityEngine.Rigidbody2D@)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetRigidbody2D(System.Int32,UnityEngine.Rigidbody2D@)">
            <summary>
            Get the value of the Rigidbody2D type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetString(System.String,System.String)">
            <summary>
            It wants to set the value of the String type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetString(System.Int32,System.String)">
            <summary>
            It wants to set the value of the String type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetString(System.String,System.String@)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetString(System.Int32,System.String@)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetString(System.String,System.String)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetString(System.Int32,System.String)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetString(System.String,System.String@)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetString(System.Int32,System.String@)">
            <summary>
            Get the value of the String type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetStringList(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            It wants to set the value of the StringList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetStringList(System.Int32,System.Collections.Generic.IList{System.String})">
            <summary>
            It wants to set the value of the StringList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetStringList(System.String,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Get the value of the StringList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetStringList(System.Int32,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Get the value of the StringList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetStringList(System.Int32)">
            <summary>
            Get the value of the StringList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetStringList(System.String)">
            <summary>
            Get the value of the StringList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetTransform(System.String,UnityEngine.Transform)">
            <summary>
            It wants to set the value of the Transform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetTransform(System.Int32,UnityEngine.Transform)">
            <summary>
            It wants to set the value of the Transform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetTransform(System.String,UnityEngine.Transform@)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetTransform(System.Int32,UnityEngine.Transform@)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetTransform(System.String,UnityEngine.Transform)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetTransform(System.Int32,UnityEngine.Transform)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetTransform(System.String,UnityEngine.Transform@)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetTransform(System.Int32,UnityEngine.Transform@)">
            <summary>
            Get the value of the Transform type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariable(System.String,System.Object)">
            <summary>
            It wants to set the value of Variable.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariable(System.Int32,System.Object)">
            <summary>
            It wants to set the value of Variable.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariable(System.String,System.Object@)">
            <summary>
            Get the value of Variable.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariable(System.Int32,System.Object@)">
            <summary>
            Get the value of Variable.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariable(System.String,System.Object)">
            <summary>
            Get the value of Variable.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariable(System.Int32,System.Object)">
            <summary>
            Get the value of Variable.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariable``1(System.String,``0)">
            <summary>
            It wants to set the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariable``1(System.Int32,``0)">
            <summary>
            It wants to set the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariable``1(System.String,``0@)">
            <summary>
            Get the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariable``1(System.Int32,``0@)">
            <summary>
            Get the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariable``1(System.String,``0)">
            <summary>
            Get the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariable``1(System.Int32,``0)">
            <summary>
            Get the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariableList(System.String,System.Object)">
            <summary>
            It wants to set the value of VariableList.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariableList(System.Int32,System.Object)">
            <summary>
            It wants to set the value of VariableList.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariableList(System.String,System.Object@)">
            <summary>
            Get the value of VariableList.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariableList(System.Int32,System.Object@)">
            <summary>
            Get the value of VariableList.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariableList(System.String,System.Object)">
            <summary>
            Get the value of VariableList.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariableList(System.Int32,System.Object)">
            <summary>
            Get the value of VariableList.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariableList``1(System.String,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of Variable.
            </summary>
            <typeparam name="TVariable">Type of Variable to set</typeparam>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVariableList``1(System.Int32,System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of VariableList.
            </summary>
            <typeparam name="TVariable">Type of Variable to set</typeparam>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariableList``1(System.String,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of VariableList.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVariableList``1(System.Int32,System.Collections.Generic.IList{``0}@)">
            <summary>
            Get the value of VariableList.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariableList``1(System.String)">
            <summary>
            Get the value of VariableList.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVariableList``1(System.Int32)">
            <summary>
            Get the value of VariableList.
            </summary>
            <typeparam name="TVariable">Type of Variable to get</typeparam>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            It wants to set the value of the Vector2 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2(System.Int32,UnityEngine.Vector2)">
            <summary>
            It wants to set the value of the Vector2 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2(System.String,UnityEngine.Vector2@)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.String,UnityEngine.Vector2)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.String)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.Int32,UnityEngine.Vector2)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.Int32)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.String,UnityEngine.Vector2@)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2(System.Int32,UnityEngine.Vector2@)">
            <summary>
            Get the value of the Vector2 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2Int(System.String,UnityEngine.Vector2Int)">
            <summary>
            It wants to set the value of the Vector2Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2Int(System.Int32,UnityEngine.Vector2Int)">
            <summary>
            It wants to set the value of the Vector2Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2Int(System.String,UnityEngine.Vector2Int@)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2Int(System.Int32,UnityEngine.Vector2Int@)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2Int(System.String,UnityEngine.Vector2Int)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2Int(System.String)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2Int.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2Int(System.Int32,UnityEngine.Vector2Int)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2Int(System.Int32)">
            <summary>
            Get the value of the Vector2Int type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector2Int.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2IntList(System.String,System.Collections.Generic.IList{UnityEngine.Vector2Int})">
            <summary>
            It wants to set the value of the Vector2IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2IntList(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector2Int})">
            <summary>
            It wants to set the value of the Vector2IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2IntList(System.String,System.Collections.Generic.IList{UnityEngine.Vector2Int}@)">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2IntList(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector2Int}@)">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2IntList(System.Int32)">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2IntList(System.String)">
            <summary>
            Get the value of the Vector2IntList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2List(System.String,System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            It wants to set the value of the Vector2List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector2List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector2})">
            <summary>
            It wants to set the value of the Vector2List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2List(System.String,System.Collections.Generic.IList{UnityEngine.Vector2}@)">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector2List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector2}@)">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2List(System.Int32)">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector2List(System.String)">
            <summary>
            Get the value of the Vector2List type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            It wants to set the value of the Vector3 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3(System.Int32,UnityEngine.Vector3)">
            <summary>
            It wants to set the value of the Vector3 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3(System.String,UnityEngine.Vector3@)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3(System.Int32,UnityEngine.Vector3@)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.String,UnityEngine.Vector3)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.String)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.Int32,UnityEngine.Vector3)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.Int32)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.String,UnityEngine.Vector3@)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3(System.Int32,UnityEngine.Vector3@)">
            <summary>
            Get the value of the Vector3 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3Int(System.String,UnityEngine.Vector3Int)">
            <summary>
            It wants to set the value of the Vector3Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3Int(System.Int32,UnityEngine.Vector3Int)">
            <summary>
            It wants to set the value of the Vector3Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3Int(System.String,UnityEngine.Vector3Int@)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3Int(System.Int32,UnityEngine.Vector3Int@)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3Int(System.String,UnityEngine.Vector3Int)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3Int(System.String)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3Int.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3Int(System.Int32,UnityEngine.Vector3Int)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3Int(System.Int32)">
            <summary>
            Get the value of the Vector3Int type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector3Int.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3IntList(System.String,System.Collections.Generic.IList{UnityEngine.Vector3Int})">
            <summary>
            It wants to set the value of the Vector3IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3IntList(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector3Int})">
            <summary>
            It wants to set the value of the Vector3IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3IntList(System.String,System.Collections.Generic.IList{UnityEngine.Vector3Int}@)">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3IntList(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector3Int}@)">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3IntList(System.Int32)">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3IntList(System.String)">
            <summary>
            Get the value of the Vector3IntList type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3List(System.String,System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            It wants to set the value of the Vector3List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector3List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector3})">
            <summary>
            It wants to set the value of the Vector3List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3List(System.String,System.Collections.Generic.IList{UnityEngine.Vector3}@)">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector3List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector3}@)">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3List(System.Int32)">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector3List(System.String)">
            <summary>
            Get the value of the Vector3List type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            It wants to set the value of the Vector4 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector4(System.Int32,UnityEngine.Vector4)">
            <summary>
            It wants to set the value of the Vector4 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector4(System.String,UnityEngine.Vector4@)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector4(System.Int32,UnityEngine.Vector4@)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">The value you get.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4(System.String,UnityEngine.Vector4)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="name">Name.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4(System.String)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector4.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4(System.Int32,UnityEngine.Vector4)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="id">ID.</param>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4(System.Int32)">
            <summary>
            Get the value of the Vector4 type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns Vector4.zero.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector4List(System.String,System.Collections.Generic.IList{UnityEngine.Vector4})">
            <summary>
            It wants to set the value of the Vector4List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.SetVector4List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector4})">
            <summary>
            It wants to set the value of the Vector4List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector4List(System.String,System.Collections.Generic.IList{UnityEngine.Vector4}@)">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <param name="name">Name.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.TryGetVector4List(System.Int32,System.Collections.Generic.IList{UnityEngine.Vector4}@)">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <param name="id">ID.</param>
            <param name="value">Value.</param>
            <returns>The true when there parameters of the specified name.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4List(System.Int32)">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <param name="id">ID.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="M:Arbor.ParameterContainerInternal.GetVector4List(System.String)">
            <summary>
            Get the value of the Vector4List type.
            </summary>
            <param name="name">Name.</param>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="T:Arbor.ParameterReferenceConstrainter">
            <summary>
            A class for constraining depending on the type of the parameter referenced by ParameterReference
            </summary>
        </member>
        <member name="M:Arbor.ParameterReferenceConstrainter.#ctor(System.Action{Arbor.Parameter.Type,System.Type},System.Action{Arbor.Parameter.Type})">
            <summary>
            Constructor
            </summary>
            <param name="onChangedType">Set a callback that will be called when the type of the referenced parameter changes.</param>
            <param name="onDestroy">Set a callback that will be called when the referenced parameter is deleted.</param>
        </member>
        <member name="M:Arbor.ParameterReferenceConstrainter.Constraint(Arbor.ParameterReference,Arbor.Parameter.Type,System.Type)">
            <summary>
            Execute the constraint.
            </summary>
            <param name="parameterReference">References to parameters that depend on constraints</param>
            <param name="slotParameterType">Type to refer to when the reference type of ParameterContainer is DataSlot</param>
            <param name="slotReferenceType">The type of the value to be referenced when the reference type of ParameterContainer is DataSlot.</param>
        </member>
        <member name="M:Arbor.ParameterReferenceConstrainter.Destroy">
            <summary>
            Discard the constraint.
            </summary>
        </member>
        <member name="T:Arbor.AnyParameterReference">
            <summary>
            Parameter reference specifying type.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.AnyParameterReference.parameterType">
            <summary>
            Parameter Type
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.value">
            <summary>
            Get values according to type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.#ctor">
            <summary>
            Create AnyParameterReference
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.#ctor(System.Type)">
            <summary>
            Create AnyParameterReference
            </summary>
            <param name="parameterType">Parameter Type</param>
        </member>
        <member name="M:Arbor.AnyParameterReference.#ctor(Arbor.ParameterReference)">
            <summary>
            Create AnyParameterReference
            </summary>
            <param name="parameterReference">Copy Source ParameterReference</param>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetValue``1(``0)">
            <summary>
            Set the value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="value">The value to set.</param>
            <returns>Returns true if the value was set successfully.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.TryGetValue``1(``0@)">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <param name="outValue">The value to get.</param>
            <returns>Returns true if the value is successfully retrieved.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="T">Value type.</typeparam>
            <returns>Get the value. If you can not get returns the default (T).</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.assetObjectValue">
            <summary>
            Value of AssetObject type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetAssetObject``1(``0)">
            <summary>
            Set AssetObject value
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetAssetObject``1(``0)">
            <summary>
            Get the value of the AssetObject type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.assetObjectListValue">
            <summary>
            Value of AssetObjectList type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetAssetObjectList``1(System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to set</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetAssetObjectList``1">
            <summary>
            Get the value of the AssetObjectList type.
            </summary>
            <typeparam name="TAssetObject">Type of AssetObject to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.boolValue">
            <summary>
            Value of Bool type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.boolListValue">
            <summary>
            Value of BoolList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.boundsValue">
            <summary>
            Value of Bounds type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.boundsIntValue">
            <summary>
            Value of BoundsInt type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.boundsIntListValue">
            <summary>
            Value of BoundsIntList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.boundsListValue">
            <summary>
            Value of BoundsList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.colorValue">
            <summary>
            Value of Color type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.colorListValue">
            <summary>
            Value of ColorList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.componentValue">
            <summary>
            Value of Component type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetComponent``1(``0)">
            <summary>
            Set Component value
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetComponent``1(``0)">
            <summary>
            Get the value of the Component type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.componentListValue">
            <summary>
            Value of ComponentList type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetComponentList``1(System.Collections.Generic.IList{``0})">
            <summary>
            It wants to set the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to set</typeparam>
            <param name="value">Value.</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetComponentList``1">
            <summary>
            Get the value of the ComponentList type.
            </summary>
            <typeparam name="TComponent">Type of Component to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.enumIntValue">
            <summary>
            int Value of Enum type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.enumValue">
            <summary>
            Value of Enum type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetEnum``1(``0)">
            <summary>
            Set Enum value
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetEnum``1(``0)">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <param name="defaultValue">Default value. It is returned when there is no parameter.</param>
            <returns>The value of the parameter. If there is no parameter, it returns defaultValue.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetEnum``1">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns default(TEnum).</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetEnumList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Set EnumList value
            </summary>
            <typeparam name="TEnum">Type of enum to set</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetEnumList``1">
            <summary>
            Get the value of the Enum type.
            </summary>
            <typeparam name="TEnum">Type of enum to get</typeparam>
            <returns>The value of the parameter. If there is no parameter, it returns null.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.floatValue">
            <summary>
            Value of Float type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.floatListValue">
            <summary>
            Value of FloatList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.gameObjectValue">
            <summary>
            Value of GameObject type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.gameObjectListValue">
            <summary>
            Value of GameObjectList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.intValue">
            <summary>
            Value of Int type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.intListValue">
            <summary>
            Value of IntList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.longValue">
            <summary>
            Value of Long type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.longListValue">
            <summary>
            Value of LongList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.quaternionValue">
            <summary>
            Value of Quaternion type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.quaternionListValue">
            <summary>
            Value of QuaternionList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rectValue">
            <summary>
            Value of Rect type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rectIntValue">
            <summary>
            Value of RectInt type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rectIntListValue">
            <summary>
            Value of RectIntList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rectListValue">
            <summary>
            Value of RectList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rectTransformValue">
            <summary>
            Value of RectTransform type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rigidbodyValue">
            <summary>
            Value of Rigidbody type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.rigidbody2DValue">
            <summary>
            Value of Rigidbody2D type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.stringValue">
            <summary>
            Value of String type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.stringListValue">
            <summary>
            Value of StringList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.transformValue">
            <summary>
            Value of Transform type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.variableValue">
            <summary>
            Value of Variable type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetVariable``1(``0)">
            <summary>
            Set Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetVariable``1(``0)">
            <summary>
            Get Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="defaultValue">Default value. Returned if acquisition failed.</param>
            <returns>Value of Variable. If acquisition fails, it returns defaultValue.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.variableListValue">
            <summary>
            Value of VariableList type.
            </summary>
        </member>
        <member name="M:Arbor.AnyParameterReference.SetVariableList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Set VariableList value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.AnyParameterReference.GetVariableList``1">
            <summary>
            Get VariableList value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <returns>Value of Variable. If acquisition fails, it returns null.</returns>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector2Value">
            <summary>
            Value of Vector2 type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector2IntValue">
            <summary>
            Value of Vector2Int type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector2IntListValue">
            <summary>
            Value of Vector2IntList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector2ListValue">
            <summary>
            Value of Vector2List type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector3Value">
            <summary>
            Value of Vector3 type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector3IntValue">
            <summary>
            Value of Vector3Int type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector3IntListValue">
            <summary>
            Value of Vector3IntList type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector3ListValue">
            <summary>
            Value of Vector3List type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector4Value">
            <summary>
            Value of Vector4 type.
            </summary>
        </member>
        <member name="P:Arbor.AnyParameterReference.vector4ListValue">
            <summary>
            Value of Vector4List type.
            </summary>
        </member>
        <member name="T:Arbor.AssetObjectListParameterReference">
            <summary>
            Reference AssetObjectList parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            Since the type of AssetObjectList parameter is handled as IList&lt;T&gt;, specify it as <code>[SlotType(typeof(IList&lt;AudioClip&gt;))]</code>.
            </remarks>
        </member>
        <member name="P:Arbor.AssetObjectListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.AssetObjectParameterReference">
            <summary>
            Reference AssetObject parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.AssetObjectParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoolListParameterReference">
            <summary>
            Reference BoolList parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoolListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoolParameterReference">
            <summary>
            Reference Bool parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoolParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoundsIntListParameterReference">
            <summary>
            Reference BoundsIntList parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoundsIntListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoundsIntParameterReference">
            <summary>
            Reference BoundsInt parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoundsIntParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoundsListParameterReference">
            <summary>
            Reference BoundsList parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoundsListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.BoundsParameterReference">
            <summary>
            Reference Bounds parameters.
            </summary>
        </member>
        <member name="P:Arbor.BoundsParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ColorListParameterReference">
            <summary>
            Reference ColorList parameters.
            </summary>
        </member>
        <member name="P:Arbor.ColorListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ColorParameterReference">
            <summary>
            Reference Color parameters.
            </summary>
        </member>
        <member name="P:Arbor.ColorParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ComponentListParameterReference">
            <summary>
            Reference ComponentList parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            Since the type of ComponentList parameter is handled as IList&lt;T&gt;, specify it as <code>[SlotType(typeof(IList&lt;Rigidbody&gt;))]</code>.
            </remarks>
        </member>
        <member name="P:Arbor.ComponentListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ComponentParameterReference">
            <summary>
            Reference Component parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.ComponentParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ComponentParameterReference`1">
            <summary>
            Reference Component parameters(Generic).
            </summary>
            <typeparam name="T">Type of component to reference</typeparam>
        </member>
        <member name="P:Arbor.ComponentParameterReference`1.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Arbor.ComponentParameterReference`1.op_Explicit(Arbor.ComponentParameterReference{`0})~Arbor.ComponentParameterReference">
            <summary>
            Cast <see cref="T:Arbor.ComponentParameterReference`1"/> to <see cref="T:Arbor.ComponentParameterReference"/>.
            </summary>
            <param name="parameterReference"><see cref="T:Arbor.ComponentParameterReference`1"/></param>
            <returns>Returns the result of casting to ComponentParameterReference.</returns>
        </member>
        <member name="T:Arbor.EnumListParameterReference">
            <summary>
            Reference EnumList parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.EnumListParameterReference.GetValue``1">
            <summary>
            Get the value.
            </summary>
            <typeparam name="TEnum">enum type</typeparam>
            <returns>value. If it cannot be obtained, it returns null.</returns>
        </member>
        <member name="M:Arbor.EnumListParameterReference.SetValue``1(System.Collections.Generic.IList{``0})">
            <summary>
            Set the value.
            </summary>
            <typeparam name="TEnum">enum type</typeparam>
            <param name="value">Value to set</param>
            <returns>Returns true if it can be set.</returns>
        </member>
        <member name="T:Arbor.EnumParameterReference">
            <summary>
            Reference Enum parameters.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeConstraintAttribute" /></description></item>
            <item><description><see cref="T:Arbor.SlotTypeAttribute" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.EnumParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="P:Arbor.EnumParameterReference.intValue">
            <summary>
            int value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.FloatListParameterReference">
            <summary>
            Reference FloatList parameters.
            </summary>
        </member>
        <member name="P:Arbor.FloatListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.FloatParameterReference">
            <summary>
            Reference Float parameters.
            </summary>
        </member>
        <member name="P:Arbor.FloatParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.GameObjectListParameterReference">
            <summary>
            Reference GameObjectList parameters.
            </summary>
        </member>
        <member name="P:Arbor.GameObjectListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.GameObjectParameterReference">
            <summary>
            Reference GameObject parameters.
            </summary>
        </member>
        <member name="P:Arbor.GameObjectParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.IntListParameterReference">
            <summary>
            Reference IntList parameters.
            </summary>
        </member>
        <member name="P:Arbor.IntListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.IntParameterReference">
            <summary>
            Reference Int parameters.
            </summary>
        </member>
        <member name="P:Arbor.IntParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.LongListParameterReference">
            <summary>
            Reference LongList parameters.
            </summary>
        </member>
        <member name="P:Arbor.LongListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.LongParameterReference">
            <summary>
            Reference Long parameters.
            </summary>
        </member>
        <member name="P:Arbor.LongParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ParameterReference">
            <summary>
            Reference parameters.
            </summary>
        </member>
        <member name="F:Arbor.ParameterReference.id">
            <summary>
            ID.
            </summary>
        </member>
        <member name="F:Arbor.ParameterReference.name">
            <summary>
            Paramenter name.
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.type">
            <summary>
            Reference type of ParameterContainer
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.container">
            <summary>
            Is stored to that container.
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.referenceType">
            <summary>
            Returns the <see cref="T:Arbor.Parameter.Type"/> to be referenced.
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.parameter">
            <summary>
            Get the parameters. null if it does not exist.
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.constantContainer">
            <summary>
            Container specifying a constant
            </summary>
        </member>
        <member name="M:Arbor.ParameterReference.Disconnect">
            <summary>
            Disconnect the data slot.
            </summary>
        </member>
        <member name="P:Arbor.ParameterReference.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="M:Arbor.ParameterReference.GetConstraintAttributes">
            <summary>
            Gets the attribute that constrains the type of parameter.
            </summary>
            <returns>An array of attributes that constrain the type of parameter.</returns>
        </member>
        <member name="M:Arbor.ParameterReference.GetConstraint">
            <summary>
            Return information on type constraints.
            </summary>
            <returns>Type constraint information</returns>
        </member>
        <member name="T:Arbor.ParameterReferenceType">
            <summary>
            Reference type used in ParameterReference class
            </summary>
        </member>
        <member name="F:Arbor.ParameterReferenceType.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:Arbor.ParameterReferenceType.DataSlot">
            <summary>
            Data slot
            </summary>
        </member>
        <member name="T:Arbor.QuaternionListParameterReference">
            <summary>
            Reference QuaternionList parameters.
            </summary>
        </member>
        <member name="P:Arbor.QuaternionListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.QuaternionParameterReference">
            <summary>
            Reference Quaternion parameters.
            </summary>
        </member>
        <member name="P:Arbor.QuaternionParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.RectIntListParameterReference">
            <summary>
            Reference RectIntList parameters.
            </summary>
        </member>
        <member name="P:Arbor.RectIntListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.RectIntParameterReference">
            <summary>
            Reference RectInt parameters.
            </summary>
        </member>
        <member name="P:Arbor.RectIntParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.RectListParameterReference">
            <summary>
            Reference RectList parameters.
            </summary>
        </member>
        <member name="P:Arbor.RectListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.RectParameterReference">
            <summary>
            Reference Rect parameters.
            </summary>
        </member>
        <member name="P:Arbor.RectParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.RectTransformParameterReference">
            <summary>
            Reference RectTransform parameters.
            </summary>
        </member>
        <member name="T:Arbor.Rigidbody2DParameterReference">
            <summary>
            Reference Rigidbody2D parameters.
            </summary>
        </member>
        <member name="T:Arbor.RigidbodyParameterReference">
            <summary>
            Reference Rigidbody parameters.
            </summary>
        </member>
        <member name="T:Arbor.StringListParameterReference">
            <summary>
            Reference StringList parameters.
            </summary>
        </member>
        <member name="P:Arbor.StringListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.StringParameterReference">
            <summary>
            Reference String parameters.
            </summary>
        </member>
        <member name="P:Arbor.StringParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.TransformParameterReference">
            <summary>
            Reference Transform parameters.
            </summary>
        </member>
        <member name="T:Arbor.VariableListParameterReference">
            <summary>
            Reference VariableList parameters.
            </summary>
        </member>
        <member name="P:Arbor.VariableListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Arbor.VariableListParameterReference.SetVariableList``1(System.Collections.Generic.IList{``0})">
            <summary>
            Set Variable value
            </summary>
            <typeparam name="TVariable">VariableList value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.VariableListParameterReference.GetVariableList``1">
            <summary>
            Get VariableList value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <returns>Value of Variable. If acquisition fails, it returns null.</returns>
        </member>
        <member name="T:Arbor.VariableParameterReference">
            <summary>
            Reference Variable parameters.
            </summary>
        </member>
        <member name="P:Arbor.VariableParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="M:Arbor.VariableParameterReference.SetVariable``1(``0)">
            <summary>
            Set Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="value">Value</param>
            <returns>Return true if the value could be set.</returns>
        </member>
        <member name="M:Arbor.VariableParameterReference.GetVariable``1(``0)">
            <summary>
            Get Variable value
            </summary>
            <typeparam name="TVariable">Variable value type</typeparam>
            <param name="defaultValue">Default value. Returned if acquisition failed.</param>
            <returns>Value of Variable. If acquisition fails, it returns defaultValue.</returns>
        </member>
        <member name="T:Arbor.Vector2IntListParameterReference">
            <summary>
            Reference Vector2IntList parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector2IntListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector2IntParameterReference">
            <summary>
            Reference Vector2Int parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector2IntParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector2ListParameterReference">
            <summary>
            Reference Vector2List parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector2ListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector2ParameterReference">
            <summary>
            Reference Vector2 parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector2ParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector3IntListParameterReference">
            <summary>
            Reference Vector3IntList parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector3IntListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector3IntParameterReference">
            <summary>
            Reference Vector3Int parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector3IntParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector3ListParameterReference">
            <summary>
            Reference Vector3List parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector3ListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector3ParameterReference">
            <summary>
            Reference Vector3 parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector3ParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector4ListParameterReference">
            <summary>
            Reference Vector4List parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector4ListParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.Vector4ParameterReference">
            <summary>
            Reference Vector4 parameters.
            </summary>
        </member>
        <member name="P:Arbor.Vector4ParameterReference.value">
            <summary>
            Value of the parameter
            </summary>
        </member>
        <member name="T:Arbor.ParameterTypeMismatchException">
            <summary>
            The exception that is thrown when accessing the value of the wrong type of parameter.
            </summary>
        </member>
        <member name="M:Arbor.ParameterTypeMismatchException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Arbor.ParameterTypeMismatchException"/> class.
            </summary>
        </member>
        <member name="M:Arbor.ParameterTypeMismatchException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Arbor.ParameterTypeMismatchException"/> class with a specified error message.
            </summary>
            <param name="message">Error message string.</param>
        </member>
        <member name="M:Arbor.ParameterTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Arbor.ParameterTypeMismatchException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Arbor.ParameterUtility">
            <summary>
            Parameter related utility class
            </summary>
        </member>
        <member name="M:Arbor.ParameterUtility.GetValueType(Arbor.Parameter.Type,System.Type)">
            <summary>
            Get the value type of the parameter.
            </summary>
            <param name="type">Type of parameter</param>
            <param name="referenceType">Reference type (used for Enum, Component, Variable)</param>
            <returns>Value type of the parameter</returns>
        </member>
        <member name="M:Arbor.ParameterUtility.GetMenuName(Arbor.Parameter.Type)">
            <summary>
            Get the menu name of the parameter type.
            </summary>
            <param name="type">Parameter type</param>
            <returns>Returns the menu name</returns>
        </member>
        <member name="T:Arbor.InternalVariableBase">
            <summary>
            Base class of Variable　and VariableList.
            </summary>
        </member>
        <member name="P:Arbor.InternalVariableBase.valueType">
            <summary>
            Value type of parameter
            </summary>
        </member>
        <member name="P:Arbor.InternalVariableBase.valueObject">
            <summary>
            Value object
            </summary>
        </member>
        <member name="P:Arbor.InternalVariableBase.parameterContainer">
            <summary>
            Gets the NodeGraph.
            </summary>
        </member>
        <member name="M:Arbor.InternalVariableBase.Initialize(Arbor.ParameterContainerInternal)">
            <summary>
            For Editor.
            </summary>
            <param name="container">ParameterContainerInternal</param>
        </member>
        <member name="M:Arbor.InternalVariableBase.OnValidate">
            <summary>
            This function is called when the script is loaded or when the inspector value changes (this call is only in the editor)
            </summary>
        </member>
        <member name="T:Arbor.Variable`1">
            <summary>
            A generic class of Variable.
            </summary>
            <typeparam name="T">Type of parameter to be stored in Variable</typeparam>
        </member>
        <member name="P:Arbor.Variable`1.valueType">
            <summary>
            Value type of parameter
            </summary>
        </member>
        <member name="P:Arbor.Variable`1.valueObject">
            <summary>
            Value object
            </summary>
        </member>
        <member name="P:Arbor.Variable`1.value">
            <summary>
            Value of Variable
            </summary>
        </member>
        <member name="T:Arbor.VariableBase">
            <summary>
            Base class of Variable.
            </summary>
        </member>
        <member name="M:Arbor.VariableBase.GetDataType(System.Type)">
            <summary>
            Get the data type possessed by the Variable class.
            </summary>
            <param name="variableClassType">Variable class type</param>
            <returns>Data type</returns>
        </member>
        <member name="M:Arbor.VariableBase.Create(Arbor.ParameterContainerInternal,System.Type)">
            <summary>
            For Editor.
            </summary>
            <param name="container">ParameterContainer</param>
            <param name="type">Type</param>
            <returns>Returns the created VariableBase.</returns>
        </member>
        <member name="T:Arbor.VariableList`1">
            <summary>
            A generic class of VariableList.
            </summary>
            <typeparam name="T">Type of parameter to be stored in VariableList</typeparam>
        </member>
        <member name="P:Arbor.VariableList`1.valueType">
            <summary>
            Value type of parameter
            </summary>
        </member>
        <member name="P:Arbor.VariableList`1.valueObject">
            <summary>
            Value object
            </summary>
        </member>
        <member name="P:Arbor.VariableList`1.value">
            <summary>
            Value of Variable
            </summary>
        </member>
        <member name="T:Arbor.VariableListBase">
            <summary>
            Base class of VariableList.
            </summary>
        </member>
        <member name="M:Arbor.VariableListBase.GetDataType(System.Type)">
            <summary>
            Get the data type possessed by the Variable class.
            </summary>
            <param name="variableClassType">Variable class type</param>
            <returns>Data type</returns>
        </member>
        <member name="M:Arbor.VariableListBase.Create(Arbor.ParameterContainerInternal,System.Type)">
            <summary>
            For Editor.
            </summary>
            <param name="container">ParameterContainer</param>
            <param name="type">Type</param>
            <returns>Returns the created VariableListBase.</returns>
        </member>
        <member name="T:Arbor.Playables.IPlayableBehaviourCallbackReceiver">
            <summary>
            Interface that defines callbacks for playable behavior
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnAwake">
            <summary>
            Called when the behavior is first activated.
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnStart">
            <summary>
            Called when the behavior becomes active.
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.NeedCallUpdate">
            <summary>
            Whether you need to call OnUpdate.
            </summary>
            <returns>Returns true if OnUpdate needs to be called.</returns>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnUpdate">
            <summary>
            Called every frame while the behavior is active.
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.NeedCallLateUpdate">
            <summary>
            Whether you need to call OnLateUpdate.
            </summary>
            <returns>Returns true if OnLateUpdate needs to be called.</returns>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnLateUpdate">
            <summary>
            Called by LateUpdate while the behavior is active.
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.NeedCallFixedUpdate">
            <summary>
            Whether you need to call OnFixedUpdate.
            </summary>
            <returns>Returns true if OnFixedUpdate needs to be called.</returns>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnFixedUpdate">
            <summary>
            Called by FixedUpdate while the behavior is active.
            </summary>
        </member>
        <member name="M:Arbor.Playables.IPlayableBehaviourCallbackReceiver.OnEnd">
            <summary>
            Called when the behavior has ended.
            </summary>
        </member>
        <member name="T:Arbor.Playables.PlayableBehaviour">
            <summary>
            Playable behavior, used for behavior that is referenced from a PlayableGraph.
            </summary>
        </member>
        <member name="T:Arbor.Playables.PlayableBehaviour.SchedularUpdateTiming">
            <summary>
            Scheduler update timing
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedularUpdateTiming.Manual">
            <summary>
            Update manually. You need to call scheduler.Update() to update.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedularUpdateTiming.OnUpdate">
            <summary>
            Update with OnUpdate.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedularUpdateTiming.OnLateUpdate">
            <summary>
            Update with OnLateUpdate.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedularUpdateTiming.OnFixedUpdate">
            <summary>
            Update with OnFixedUpdate.
            </summary>
        </member>
        <member name="T:Arbor.Playables.PlayableBehaviour.SchedulerDestroyTiming">
            <summary>
            Timing to destroy the scheduler.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedulerDestroyTiming.None">
            <summary>
            Don't destroy.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedulerDestroyTiming.OnStart">
            <summary>
            Destroy at start.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.SchedulerDestroyTiming.OnEnd">
            <summary>
            Destroy at end.
            </summary>
        </member>
        <member name="T:Arbor.Playables.PlayableBehaviour.YieldTiming">
            <summary>
            Timing to wait until called
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.YieldTiming.OnUpdate">
            <summary>
            Wait for OnUpdate to be called.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.YieldTiming.OnLateUpdate">
            <summary>
            Wait for OnLateUpdate to be called.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.YieldTiming.OnFixedUpdate">
            <summary>
            Wait for OnFixedUpdate to be called.
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.schedulerUpdateTiming">
            <summary>
            Scheduler update timing
            </summary>
        </member>
        <member name="F:Arbor.Playables.PlayableBehaviour.schedulerDestroyTiming">
            <summary>
            Timing to destroy the scheduler.
            </summary>
        </member>
        <member name="P:Arbor.Playables.PlayableBehaviour.CancellationTokenOnEnd">
            <summary>
            Cancel token generated when exiting a node
            </summary>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.Yield">
            <summary>
            Gets an awaitable asynchronous task that waits until the next OnUpdate call.
            </summary>
            <returns>Returns awaitable async task</returns>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.Yield(Arbor.Playables.PlayableBehaviour.YieldTiming)">
            <summary>
            Gets an awaitable asynchronous task that waits until the next method call.
            </summary>
            <param name="timing">Timing to wait until called</param>
            <returns>Returns awaitable async task</returns>
        </member>
        <member name="P:Arbor.Playables.PlayableBehaviour.scheduler">
            <summary>
            Get scheduler.
            </summary>
        </member>
        <member name="P:Arbor.Playables.PlayableBehaviour.schedulerProgress">
            <summary>
            Get the progress of the scheduler
            </summary>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.GetOrCreateScheduler">
            <summary>
            Get the scheduler. If there is no scheduler, create one.
            </summary>
            <returns>Returns the scheduler.</returns>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.OnPreDestroy">
            <summary>
            Raises the pre destroy event.
            </summary>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.OnGraphPause">
            <summary>
            This function is called when the graph is paused.
            </summary>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviour.OnGraphResume">
            <summary>
            This function is called when the graph resumes.
            </summary>
        </member>
        <member name="T:Arbor.Playables.PlayableBehaviourExtensions">
            <summary>
            An extension class for PlayableBehaviour. Used for various method calls when creating a self-made graph by inheriting PlayableGraph.
            </summary>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.IsActive(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Whether the behavior is active.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
            <returns>Returns true if active.</returns>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.Activate(Arbor.Playables.PlayableBehaviour,System.Boolean,System.Boolean)">
            <summary>
            Set the active state of behavior.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
            <param name="active">Active state to set</param>
            <param name="changeState">Flag to change state</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.Pause(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Pause.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.Resume(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Resume.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.Stop(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Stop.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.Update(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Update.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.LateUpdate(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Update with LateUpdate.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="M:Arbor.Playables.PlayableBehaviourExtensions.FixedUpdate(Arbor.Playables.PlayableBehaviour)">
            <summary>
            Update with FixedUpdate.
            </summary>
            <param name="playableBehaviour">PlayableBehaviour</param>
        </member>
        <member name="T:Arbor.PlayerLoop.PlayerLoopHelper">
            <summary>
            PlayerLoop helper class
            </summary>
        </member>
        <member name="F:Arbor.PlayerLoop.PlayerLoopHelper.onDelayedFixedFrameRate">
            <summary>
            Called after <see cref="T:UnityEngine.PlayerLoop.FixedUpdate.ScriptRunDelayedFixedFrameRate"/>.
            </summary>
        </member>
        <member name="T:Arbor.PlayerLoop.PlayerLoopTypes">
            <summary>
            The type of Player Loop that Arbor plugs in
            </summary>
        </member>
        <member name="T:Arbor.PlayerLoop.PlayerLoopTypes.ArborDelayedFixedFrameRate">
            <summary>
            The type of PlayerLoop to insert after <see cref="T:UnityEngine.PlayerLoop.FixedUpdate.ScriptRunDelayedFixedFrameRate"/>.
            </summary>
        </member>
        <member name="T:Arbor.PlayerLoop.PlayerLoopUtility">
            <summary>
            PlayerLoop utility class
            </summary>
        </member>
        <member name="M:Arbor.PlayerLoop.PlayerLoopUtility.Insert``1(UnityEngine.LowLevel.PlayerLoopSystem,System.Boolean@,UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Insert PlayerLoop.
            </summary>
            <typeparam name="T">Insertion destination Player Loop type</typeparam>
            <param name="subSystem">PlayerLoopSystem to insert</param>
            <param name="insertAfter">Whether to insert after the type of PlayerLoop to insert</param>
            <param name="parentSystem">Insert parent PlayerLoopSystem</param>
            <returns>If it can be inserted, it returns true.</returns>
        </member>
        <member name="M:Arbor.PlayerLoop.PlayerLoopUtility.Remove``1(UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Remove PlayerLoop.
            </summary>
            <typeparam name="T">Player Loop type to remove</typeparam>
            <param name="parentSystem">The parent PlayerLoopSystem to remove</param>
            <returns>Returns true if removed.</returns>
        </member>
        <member name="M:Arbor.PlayerLoop.PlayerLoopUtility.Contains``1(UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Determine if PlayerLoop is included.
            </summary>
            <typeparam name="T">Player Loop type to judge</typeparam>
            <param name="parentSystem">Judging parent Player Loop</param>
            <returns>Returns true if it was included.</returns>
        </member>
        <member name="M:Arbor.PlayerLoop.PlayerLoopUtility.Dump(UnityEngine.LowLevel.PlayerLoopSystem@)">
            <summary>
            Dump PlayerLoopSystem.
            </summary>
            <param name="loop">PlayerLoopSystem</param>
            <returns>Returns the string of the dumped result.</returns>
        </member>
        <member name="M:Arbor.PlayerLoop.PlayerLoopUtility.Dump(UnityEngine.LowLevel.PlayerLoopSystem@,System.Text.StringBuilder)">
            <summary>
            Dump PlayerLoopSystem.
            </summary>
            <param name="loop">PlayerLoopSystem</param>
            <param name="sb">Dump destination StringBuilder</param>
        </member>
        <member name="T:Arbor.PlayState">
            <summary>
            Play state
            </summary>
        </member>
        <member name="F:Arbor.PlayState.Stopping">
            <summary>
            Stopping
            </summary>
        </member>
        <member name="F:Arbor.PlayState.Playing">
            <summary>
            Playing
            </summary>
        </member>
        <member name="F:Arbor.PlayState.Pausing">
            <summary>
            Pausing
            </summary>
        </member>
        <member name="F:Arbor.PlayState.InactivePausing">
            <summary>
            Pause because disabled during playback
            </summary>
        </member>
        <member name="T:Arbor.Pool.CollectionPool`2">
            <summary>
            <see cref="T:System.Collections.Generic.ICollection`1"/> type pool.
            </summary>
            <typeparam name="TCollection">Collection type</typeparam>
            <typeparam name="TItem">Element type</typeparam>
        </member>
        <member name="M:Arbor.Pool.CollectionPool`2.Get">
            <summary>
            Fetch an instance from the pool.
            </summary>
            <returns>The retrieved instance.</returns>
        </member>
        <member name="M:Arbor.Pool.CollectionPool`2.Get(`0@)">
            <summary>
            Fetch an instance from the pool and return a <see cref="T:Arbor.Pool.PooledObject`1"/>.
            </summary>
            <param name="value">The retrieved instance.</param>
            <returns><see cref="T:Arbor.Pool.PooledObject`1"/></returns>
            <remarks>By using <see cref = "T:Arbor.Pool.PooledObject`1" /> in the using statement, it will be returned to the pool when it goes out of scope.</remarks>
        </member>
        <member name="M:Arbor.Pool.CollectionPool`2.Release(`0)">
            <summary>
            Return the instance to the pool.
            </summary>
            <param name="toRelease">Instance to return</param>
        </member>
        <member name="T:Arbor.Pool.GenericPool`1">
            <summary>
            General purpose pool
            </summary>
            <typeparam name="T">Pool type</typeparam>
        </member>
        <member name="M:Arbor.Pool.GenericPool`1.Get">
            <summary>
            Fetch an instance from the pool.
            </summary>
            <returns>The retrieved instance.</returns>
        </member>
        <member name="M:Arbor.Pool.GenericPool`1.Get(`0@)">
            <summary>
            Fetch an instance from the pool and return a <see cref="T:Arbor.Pool.PooledObject`1"/>.
            </summary>
            <param name="value">The retrieved instance.</param>
            <returns><see cref="T:Arbor.Pool.PooledObject`1"/></returns>
            <remarks>By using <see cref = "T:Arbor.Pool.PooledObject`1" /> in the using statement, it will be returned to the pool when it goes out of scope.</remarks>
        </member>
        <member name="M:Arbor.Pool.GenericPool`1.Release(`0)">
            <summary>
            Return the instance to the pool.
            </summary>
            <param name="toRelease">Instance to return</param>
        </member>
        <member name="T:Arbor.Pool.IObjectPool`1">
            <summary>
            Interface for pooling class type instances
            </summary>
            <typeparam name="T">Pool type</typeparam>
        </member>
        <member name="P:Arbor.Pool.IObjectPool`1.CountInactive">
            <summary>
            Number of unused instances stored in this pool
            </summary>
        </member>
        <member name="M:Arbor.Pool.IObjectPool`1.Get">
            <summary>
            Fetch an instance from the pool.
            </summary>
            <returns>The retrieved instance.</returns>
        </member>
        <member name="M:Arbor.Pool.IObjectPool`1.Get(`0@)">
            <summary>
            Fetch an instance from the pool and return a <see cref="T:Arbor.Pool.PooledObject`1"/>.
            </summary>
            <param name="v">The retrieved instance.</param>
            <returns><see cref="T:Arbor.Pool.PooledObject`1"/></returns>
            <remarks>By using <see cref = "T:Arbor.Pool.PooledObject`1" /> in the using statement, it will be returned to the pool when it goes out of scope.</remarks>
        </member>
        <member name="M:Arbor.Pool.IObjectPool`1.Release(`0)">
            <summary>
            Return the instance to the pool.
            </summary>
            <param name="element">Instance to return</param>
        </member>
        <member name="M:Arbor.Pool.IObjectPool`1.Clear">
            <summary>
            Clear all pooled instances.
            </summary>
        </member>
        <member name="T:Arbor.Pool.ListPool`1">
            <summary>
            <see cref="T:System.Collections.Generic.List`1" /> type pool
            </summary>
            <typeparam name="T">Element type</typeparam>
        </member>
        <member name="T:Arbor.Pool.ObjectPool`1">
            <summary>
            Pool class type instances.
            </summary>
            <typeparam name="T">Pool type</typeparam>
        </member>
        <member name="P:Arbor.Pool.ObjectPool`1.CountAll">
            <summary>
            Total number of instances generated from this pool
            </summary>
        </member>
        <member name="P:Arbor.Pool.ObjectPool`1.CountActive">
            <summary>
            Number of instances in use retrieved from this pool
            </summary>
        </member>
        <member name="P:Arbor.Pool.ObjectPool`1.CountInactive">
            <summary>
            Number of unused instances stored in this pool
            </summary>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.#ctor(System.Func{`0},System.Action{`0},System.Action{`0},System.Action{`0},System.Boolean,System.Int32,System.Int32)">
            <summary>
            Creates a new ObjectPool instance.
            </summary>
            <param name="createFunc">Used to create a new instance when the pool is empty.</param>
            <param name="actionOnGet">Actions called when an instance is taken out of the pool</param>
            <param name="actionOnRelease">Action to be called when the instance is returned to the pool</param>
            <param name="actionOnDestroy">Action called to destroy an instance because the pool has reached its maximum size</param>
            <param name="collectionCheck">Flag to check if the instance is already stored when it is returned to the pool</param>
            <param name="defaultCapacity">The default capacity at which the stack is created</param>
            <param name="maxSize">Maximum size of the pool. When the pool reaches its maximum size, the instances you try to return to the pool will be ignored and garbage collected.</param>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.Get">
            <summary>
            Fetch an instance from the pool.
            </summary>
            <returns>The retrieved instance.</returns>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.Get(`0@)">
            <summary>
            Fetch an instance from the pool and return a <see cref="T:Arbor.Pool.PooledObject`1"/>.
            </summary>
            <param name="v">The retrieved instance.</param>
            <returns><see cref="T:Arbor.Pool.PooledObject`1"/></returns>
            <remarks>By using <see cref = "T:Arbor.Pool.PooledObject`1" /> in the using statement, it will be returned to the pool when it goes out of scope.</remarks>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.Release(`0)">
            <summary>
            Return the instance to the pool.
            </summary>
            <param name="element">Instance to return</param>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.Clear">
            <summary>
            Clear all pooled instances.
            </summary>
        </member>
        <member name="M:Arbor.Pool.ObjectPool`1.Dispose">
            <summary>
            Discard the pool.
            </summary>
        </member>
        <member name="T:Arbor.Pool.PooledObject`1">
            <summary>
            A type that manages pooled instances.
            </summary>
            <typeparam name="T">Instance type</typeparam>
            <remarks>By using it in the using statement, it will be returned to the pool when it goes out of scope.</remarks>
        </member>
        <member name="T:Arbor.ProfilerScope">
            <summary>
            Disposable helper class that manages the Profiler.BeginSample / EndSample.
            <para>Simple to use the using You can write Profiler.BeginSample / EndSample.</para>
            </summary>
        </member>
        <member name="M:Arbor.ProfilerScope.#ctor(System.String)">
            <summary>
            Create a new ProfilerScope, to start the sampling of the profiler.
            </summary>
            <param name="name">The name of the sampling</param>
        </member>
        <member name="M:Arbor.ProfilerScope.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="T:Arbor.RecalculateMode">
            <summary>
            Mode when recalculating Calculator
            </summary>
        </member>
        <member name="F:Arbor.RecalculateMode.Dirty">
            <summary>
            Monitor changes in input slots and parameters and recalculate only when necessary.
            </summary>
            <remarks>Since the members of the referenced instance are not monitored, OnCheckDirty should be defined as necessary.</remarks>
        </member>
        <member name="F:Arbor.RecalculateMode.Frame">
            <summary>
            Recalculate when the frame is updated.
            </summary>
            <remarks>If it was already calculated in the same frame, the behavior is equivalent to RecalculateMode. </remarks>
        </member>
        <member name="F:Arbor.RecalculateMode.Scope">
            <summary>
            Recalculate in CalculatorScope units.
            </summary>
            <remarks>
            If it is a Calculator call from a callback for graphs, it will be recalculated in units of Update and LateUpdate calls.<br />
            When processing MonoBehaviour messages such as Update in user scripts, they are not grouped, so they are always recalculated.<br />
            If it has already been calculated in the scope, the behavior will be the same as RecalculateMode.Dirty.
            </remarks>
        </member>
        <member name="F:Arbor.RecalculateMode.Always">
            <summary>
            Always recalculate.
            </summary>
            <remarks>Note that for calculators with multiple output slots, the calculation is recalculated in units of slot connections.</remarks>
        </member>
        <member name="T:Arbor.ClassConstraintInfo">
            <summary>
            Class constraint information
            </summary>
        </member>
        <member name="F:Arbor.ClassConstraintInfo.baseType">
            <summary>
            Base type
            </summary>
        </member>
        <member name="F:Arbor.ClassConstraintInfo.constraintAttribute">
            <summary>
            ClassTypeConstraintAttribute
            </summary>
        </member>
        <member name="F:Arbor.ClassConstraintInfo.constraintFieldInfo">
            <summary>
            FieldInfo of the field to which ClassTypeConstraintAttribute is given
            </summary>
        </member>
        <member name="F:Arbor.ClassConstraintInfo.slotTypeAttribute">
            <summary>
            SlotTypeAttribute
            </summary>
        </member>
        <member name="M:Arbor.ClassConstraintInfo.IsConstraintSatisfied(System.Type)">
            <summary>
            Determine whether the constraint is satisfied
            </summary>
            <param name="type">Determining type</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="M:Arbor.ClassConstraintInfo.GetConstraintBaseType">
            <summary>
            Get the base type of constraint.
            </summary>
            <returns>Return base type of constraint</returns>
        </member>
        <member name="M:Arbor.ClassConstraintInfo.GetConstraintTypeName">
            <summary>
            Returns the type name of the constraint.
            </summary>
            <returns>Type name of the constraint. Returns Any if there are no constraints.</returns>
        </member>
        <member name="T:Arbor.ClassTypeConstraintAttribute">
            <summary>
            A basic Attribute class that imposes a type constraint on a field.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassTypeConstraintAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassTypeConstraintAttribute.GetTypeName(System.Reflection.FieldInfo)">
            <summary>
            Returns the type name of the constraint.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Type name of constraint</returns>
        </member>
        <member name="M:Arbor.ClassTypeConstraintAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassExtendsAttribute">
            <summary>
            Attribute to restrict to classes inherited from the type specified for the field.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassExtendsAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassExtendsAttribute.#ctor(System.Type)">
            <summary>
            Create a ClassExtendsAttribute with a specified type.
            </summary>
            <param name="baseType">Basic type</param>
        </member>
        <member name="M:Arbor.ClassExtendsAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassUnityObjectAttribute">
            <summary>
            Attribute to restrict to classes inherited from UnityEngine.Object for fields.
            </summary>
            <remarks>
            Except for classes inherited from NodeBehaviour. <br/>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassUnityObjectAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassUnityObjectAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassNotUnityObjectAttribute">
            <summary>
            An attribute that restricts the field to only types that are not inherited from UnityEngine.Object.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassNotUnityObjectAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassNotUnityObjectAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassAssetObjectAttribute">
            <summary>
            Attribute to restrict to classes inherited from UnityEngine.Object(asset) for fields.
            </summary>
            <remarks>
            Except for classes inherited from Component or GameObject. <br/>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassAssetObjectAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassAssetObjectAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassComponentAttribute">
            <summary>
            Attribute to restrict to classes inherited from UnityEngine.Component for fields.
            </summary>
            <remarks>
            Except for classes inherited from NodeBehaviour. <br/>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassComponentAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassComponentAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassNotNodeBehaviourAttribute">
            <summary>
            An attribute that restricts the field to only classes that inherit from other than NodeBehaviour.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassNotNodeBehaviourAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassNotNodeBehaviourAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassScriptableObjectAttribute">
            <summary>
            Attribute to restrict to classes inherited from UnityEngine.ScriptableObject for fields.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassScriptableObjectAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassScriptableObjectAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassGenericArgumentAttribute">
            <summary>
            Attribute to restrict to field only for types specified as generic arguments.
            </summary>
            <remarks>
            Available classes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.ClassTypeReference"/></description></item>
            <item><description><see cref="T:Arbor.AnyParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.ComponentParameterReference"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotAny"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotComponent"/></description></item>
            <item><description><see cref="T:Arbor.InputSlotUnityObject"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Arbor.ClassGenericArgumentAttribute.#ctor(System.Int32)">
            <summary>
            Create a ClassExtendsAttribute with a specified type.
            </summary>
            <param name="genericArgumentIndex">Index of generic argument</param>
        </member>
        <member name="M:Arbor.ClassGenericArgumentAttribute.GetBaseType(System.Reflection.FieldInfo)">
            <summary>
            It returns the base type of constraints.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>The base type of constraints</returns>
        </member>
        <member name="M:Arbor.ClassGenericArgumentAttribute.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassEnumFieldConstraint">
            <summary>
            Attribute to restrict to enum types only for fields.
            </summary>
        </member>
        <member name="M:Arbor.ClassEnumFieldConstraint.GetTypeName(System.Reflection.FieldInfo)">
            <summary>
            Returns the type name of the constraint.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Type name of constraint</returns>
        </member>
        <member name="M:Arbor.ClassEnumFieldConstraint.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassEnumFlagsConstraint">
            <summary>
            Attribute to restrict to enum types (With System.FlagsAttribute) only for fields.
            </summary>
        </member>
        <member name="M:Arbor.ClassEnumFlagsConstraint.GetTypeName(System.Reflection.FieldInfo)">
            <summary>
            Returns the type name of the constraint.
            </summary>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Type name of constraint</returns>
        </member>
        <member name="M:Arbor.ClassEnumFlagsConstraint.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassNotStaticConstraint">
            <summary>
            Attributes that restrict fields other than static classes.
            </summary>
        </member>
        <member name="M:Arbor.ClassNotStaticConstraint.IsConstraintSatisfied(System.Type,System.Reflection.FieldInfo)">
            <summary>
            Whether the constraint is satisfied is judged.
            </summary>
            <param name="type">Determining type</param>
            <param name="fieldInfo">FieldInfo with this attribute specified</param>
            <returns>Returns true if the constraint is satisfied.</returns>
        </member>
        <member name="T:Arbor.ClassTypeReference">
            <summary>
            A reference class for serializable types.
            </summary>
            <remarks>To restrict selectable types from the Editor, specify an attribute that inherits ClassTypeConstraintAttribute.</remarks>
        </member>
        <member name="F:Arbor.ClassTypeReference.onTypeChanged">
            <summary>
            Called when changing type
            </summary>
        </member>
        <member name="P:Arbor.ClassTypeReference.type">
            <summary>
            Reference type
            </summary>
        </member>
        <member name="P:Arbor.ClassTypeReference.assemblyTypeName">
            <summary>
            Serializable format type name
            </summary>
        </member>
        <member name="M:Arbor.ClassTypeReference.#ctor">
            <summary>
            Create a ClassTypeReference without specifying anything.
            </summary>
        </member>
        <member name="M:Arbor.ClassTypeReference.#ctor(System.Type)">
            <summary>
            To create a ClassTypeReference specify the Type.
            </summary>
            <param name="type">Reference type</param>
        </member>
        <member name="M:Arbor.ClassTypeReference.IsAssignableFrom(System.Type)">
            <summary>
            It is judged whether or not it is assignable type.
            </summary>
            <param name="type">Determining type</param>
            <returns>Returns true if it is an assignable type.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Equality(Arbor.ClassTypeReference,Arbor.ClassTypeReference)">
            <summary>
            Returns whether ClassTypeReference is equal.
            </summary>
            <param name="x">ClassTypeReference</param>
            <param name="y">ClassTypeReference</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Inequality(Arbor.ClassTypeReference,Arbor.ClassTypeReference)">
            <summary>
            Returns whether ClassTypeReference are not equal.
            </summary>
            <param name="x">ClassTypeReference</param>
            <param name="y">ClassTypeReference</param>
            <returns>Returns true if it is not equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Equality(Arbor.ClassTypeReference,System.Type)">
            <summary>
            Returns whether ClassTypeReference is equal to Type.
            </summary>
            <param name="typeRef">Value of ClassTypeReference</param>
            <param name="type">Type value</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Inequality(Arbor.ClassTypeReference,System.Type)">
            <summary>
            Returns whether ClassTypeReference and Type are not equal.
            </summary>
            <param name="typeRef">Value of ClassTypeReference</param>
            <param name="type">Type value</param>
            <returns>Returns true if it is not equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Equality(System.Type,Arbor.ClassTypeReference)">
            <summary>
            Returns whether ClassTypeReference is equal to Type.
            </summary>
            <param name="type">Type value</param>
            <param name="typeRef">Value of ClassTypeReference</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Inequality(System.Type,Arbor.ClassTypeReference)">
            <summary>
            Returns whether ClassTypeReference and Type are not equal.
            </summary>
            <param name="type">Type value</param>
            <param name="typeRef">Value of ClassTypeReference</param>
            <returns>Returns true if it is not equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.Equals(Arbor.ClassTypeReference)">
            <summary>
            Returns whether this is equal to ClassTypeReference.
            </summary>
            <param name="typeRef">Value of ClassTypeReference</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.Equals(System.Type)">
            <summary>
            Returns whether this is equal to Type.
            </summary>
            <param name="type">Type value</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.Equals(System.Object)">
            <summary>
            Returns whether this is equal to object.
            </summary>
            <param name="obj">object value</param>
            <returns>Returns true if they are equal.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.GetHashCode">
            <summary>
            Get a hash code.
            </summary>
            <returns>Hash code</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Implicit(Arbor.ClassTypeReference)~System.Type">
            <summary>
            Cast from ClassTypeReference to Type.
            </summary>
            <param name="typeRef">Value of ClassTypeReference</param>
            <returns>Returns the result of casting to Type.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.op_Implicit(System.Type)~Arbor.ClassTypeReference">
            <summary>
            Cast from Type to ClassTypeReference.
            </summary>
            <param name="type">Value of Type</param>
            <returns>Returns the result of casting to ClassTypeReference.</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.ToString">
            <summary>
            Convert to a string.
            </summary>
            <returns>Converted string</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.TidyAssemblyTypeName(System.Type)">
            <summary>
            Convert Type to a serializable string.
            </summary>
            <param name="type">Type value</param>
            <returns>Serializable string</returns>
        </member>
        <member name="M:Arbor.ClassTypeReference.GetAssemblyType(System.String)">
            <summary>
            Get System.Type from string.
            </summary>
            <param name="assemblyTypeName">Type name</param>
            <returns>System.Type. If assemblyTypeName is empty or null, it returns null.</returns>
        </member>
        <member name="T:Arbor.HideTypeAttribute">
            <summary>
            Attributes to hide in the type selection popup
            </summary>
        </member>
        <member name="P:Arbor.HideTypeAttribute.forChildren">
            <summary>
            Whether to also hide inherited classes
            </summary>
        </member>
        <member name="M:Arbor.HideTypeAttribute.#ctor">
            <summary>
            Hide in type selection popup
            </summary>
        </member>
        <member name="M:Arbor.HideTypeAttribute.#ctor(System.Boolean)">
            <summary>
            Hide in type selection popup
            </summary>
            <param name="forChildren">Whether to also hide inherited classes</param>
        </member>
        <member name="T:Arbor.IOverrideConstraint">
            <summary>
            Interface overriding type constraints
            </summary>
        </member>
        <member name="P:Arbor.IOverrideConstraint.overrideConstraint">
            <summary>
            override ClassConstraintInfo
            </summary>
        </member>
        <member name="T:Arbor.MemberCache">
            <summary>
            MemberInfo cache
            </summary>
        </member>
        <member name="M:Arbor.MemberCache.Clear">
            <summary>
            Clear cache
            </summary>
        </member>
        <member name="M:Arbor.MemberCache.GetMethodInfo(System.Type,System.String,System.Type[])">
            <summary>
            Get MethodInfo.
            </summary>
            <param name="type">Type</param>
            <param name="methodName">Method name</param>
            <param name="arguments">Argument types</param>
            <returns>MethodInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="M:Arbor.MemberCache.GetMethodInfoRenamedFrom(System.Type,System.String,System.Type[])">
            <summary>
            Get the renamed MethodInfo.
            </summary>
            <param name="type">Type</param>
            <param name="methodName">Method name</param>
            <param name="arguments">Argument types</param>
            <returns>MethodInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="M:Arbor.MemberCache.GetFieldInfo(System.Type,System.String)">
            <summary>
            Get FieldInfo.
            </summary>
            <param name="type">Type</param>
            <param name="fieldName">Field name</param>
            <returns>FieldInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="M:Arbor.MemberCache.GetFieldInfoRenamedFrom(System.Type,System.String,System.Type)">
            <summary>
            Get the renamed FieldInfo.
            </summary>
            <param name="type">Type</param>
            <param name="fieldName">Field name</param>
            <param name="fieldType">Field type</param>
            <returns>FieldInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="M:Arbor.MemberCache.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Get PropertyInfo.
            </summary>
            <param name="type">Type</param>
            <param name="propertyName">Property name</param>
            <returns>PropertyInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="M:Arbor.MemberCache.GetPropertyInfoRenamedFrom(System.Type,System.String,System.Type)">
            <summary>
            Get the renamed PropertyInfo.
            </summary>
            <param name="type">Type</param>
            <param name="propertyName">Property name</param>
            <param name="propertyType">Property type</param>
            <returns>PropertyInfo to get. If there is none, it returns null.</returns>
        </member>
        <member name="T:Arbor.RenamedFromAttribute">
            <summary>
            The attribute that sets the rename.
            </summary>
        </member>
        <member name="P:Arbor.RenamedFromAttribute.oldName">
            <summary>
            Old name
            </summary>
        </member>
        <member name="M:Arbor.RenamedFromAttribute.#ctor(System.String)">
            <summary>
            Sets the rename
            </summary>
            <param name="oldName">Old name</param>
        </member>
        <member name="T:Arbor.SlotTypeAttribute">
            <summary>
            An attribute that specifies a connectable type such as <see cref="T:Arbor.ComponentParameterReference" /> or <see cref="T:Arbor.FlexibleComponent" />.
            </summary>
        </member>
        <member name="P:Arbor.SlotTypeAttribute.connectableType">
            <summary>
            Connectable type
            </summary>
        </member>
        <member name="M:Arbor.SlotTypeAttribute.#ctor(System.Type)">
            <summary>
            To create a SlotTypeAttribute by specifying the possible connection types.
            </summary>
            <param name="connectableType">Connectable type</param>
        </member>
        <member name="T:Arbor.TypeFilterAttribute">
            <summary>
            An attribute that limits the filters used in the type selection popup.
            Only specified filter can be used by attaching to the field of <see cref="T:Arbor.ClassTypeReference"/> type.
            </summary>
        </member>
        <member name="P:Arbor.TypeFilterAttribute.flags">
            <summary>
            Filter flags
            </summary>
        </member>
        <member name="M:Arbor.TypeFilterAttribute.#ctor(Arbor.TypeFilterFlags)">
            <summary>
            Limit the filters used in the type selection popup.
            </summary>
            <param name="flags">Filter to restrict</param>
        </member>
        <member name="T:Arbor.TypeFilterFlags">
            <summary>
            Filter flag displayed in the type selection popup
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.SceneObject">
            <summary>
            Object in the scene (GameObject or Component)
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.AssetObject">
            <summary>
            Objects other than the scene
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Class">
            <summary>
            Class
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Struct">
            <summary>
            Struct
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Interface">
            <summary>
            Interface
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Enum">
            <summary>
            Enum
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Primitive">
            <summary>
            Primitive (base type such as int)
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Delegate">
            <summary>
            Delegate
            </summary>
        </member>
        <member name="F:Arbor.TypeFilterFlags.Static">
            <summary>
            Static class
            </summary>
        </member>
        <member name="T:Arbor.TypeUtility">
            <summary>
            Type utility class
            </summary>
        </member>
        <member name="M:Arbor.TypeUtility.TryGetAliasName(System.Type,System.String@)">
            <summary>
            Get the alias name.
            </summary>
            <param name="type">The type to get the alias name.</param>
            <param name="typeName">Output argument of the retrieved type.</param>
            <returns>Returns true if there is an alias name.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetTypeName(System.Type)">
            <summary>
            Returns the name of the type.
            </summary>
            <param name="type">Type</param>
            <returns>型の名前</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetSlotTypeName(System.Type)">
            <summary>
            Return type name (for data slot)
            </summary>
            <param name="type">Type</param>
            <returns>Type name</returns>
        </member>
        <member name="M:Arbor.TypeUtility.TidyAssemblyTypeName(System.Type)">
            <summary>
            Convert Type to a serializable string.
            </summary>
            <param name="type">Type value</param>
            <returns>Serializable string</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetAssemblyType(System.String)">
            <summary>
            Get System.Type from string.
            </summary>
            <param name="assemblyTypeName">Type name</param>
            <returns>System.Type. If assemblyTypeName is empty or null, it returns null.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetTypesFromAssembly(System.Reflection.Assembly)">
            <summary>
            Returns the type defined in Assembly.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>An array of types defined in Assembly. Returns an empty array on failure.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetAssembly(System.Type)">
            <summary>
            Gets the Assembly in which the type is declared.
            </summary>
            <param name="type">Type</param>
            <returns>Assembly in which the type is declared</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetBaseType(System.Type)">
            <summary>
            Return base type
            </summary>
            <param name="type">Type</param>
            <returns>Base type</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsGenericType(System.Type)">
            <summary>
            Returns whether type is a generic type.
            </summary>
            <param name="type">Type</param>
            <returns>ジェネリック型であればtrueを返す</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsGenericTypeDefinition(System.Type)">
            <summary>
            Returns whether it is a generic type definition.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a generic type definition</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetGenericArguments(System.Type)">
            <summary>
            Return an array of generic type arguments.
            </summary>
            <param name="type">Type</param>
            <returns>An array of generic type arguments</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsGeneric(System.Type,System.Type)">
            <summary>
            Returns whether it is a generic type constructed from the specified generic type definition.
            </summary>
            <param name="type">Type</param>
            <param name="genericTypeDefinition">Generic type definition</param>
            <returns>Return true if type is a generic type constructed from genericTypeDefinition.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsPrimitive(System.Type)">
            <summary>
            Returns whether or not it is a primitive type.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a primitive type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsEnum(System.Type)">
            <summary>
            Returns whether or not it is an enumeration.
            </summary>
            <param name="type">Type</param>
            <returns>Return true if it is an enumeration.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsClass(System.Type)">
            <summary>
            Returns whether or not it is a class type.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a class type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsInterface(System.Type)">
            <summary>
            Returns whether or not it is a interface type.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a interface type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsValueType(System.Type)">
            <summary>
            Returns whether or not it is a value type.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a value type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsSerializable(System.Type)">
            <summary>
            Returns whether it is serializable.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if serializable.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsAbstract(System.Type)">
            <summary>
            Returns whether or not it is an abstract type.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is an abstract type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.ContainsGenericParameters(System.Type)">
            <summary>
            Returns whether or not it contains a generic type parameter.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it contains a generic type parameter.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetMemberInfo(System.Type)">
            <summary>
            Get MemberInfo
            </summary>
            <param name="type">Type</param>
            <returns>MemberInfo</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsSubclassOf(System.Type,System.Type)">
            <summary>
            Determine whether it is a derived type or not.
            </summary>
            <param name="type">Type</param>
            <param name="c">Type to be compared</param>
            <returns>Returns true if type is derived from c.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            It is judged whether or not it is an assignable type.
            </summary>
            <param name="type">型</param>
            <param name="c">Type to be compared</param>
            <returns>Returns true if an instance of c can be assigned to an instance of type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetFields(System.Type,System.Reflection.BindingFlags)">
            <summary>
            Get type fields.
            </summary>
            <param name="type">Type</param>
            <param name="bindingAttr">Flag that controls how the field is searched</param>
            <returns>Array of FieldInfo</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsSealed(System.Type)">
            <summary>
            Gets whether the class is declared sealed.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if the class is declared sealed.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsStatic(System.Type)">
            <summary>
            Get whether it is a static class.
            </summary>
            <param name="type">Type</param>
            <returns>Returns true if it is a static class.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetReferencedAssemblies(System.Reflection.Assembly)">
            <summary>
            Get Referenced Assemblies.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>Array of referenced AssemblyName</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsReferenceable(System.Reflection.Assembly,System.Reflection.Assembly)">
            <summary>
            Determine if the Assembly is referenced.
            </summary>
            <param name="assembly">Assembly</param>
            <param name="reference">Assembly to determine if it is referenced</param>
            <returns>Returns true if referenced.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsReferenceableType(System.Reflection.Assembly,System.Type)">
            <summary>
            Determine if the Assembly can reference the Type.
            </summary>
            <param name="assembly">Assembly</param>
            <param name="type">Type</param>
            <returns>Returns true if Assembly can refer to Type.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsDynamic(System.Reflection.Assembly)">
            <summary>
            Determine if the Assembly was dynamically generated.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>Returns true if the Assembly is dynamically generated.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.IsRuntimeAssembly(System.Reflection.Assembly)">
            <summary>
            Determine if it is a runtime assembly.
            </summary>
            <param name="assembly">Assembly</param>
            <returns>Returns true if it is a runtime assembly.</returns>
            <remarks>When the assembly such as UnityEditor is not referenced, it is set as the runtime assembly.</remarks>
        </member>
        <member name="M:Arbor.TypeUtility.GetAssemblies">
            <summary>
            Get the assembly loaded in the application.
            </summary>
            <returns>Returns an array of assemblies loaded into the application.</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetRuntimeAssembies">
            <summary>
            Get the runtime assemblies that references the Arbor.
            </summary>
            <returns>List of runtime assemblies</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetRuntimeTypes">
            <summary>
            Get the type that can be referenced at runtime.
            </summary>
            <returns>List of types that can be referenced at runtime</returns>
        </member>
        <member name="M:Arbor.TypeUtility.GetTypeRenamedFrom(System.String)">
            <summary>
            Get the type from the type name before renaming.
            </summary>
            <param name="typeName">Type name before renaming</param>
            <returns>Type</returns>
        </member>
        <member name="M:Arbor.TypeUtility.FindType(System.String)">
            <summary>
            Find the type from the type name that does not include the Assembly name.
            </summary>
            <param name="typeName">Type name without Assembly name</param>
            <returns>The type found. If not, returns null.</returns>
        </member>
        <member name="T:Arbor.RendererPropertyBlock">
            <summary>
            A wrapper class for the MaterialPropertyBlock assigned to the Renderer.
            </summary>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.Get(UnityEngine.Renderer,System.Int32)">
            <summary>
            Get the RendererPropertyBlock assigned to the Renderer.
            </summary>
            <param name="renderer">Renderer</param>
            <param name="materialIndex">Material index</param>
            <returns>RendererPropertyBlock</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.Get(UnityEngine.Renderer)">
            <summary>
            Get the RendererPropertyBlock assigned to the Renderer.
            </summary>
            <param name="renderer">Renderer</param>
            <returns>RendererPropertyBlock</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.Update">
            <summary>
            Update MaterialPropertyBlock from Renderer.
            </summary>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.Apply">
            <summary>
            Apply MaterialPropertyBlock to Renderer.
            </summary>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.Clear">
            <summary>
            Clear material property values.
            </summary>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.HasProperty(System.Int32)">
            <summary>
            Returns whether the PropertyBlock has a property value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>Returns true if the property value is set.</returns>
            <remarks>If you change the MaterialPropertyBlock directly, it will not be reflected. Be sure to use the Set method of RendererPropertyBlock.</remarks>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.HasProperty(System.String)">
            <summary>
            Returns whether the PropertyBlock has a property value.
            </summary>
            <param name="name">Property name</param>
            <returns>Returns true if the property value is set.</returns>
            <remarks>If you change the MaterialPropertyBlock directly, it will not be reflected. Be sure to use the Set method of RendererPropertyBlock.</remarks>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetFloat(System.Int32)">
            <summary>
            Get the float value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>float value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetFloat(System.String)">
            <summary>
            Get the float value.
            </summary>
            <param name="name">Property name</param>
            <returns>float value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetFloat(System.Int32,System.Single)">
            <summary>
            Set the float value.
            </summary>
            <param name="nameID">Property name ID</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetFloat(System.String,System.Single)">
            <summary>
            Set the float value.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetColor(System.Int32)">
            <summary>
            Get the Color value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>Color value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetColor(System.String)">
            <summary>
            Get the Color value.
            </summary>
            <param name="name">Property name</param>
            <returns>Color value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetColor(System.Int32,UnityEngine.Color)">
            <summary>
            Set the Color value.
            </summary>
            <param name="nameID">Property name ID</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetColor(System.String,UnityEngine.Color)">
            <summary>
            Set the Color value.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetMatrix(System.Int32)">
            <summary>
            Get the Matrix4x4 value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>Matrix4x4 value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetMatrix(System.String)">
            <summary>
            Get the Matrix4x4 value.
            </summary>
            <param name="name">Property name</param>
            <returns>Matrix4x4 value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
            <summary>
            Set the Matrix4x4 value.
            </summary>
            <param name="nameID">Property name ID</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetMatrix(System.String,UnityEngine.Matrix4x4)">
            <summary>
            Set the Matrix4x4 value.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTexture(System.Int32)">
            <summary>
            Get the Texture value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>Texture value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTexture(System.String)">
            <summary>
            Get the Texture value.
            </summary>
            <param name="name">Property name</param>
            <returns>Texture value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTexture(System.Int32,UnityEngine.Texture)">
            <summary>
            Set the Texture value.
            </summary>
            <param name="nameID">Property name ID</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTexture(System.String,UnityEngine.Texture)">
            <summary>
            Set the Texture value.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTextureScale(System.Int32)">
            <summary>
            Get TextureScale value./
            </summary>
            <param name="nameID">Property name ID.<br/>Specify the ID of the vector property that stores TextureScale.</param>
            <returns>TextureScale value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTextureScale(System.String)">
            <summary>
            Get TextureScale value./
            </summary>
            <param name="name">Property name.<br/>Specify the name of the vector property that stores TextureScale.</param>
            <returns>TextureScale value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTextureScale(System.Int32,UnityEngine.Vector2)">
            <summary>
            Set TextureScale value.
            </summary>
            <param name="nameID">Property name ID.<br/>Specify the ID of the vector property that stores TextureScale.</param>
            <param name="scale">Value to set</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTextureScale(System.String,UnityEngine.Vector2)">
            <summary>
            Set TextureScale value.
            </summary>
            <param name="name">Property name.<br/>Specify the name of the vector property that stores TextureScale.</param>
            <param name="scale">Value to set</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTextureOffset(System.Int32)">
            <summary>
            Get TextureOffset value./
            </summary>
            <param name="nameID">Property name ID.<br/>Specify the ID of the vector property that stores TextureOffset.</param>
            <returns>TextureOffset value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetTextureOffset(System.String)">
            <summary>
            Get TextureOffset value./
            </summary>
            <param name="name">Property name.<br/>Specify the name of the vector property that stores TextureOffset.</param>
            <returns>TextureOffset value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTextureOffset(System.Int32,UnityEngine.Vector2)">
            <summary>
            Set TextureOffset value.
            </summary>
            <param name="nameID">Property name ID.<br/>Specify the ID of the vector property that stores TextureOffset.</param>
            <param name="offset">Value to set</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetTextureOffset(System.String,UnityEngine.Vector2)">
            <summary>
            Set TextureOffset value.
            </summary>
            <param name="name">Property name.<br/>Specify the name of the vector property that stores TextureOffset.</param>
            <param name="offset">Value to set</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetVector(System.Int32)">
            <summary>
            Get the Vector4 value.
            </summary>
            <param name="nameID">Property name ID</param>
            <returns>Vector4 value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.GetVector(System.String)">
            <summary>
            Get the Vector4 value.
            </summary>
            <param name="name">Property name</param>
            <returns>Vector4 value</returns>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetVector(System.Int32,UnityEngine.Vector4)">
            <summary>
            Set the Vector4 value.
            </summary>
            <param name="nameID">Property name ID</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.RendererPropertyBlock.SetVector(System.String,UnityEngine.Vector4)">
            <summary>
            Set the Vector4 value.
            </summary>
            <param name="name">Property name</param>
            <param name="value">Value</param>
        </member>
        <member name="T:Arbor.ScriptableSingleton`1">
            <summary>
            Class that the ScriptableObject to Singleton.
            </summary>
            <typeparam name="T">A type to make a singleton. Specify the inherited type as it is.</typeparam>
        </member>
        <member name="P:Arbor.ScriptableSingleton`1.instance">
            <summary>
            To get an instance.
            </summary>
        </member>
        <member name="P:Arbor.ScriptableSingleton`1.exists">
            <summary>
            Get if the instance exists.
            </summary>
        </member>
        <member name="T:Arbor.Serialization.FieldCache">
            <summary>
            FieldInfo cache
            </summary>
        </member>
        <member name="M:Arbor.Serialization.FieldCache.GetFields(System.Type)">
            <summary>
            Get the fields defined in the type.
            </summary>
            <param name="type">Type</param>
            <returns>Fields defined in the type</returns>
        </member>
        <member name="M:Arbor.Serialization.FieldCache.Clear">
            <summary>
            Cache clear
            </summary>
        </member>
        <member name="T:Arbor.Serialization.SerializationUtility">
            <summary>
            Utility class for Unity serialization
            </summary>
        </member>
        <member name="M:Arbor.Serialization.SerializationUtility.IsSupportedArray(System.Type)">
            <summary>
            Returns whether it is an array supported.
            </summary>
            <param name="type">Determining type</param>
            <returns>Returns true if the array is supported.</returns>
        </member>
        <member name="M:Arbor.Serialization.SerializationUtility.ElementTypeOfArray(System.Type)">
            <summary>
            Returns the type of the array element.
            </summary>
            <param name="type">Array type</param>
            <returns>The type of the array element</returns>
        </member>
        <member name="M:Arbor.Serialization.SerializationUtility.ElementType(System.Type)">
            <summary>
            If it is an array it returns the type of the element.
            </summary>
            <param name="type">Type</param>
            <returns>If it is an array it returns the type of the element. Otherwise return type unchanged.</returns>
        </member>
        <member name="M:Arbor.Serialization.SerializationUtility.IsSerializableFieldType(System.Type)">
            <summary>
            Returns whether the field type is serializable.
            </summary>
            <param name="type">Field type</param>
            <returns>Returns true if serializable.</returns>
        </member>
        <member name="M:Arbor.Serialization.SerializationUtility.IsSerializableField(System.Reflection.FieldInfo)">
            <summary>
            Returns whether the field is serializable.
            </summary>
            <param name="fieldInfo">FieldInfo</param>
            <returns>Returns true if serializable.</returns>
        </member>
        <member name="T:Arbor.SerializeVersion">
            <summary>
            Perform version management with the class of Serializable attribute.
            </summary>
        </member>
        <member name="P:Arbor.SerializeVersion.version">
            <summary>
            Version number
            </summary>
        </member>
        <member name="P:Arbor.SerializeVersion.isInitialized">
            <summary>
            Initialization flag.
            </summary>
        </member>
        <member name="P:Arbor.SerializeVersion.isVersioning">
            <summary>
            Version control flag
            </summary>
        </member>
        <member name="M:Arbor.SerializeVersion.Initialize(Arbor.ISerializeVersionCallbackReceiver)">
            <summary>
            Perform initialization. Types with SerializeVersion need to call this method in the constructor.
            </summary>
            <param name="callback">Callback receiver</param>
            <returns>Returns true when initialization is performed.</returns>
        </member>
        <member name="M:Arbor.SerializeVersion.InitializeIfNecessary">
            <summary>
            Perform initialization if necessary.
            </summary>
            <returns>Returns true when initialization is performed.</returns>
        </member>
        <member name="M:Arbor.SerializeVersion.VersioningIfNesessory">
            <summary>
            If necessary to migrate to version control.
            </summary>
            <returns>Returns true if the version has been migrated.</returns>
        </member>
        <member name="M:Arbor.SerializeVersion.AfterDeserialize">
            <summary>
            Processing after deserialization. Types with SerializeVersion need to call this method from ISerializationCallbackReceiver.OnAfterDeserialize().
            </summary>
        </member>
        <member name="M:Arbor.SerializeVersion.BeforeDeserialize">
            <summary>
            Processing before serialization. Types with SerializeVersion need to call this method from ISerializationCallbackReceiver.OnBeforeDeserialize().
            </summary>
        </member>
        <member name="M:Arbor.SerializeVersion.ToString">
            <summary>
            Returns version information as a string.
            </summary>
            <returns>Version information string.</returns>
        </member>
        <member name="T:Arbor.ArborFSMInternal">
            <summary>
            Internal class of <see cref="!:Arbor.ArborFSM" />.
            To actually attach to GameObject is to use the <see cref = "!:Arbor.ArborFSM" />.
            </summary>
        </member>
        <member name="F:Arbor.ArborFSMInternal.allSendTrigger">
            <summary>
            All flags in SendTriggerFlags are valid
            </summary>
        </member>
        <member name="P:Arbor.ArborFSMInternal.fsmName">
            <summary>
            The FSM name.<br/>
            It is used for identification and retrieval when there is more than one FSM in one GameObject.
            </summary>
        </member>
        <member name="P:Arbor.ArborFSMInternal.startStateID">
            <summary>
            Gets the start state identifier.
            </summary>
            <value>
            The start state identifier.
            </value>
        </member>
        <member name="P:Arbor.ArborFSMInternal.currentState">
            <summary>
            Gets <see cref="T:Arbor.State" /> of the current.
            </summary>
            <value>
            <see cref="T:Arbor.State" /> of the current.
            </value>
        </member>
        <member name="P:Arbor.ArborFSMInternal.prevTransitionState">
            <summary>
            Prev state
            </summary>
        </member>
        <member name="P:Arbor.ArborFSMInternal.nextTransitionState">
            <summary>
            Next state
            </summary>
        </member>
        <member name="P:Arbor.ArborFSMInternal.nextState">
            <summary>
            Gets the transition reserved <see cref="T:Arbor.State" />.
            </summary>
            <value>
            Transition reserved <see cref="T:Arbor.State" />.
            </value>
        </member>
        <member name="P:Arbor.ArborFSMInternal.reservedState">
            <summary>
            Gets the transition reserved <see cref="T:Arbor.State" />.
            </summary>
            <value>
            Transition reserved <see cref="T:Arbor.State" />.
            </value>
        </member>
        <member name="P:Arbor.ArborFSMInternal.reservedStateLink">
            <summary>
            Gets the transition reserved <see cref="T:Arbor.StateLink" />.
            </summary>
            <value>
            Transition reserved <see cref="T:Arbor.StateLink" />.
            </value>
        </member>
        <member name="P:Arbor.ArborFSMInternal.stateCount">
            <summary>
             Get a count of State.
            </summary>
        </member>
        <member name="P:Arbor.ArborFSMInternal.stateLinkRerouteNodes">
            <summary>
            StateLinkRerouteNode List
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnPlayOnStart">
            <summary>
            Called when playing is started with the Start method.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Awake">
            <summary>
            This function is called when the script instance is being loaded.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnPlay">
            <summary>
            Called when you start playing.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnStop">
            <summary>
            Called when play is stopped.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnPause">
            <summary>
            Called when you pause.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnResume">
            <summary>
            Called when resuming
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnResumeOnEnable">
            <summary>
            Called when resumed with the OnEnable method.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnUpdate">
            <summary>
            Called when updating.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnLateUpdate">
            <summary>
            Called when LateUpdate.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnFixedUpdate">
            <summary>
            Called when FixedUpdate.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.IndexOfStateLinkHistory(Arbor.StateLink)">
            <summary>
            Retrieve the index in the history that transited by the specified StateLink.
            </summary>
            <param name="stateLink">StateLink to acquire</param>
            <returns>Index of history. -1 is not eligible. Larger values indicate older transitions.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.GetStateFromIndex(System.Int32)">
            <summary>
            Get State from index.
            </summary>
            <param name="index">Index</param>
            <returns>State</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.GetStateIndex(Arbor.State)">
            <summary>
            Get State index.
            </summary>
            <param name="state">State</param>
            <returns>Index. If not, it returns -1.</returns>
        </member>
        <member name="P:Arbor.ArborFSMInternal.states">
            <summary>
            Gets all of <see cref="T:Arbor.State" />.
            </summary>
            <value>
            Array of <see cref="T:Arbor.State" />.
            </value>
        </member>
        <member name="M:Arbor.ArborFSMInternal.GetStateFromID(System.Int32)">
            <summary>
            Gets <see cref="T:Arbor.State" /> from the state identifier.
            </summary>
            <param name="stateID">The state identifier.</param>
            <returns>Found <see cref = "T:Arbor.State" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.GetState(Arbor.StateLink)">
            <summary>
            Gets <see cref="T:Arbor.State" /> from the StateLink.
            </summary>
            <param name="stateLink">StateLink</param>
            <returns>Found <see cref = "T:Arbor.State" />. Returns null if not found.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateState(System.Int32,System.Boolean,System.Collections.Generic.IList{System.Type})">
            <summary>
            Create state.
            </summary>
            <param name="nodeID">Node ID</param>
            <param name="resident">Resident whether flags.</param>
            <param name="types">Type list of behaviors to add</param>
            <returns>The created state. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateState(System.Int32,System.Boolean)">
            <summary>
            Create state.
            </summary>
            <param name="nodeID">Node ID</param>
            <param name="resident">Resident whether flags.</param>
            <returns>The created state. If the node ID is not unique, return null without creating it.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateState(System.Boolean)">
            <summary>
            Create state.
            </summary>
            <param name="resident">Resident whether flags.</param>
            <returns>The created state.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateState(System.Boolean,System.Collections.Generic.IList{System.Type})">
            <summary>
            Create state.
            </summary>
            <param name="resident">Resident whether flags.</param>
            <param name="types">Type list of behaviors to add</param>
            <returns>The created state.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateState">
            <summary>
            Create state.
            </summary>
            <returns>The created state.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.FindState(System.String)">
            <summary>
            Search state by name.
            </summary>
            <param name="stateName">The name of the search state.</param>
            <returns>Found state. Return null if not.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.FindStates(System.String)">
            <summary>
            Search state by name.
            </summary>
            <param name="stateName">The name of the search state.</param>
            <returns>Array of found state.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.FindStateContainsBehaviour(Arbor.StateBehaviour)">
            <summary>
            Acquisition of states StateBehaviour belongs.
            </summary>
            <param name="behaviour">StateBehaviour</param>
            <returns>States StateBehaviour belongs. Return null if not.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.DeleteState(Arbor.State)">
            <summary>
            Delete state.
            </summary>
            <param name="state">State that you want to delete.</param>
            <returns>true if deleted</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2,System.Int32,UnityEngine.Color,UnityEngine.Vector2,System.Int32)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <param name="nodeID">Node ID</param>
            <param name="lineColor">Line Color</param>
            <param name="direction">Direction</param>
            <param name="targetID">Connection destination ID</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2,System.Int32,UnityEngine.Color)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <param name="nodeID">Node ID</param>
            <param name="lineColor">Line Color</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2,System.Int32)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <param name="nodeID">Node ID</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2,UnityEngine.Color,UnityEngine.Vector2,System.Int32)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <param name="lineColor">Line Color</param>
            <param name="direction">Direction</param>
            <param name="targetID">Connection destination ID</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2,UnityEngine.Color)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <param name="lineColor">Line Color</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.CreateStateLinkRerouteNode(UnityEngine.Vector2)">
            <summary>
            Create StateLinkRerouteNode.
            </summary>
            <param name="position">Node position</param>
            <returns>The created StateLinkRerouteNode</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnDeleteNode(Arbor.Node)">
            <summary>
            Delete node.
            </summary>
            <param name="node">The node to delete</param>
            <returns>Returns true if deleted, false otherwise.</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnReset">
            <summary>
            Reset or create callback.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.ClearTransitionCount">
            <summary>
            Clear the number of transitions between each state and StateLink to 0.
            </summary>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.State,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextState">Destination state.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.State,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextState">Destination state.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.State)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextState">Destination state.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(System.Int32,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(System.Int32,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(System.Int32)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.StateLink,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.StateLink,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.Transition(Arbor.StateLink)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.ArborFSMInternal.SendTrigger(System.String,Arbor.SendTriggerFlags)">
            <summary>
            Sending of trigger
            </summary>
            <param name="message">Message to be sent</param>
            <param name="flags">Trigger flag to send</param>
        </member>
        <member name="M:Arbor.ArborFSMInternal.SendTrigger(System.String)">
            <summary>
            Sending of trigger
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="M:Arbor.ArborFSMInternal.OnRegisterNodes">
            <summary>
            Register nodes
            </summary>
        </member>
        <member name="T:Arbor.FixedImmediateTransition">
            <summary>
            Setting the StateLink is in a state of fixing an immediate transition flags.
            This specified separately that it also specify the immediate argument of Transition method with.
            </summary>
        </member>
        <member name="P:Arbor.FixedImmediateTransition.immediate">
            <summary>
            immediate flag.
            </summary>
        </member>
        <member name="M:Arbor.FixedImmediateTransition.#ctor(System.Boolean)">
            <summary>
            FixedImmediateTransition constructor
            </summary>
            <param name="immediate">Immediate flag</param>
        </member>
        <member name="T:Arbor.FixedTransitionTiming">
            <summary>
            Setting the StateLink is in a state of fixing an immediate transition flags.
            This specified separately that it also specify the transitionTiming argument of Transition method with.
            </summary>
        </member>
        <member name="P:Arbor.FixedTransitionTiming.transitionTiming">
            <summary>
            Transition timing
            </summary>
        </member>
        <member name="M:Arbor.FixedTransitionTiming.#ctor(Arbor.TransitionTiming)">
            <summary>
            FixedTransitionTiming constructor
            </summary>
            <param name="transitionTiming">Transition timing</param>
        </member>
        <member name="T:Arbor.FlexibleSendTriggerFlags">
            <summary>
            Class to handle a flexible SendTriggerFlags type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.#ctor">
            <summary>
            FlexibleSendTriggerFlags default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.#ctor(Arbor.SendTriggerFlags)">
            <summary>
            FlexibleSendTriggerFlags constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleSendTriggerFlags constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleSendTriggerFlags constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.op_Explicit(Arbor.FlexibleSendTriggerFlags)~Arbor.SendTriggerFlags">
            <summary>
            Cast FlexibleSendTriggerFlags to SendTriggerFlags.
            </summary>
            <param name="flexible">FlexibleSendTriggerFlags</param>
            <returns>Returns the result of casting to SendTriggerFlags.</returns>
        </member>
        <member name="M:Arbor.FlexibleSendTriggerFlags.op_Explicit(Arbor.SendTriggerFlags)~Arbor.FlexibleSendTriggerFlags">
            <summary>
            Cast SendTriggerFlags to FlexibleSendTriggerFlags.
            </summary>
            <param name="value">SendTriggerFlags</param>
            <returns>Returns the result of casting to FlexibleSendTriggerFlags.</returns>
        </member>
        <member name="T:Arbor.FlexibleTransitionTiming">
            <summary>
            Class to handle a flexible TransitionTiming type reference method there is more than one.
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.#ctor">
            <summary>
            FlexibleTransitionTiming default constructor
            </summary>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.#ctor(Arbor.TransitionTiming)">
            <summary>
            FlexibleTransitionTiming constructor
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.#ctor(Arbor.AnyParameterReference)">
            <summary>
            FlexibleTransitionTiming constructor
            </summary>
            <param name="parameter">Parameter</param>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.#ctor(Arbor.InputSlotAny)">
            <summary>
            FlexibleTransitionTiming constructor
            </summary>
            <param name="slot">Slot</param>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.op_Explicit(Arbor.FlexibleTransitionTiming)~Arbor.TransitionTiming">
            <summary>
            Cast FlexibleTransitionTiming to TransitionTiming.
            </summary>
            <param name="flexible">FlexibleTransitionTiming</param>
            <returns>Returns the result of casting to TransitionTiming.</returns>
        </member>
        <member name="M:Arbor.FlexibleTransitionTiming.op_Explicit(Arbor.TransitionTiming)~Arbor.FlexibleTransitionTiming">
            <summary>
            Cast TransitionTiming to FlexibleTransitionTiming.
            </summary>
            <param name="value">TransitionTiming</param>
            <returns>Returns the result of casting to FlexibleTransitionTiming.</returns>
        </member>
        <member name="T:Arbor.SendTriggerFlags">
            <summary>
            Trigger flag to send with SendTrigger.
            </summary>
        </member>
        <member name="F:Arbor.SendTriggerFlags.CurrentState">
            <summary>
            Send to current state.
            </summary>
        </member>
        <member name="F:Arbor.SendTriggerFlags.ResidentStates">
            <summary>
            Send to resident states.
            </summary>
        </member>
        <member name="T:Arbor.State">
            <summary>
            Class that represents the state
            </summary>
        </member>
        <member name="P:Arbor.State.stateMachine">
            <summary>
            Gets the state machine.
            </summary>
        </member>
        <member name="P:Arbor.State.behaviours">
            <summary>
            Deprecated. Use behaviourCount and GetBehaviourFromIndex.
            </summary>
        </member>
        <member name="P:Arbor.State.behaviourCount">
            <summary>
            Get a count of Behavior.
            </summary>
        </member>
        <member name="P:Arbor.State.stateID">
            <summary>
            Gets the state identifier.
            </summary>
        </member>
        <member name="P:Arbor.State.resident">
            <summary>
            Gets a value indicating whether this <see cref="T:Arbor.State"/> is resident.
            </summary>
        </member>
        <member name="P:Arbor.State.breakPoint">
            <summary>
            Break point.
            When this property is true, the editor is in a pause state at the timing of entering the state.
            </summary>
        </member>
        <member name="E:Arbor.State.onChangedTransitionCount">
            <summary>
            Called when transitionCount changes
            </summary>
        </member>
        <member name="P:Arbor.State.transitionCount">
            <summary>
            Transition count.
            </summary>
        </member>
        <member name="P:Arbor.State.isActive">
            <summary>
            Returns true if it is active.
            </summary>
        </member>
        <member name="M:Arbor.State.AddBehaviour(Arbor.StateBehaviour)">
            <summary>
            Adds the behaviour.
            </summary>
            <param name="behaviour">Add StateBehaviour</param>
        </member>
        <member name="M:Arbor.State.AddBehaviour(System.Type)">
            <summary>
            Adds the behaviour.
            </summary>
            <param name="type">Type of add StateBehaviour</param>
            <returns>Added StateBehaviour</returns>
        </member>
        <member name="M:Arbor.State.AddBehaviour``1">
            <summary>
            Adds the behaviour.
            </summary>
            <typeparam name="T">Type of add StateBehaviour</typeparam>
            <returns>Added StateBehaviour</returns>
        </member>
        <member name="M:Arbor.State.InsertBehaviour(System.Int32,Arbor.StateBehaviour)">
            <summary>
            Insert the behaviour.
            </summary>
            <param name="index">Insertion destination index</param>
            <param name="behaviour">Insert StateBehaviour</param>
        </member>
        <member name="M:Arbor.State.InsertBehaviour(System.Int32,System.Type)">
            <summary>
            Insert the behaviour.
            </summary>
            <param name="index">Insertion destination index</param>
            <param name="type">Type of add StateBehaviour</param>
            <returns>Inserted StateBehaviour</returns>
        </member>
        <member name="M:Arbor.State.InsertBehaviour``1(System.Int32)">
            <summary>
            Adds the behaviour.
            </summary>
            <typeparam name="T">Type of insert StateBehaviour</typeparam>
            <param name="index">Insertion destination index</param>
            <returns>Inserted StateBehaviour</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviourFromIndex(System.Int32)">
            <summary>
            Get StateBehavior from index.
            </summary>
            <param name="index">Index</param>
            <returns>StateBehaviour</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviourObjectFromIndex(System.Int32)">
            <summary>
            Get Object of StateBehavior from index.
            </summary>
            <param name="index">Index</param>
            <returns>Object</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviour(System.Type)">
            <summary>
            Gets the behaviour.
            </summary>
            <param name="type">Type of you want to get StateBehaviour.</param>
            <returns>Found StateBehaviour. Or null if it is not.</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviour``1">
            <summary>
            Gets the behaviour.
            </summary>
            <typeparam name="T">Type of you want to get StateBehaviour.</typeparam>
            <returns>Found StateBehaviour. Or null if it is not.</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviours(System.Type)">
            <summary>
            Gets the behaviours.
            </summary>
            <param name="type">Type of you want to get StateBehaviour.</param>
            <returns>Array of found StateBehaviour.</returns>
        </member>
        <member name="M:Arbor.State.GetBehaviours``1">
            <summary>
            Gets the behaviours.
            </summary>
            <typeparam name="T">Type of you want to get StateBehaviour.</typeparam>
            <returns>Array of found StateBehaviour.</returns>
        </member>
        <member name="M:Arbor.State.Contains(Arbor.StateBehaviour)">
            <summary>
            Whether StateBehaviour are included.
            </summary>
            <param name="behaviour">Judges StateBehaviour.</param>
            <returns>Whether included are.</returns>
        </member>
        <member name="M:Arbor.State.IndexOfBehaviour(UnityEngine.Object)">
            <summary>
            Return index of StateBehaviour.
            </summary>
            <param name="behaviourObj">The StateBehaviour to locate in the State.</param>
            <returns>Returns an index if found, -1 otherwise.</returns>
        </member>
        <member name="M:Arbor.State.RemoveBehaviour(UnityEngine.Object)">
            <summary>
            I want to remove the StateBehaviour. For instance is not deleted, that you use the <see cref = "M:Arbor.StateBehaviour.Destroy" />.
            </summary>
            <param name="behaviourObj">StateBehaviour you want to remove.</param>
        </member>
        <member name="M:Arbor.State.RemoveBehaviourAt(System.Int32)">
            <summary>
            I want to remove the StateBehaviour. For instance is not deleted, that you use the <see cref = "M:Arbor.StateBehaviour.Destroy" />.
            </summary>
            <param name="behaviourIndex">Index of StateBehaviour to remove.</param>
        </member>
        <member name="M:Arbor.State.SwapBehaviour(System.Int32,System.Int32)">
            <summary>
            Swap the order of StateBehaviour.
            </summary>
            <param name="fromIndex">The swapping want index.</param>
            <param name="toIndex">Exchange destination index.</param>
        </member>
        <member name="M:Arbor.State.MoveBehaviour(System.Int32,Arbor.State,System.Int32)">
            <summary>
            Move the order of StateBehaviour.
            </summary>
            <param name="fromIndex">The moving want index.</param>
            <param name="toState">The destination State.</param>
            <param name="toIndex">The destination index.</param>
        </member>
        <member name="M:Arbor.State.SetBehaviour(System.Int32,Arbor.StateBehaviour)">
            <summary>
            Set StateBehaviour.
            </summary>
            <param name="index">Index</param>
            <param name="behaviour">StateBehaviour</param>
            <remarks>
            Note that the original StateBehaviour does not Destroy.
            If you want to add StateBehaviour, please use AddBehaviour.
            If you want to do Destroy please use DestroyBehaviour.
            </remarks>
        </member>
        <member name="M:Arbor.State.OnGraphChanged">
            <summary>
            Called when the NodeGraph to which the Node belongs has changed.
            </summary>
        </member>
        <member name="M:Arbor.State.IsContainsBehaviour(Arbor.NodeBehaviour)">
            <summary>
            Check if it contains NodeBehaviour.
            </summary>
            <param name="behaviour">Check NodeBehaviour</param>
            <returns>Returns true if it contains NodeBehaviour.</returns>
        </member>
        <member name="M:Arbor.State.DisconnectState(System.Int32)">
            <summary>
            For internal.
            </summary>
            <param name="stateID">State ID to disconnect</param>
        </member>
        <member name="M:Arbor.State.DestroyBehaviour(UnityEngine.Object)">
            <summary>
            Destroy StateBehaviour
            </summary>
            <param name="behaviourObj">The StateBehavior you want to destroy.</param>
        </member>
        <member name="M:Arbor.State.DestroyBehaviourAt(System.Int32)">
            <summary>
            Destroy StateBehaviour
            </summary>
            <param name="behaviourIndex">Index of StateBehaviour you want to destroy.</param>
        </member>
        <member name="M:Arbor.State.DestroyBehaviours">
            <summary>
            For internal.
            </summary>
        </member>
        <member name="M:Arbor.State.SendTrigger(System.String)">
            <summary>
            Send a trigger message.<see cref = "M:Arbor.StateBehaviour.OnStateTrigger(System.String)" /> is called.
            </summary>
            <param name="message">Message to be sent</param>
        </member>
        <member name="T:Arbor.StateBehaviour">
            <summary>
            Class that defines the behavior of the State. Inherited and to use.
            </summary>
            <remarks>
            Available Attributes : <br/>
            <list type="bullet">
            <item><description><see cref="T:Arbor.AddBehaviourMenu" /></description></item>
            <item><description><see cref="T:Arbor.HideBehaviour" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourTitle" /></description></item>
            <item><description><see cref="T:Arbor.BehaviourHelp" /></description></item>
            </list>
            </remarks>
        </member>
        <member name="P:Arbor.StateBehaviour.stateMachine">
            <summary>
            Gets the state machine.
            </summary>
        </member>
        <member name="P:Arbor.StateBehaviour.state">
            <summary>
            Get the State.
            </summary>
        </member>
        <member name="P:Arbor.StateBehaviour.stateID">
            <summary>
            Gets the state identifier.
            </summary>
        </member>
        <member name="F:Arbor.StateBehaviour.onBehaviourEnabledChanged">
            <summary>
            Called when behaviorEnabled changes
            </summary>
        </member>
        <member name="P:Arbor.StateBehaviour.behaviourEnabled">
            <summary>
            Gets or sets a value indicating whether [behaviour enabled].
            </summary>
            <value>
              <c>true</c> if [behaviour enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Arbor.StateBehaviour.prevTransitionState">
            <summary>
            Prev state
            </summary>
        </member>
        <member name="P:Arbor.StateBehaviour.nextTransitionState">
            <summary>
            Next state
            </summary>
        </member>
        <member name="P:Arbor.StateBehaviour.stateLinkCount">
            <summary>
            Count of StateLink.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnInitializeEnabled">
            <summary>
            Called to perform enabled initialization.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateAwake">
            <summary>
            Called when [state enter first].
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateBegin">
            <summary>
            Called when [state enter].
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateUpdate">
            <summary>
            Update of State. It is called every frame.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateLateUpdate">
            <summary>
            LateUpdate for State. Every frame, called after all updates.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateFixedUpdate">
            <summary>
            FixedUpdate for State. Frame-rate-independent Update for physics operations.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateEnd">
            <summary>
            Called when [state exit].
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnStateTrigger(System.String)">
            <summary>
            Called from SendTrigger.
            </summary>
            <param name="message">Message</param>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(System.Int32,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(System.Int32,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(System.Int32)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextStateID">State ID for the transition destination.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.State,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextState">Destination state.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.State,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextState">Destination state.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.State)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextState">Destination state.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.StateLink,Arbor.TransitionTiming)">
            <summary>
            State transition
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <param name="transitionTiming">Transition timing.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.StateLink,System.Boolean)">
            <summary>
            State transition
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <param name="immediateTransition">Whether or not to transition immediately. If false I will transition to the end of the current frame (when LateUpdate).</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Transition(Arbor.StateLink)">
            <summary>
            State transition. Timing to actually transition current frame last (when LateUpdate).
            </summary>
            <param name="nextStateLink">The destination of transition.</param>
            <returns>Whether or not the transition</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.AddBehaviour(System.Type)">
            <summary>
            Adds the behaviour.
            </summary>
            <param name="type">Type of add StateBehaviour</param>
            <returns>Added StateBehaviour</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.AddBehaviour``1">
            <summary>
            Adds the behaviour.
            </summary>
            <typeparam name="T">Type of add StateBehaviour</typeparam>
            <returns>Added StateBehaviour</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.GetBehaviour(System.Type)">
            <summary>
            Gets the behaviour.
            </summary>
            <param name="type">Type of you want to get StateBehaviour.</param>
            <returns>Found StateBehaviour. Or null if it is not.</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.GetBehaviour``1">
            <summary>
            Gets the behaviour.
            </summary>
            <typeparam name="T">Type of you want to get StateBehaviour.</typeparam>
            <returns>Found StateBehaviour. Or null if it is not.</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.GetBehaviours(System.Type)">
            <summary>
            Gets the behaviours.
            </summary>
            <param name="type">Type of you want to get StateBehaviour.</param>
            <returns>Array of found StateBehaviour.</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.GetBehaviours``1">
            <summary>
            Gets the behaviours.
            </summary>
            <typeparam name="T">Type of you want to get StateBehaviour.</typeparam>
            <returns>Array of found StateBehaviour.</returns>
        </member>
        <member name="M:Arbor.StateBehaviour.Destroy">
            <summary>
            Destroys this instance.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.GetStateLink(System.Int32)">
            <summary>
            Return StateLink of index.
            </summary>
            <param name="index">Index of StateLink</param>
            <returns>StateLink</returns>
        </member>
        <member name="E:Arbor.StateBehaviour.onStateLinkRebuilt">
            <summary>
            Called when the StateLink cache is rebuilt
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.RebuildStateLinkCache">
            <summary>
            Rebuild StateLink's cache.
            </summary>
        </member>
        <member name="M:Arbor.StateBehaviour.OnRebuildFields">
            <summary>
            It is called when reconstructing data about fields.
            </summary>
        </member>
        <member name="T:Arbor.StateLink">
            <summary>
            Class that contains a transition destination State.
            </summary>
        </member>
        <member name="F:Arbor.StateLink.name">
            <summary>
            Name. The path is displayed if you do not enter.
            </summary>
        </member>
        <member name="F:Arbor.StateLink._StateID">
            <summary>
            ID of transition destination State.
            </summary>
        </member>
        <member name="E:Arbor.StateLink.onConnectionChanged">
            <summary>
            Called when the connection changes.
            </summary>
        </member>
        <member name="P:Arbor.StateLink.stateID">
            <summary>
            ID of transition destination State.
            </summary>
        </member>
        <member name="F:Arbor.StateLink.transitionTiming">
            <summary>
            Transition timing.
            </summary>
        </member>
        <member name="P:Arbor.StateLink.immediateTransition">
            <summary>
            Whether to immediately transition.
            </summary>
        </member>
        <member name="F:Arbor.StateLink._LineColorChanged">
            <summary>
            Whether you changed the lineColor. If false, it is treated as white.
            </summary>
        </member>
        <member name="P:Arbor.StateLink.lineColorChanged">
            <summary>
            Whether you changed the lineColor. If false, it is treated as white.
            </summary>
        </member>
        <member name="F:Arbor.StateLink._LineColor">
            <summary>
            The color of the transition line.
            </summary>
        </member>
        <member name="P:Arbor.StateLink.lineColor">
            <summary>
            The color of the transition line.
            </summary>
        </member>
        <member name="F:Arbor.StateLink.onTransitionCountChanged">
            <summary>
            Called when transitionCount changes
            </summary>
        </member>
        <member name="P:Arbor.StateLink.transitionCount">
            <summary>
            Transition count.
            </summary>
        </member>
        <member name="M:Arbor.StateLink.#ctor">
            <summary>
            StateLink constructor
            </summary>
        </member>
        <member name="M:Arbor.StateLink.#ctor(Arbor.StateLink)">
            <summary>
            StateLink copy constructor.
            </summary>
            <param name="stateLink">Copy source StateLink</param>
        </member>
        <member name="T:Arbor.StateLinkRerouteNode">
            <summary>
            StateLink's reroute node
            </summary>
        </member>
        <member name="F:Arbor.StateLinkRerouteNode.kDefaultDirection">
            <summary>
            Default direction
            </summary>
        </member>
        <member name="F:Arbor.StateLinkRerouteNode.link">
            <summary>
            Transition destination state
            </summary>
        </member>
        <member name="F:Arbor.StateLinkRerouteNode.direction">
            <summary>
            Direction of line
            </summary>
        </member>
        <member name="T:Arbor.StateLinkRerouteNodeList">
            <summary>
            StateLinkRerouteNode list
            </summary>
        </member>
        <member name="T:Arbor.TransitionTiming">
            <summary>
            Transition timing.
            </summary>
        </member>
        <member name="F:Arbor.TransitionTiming.LateUpdateOverwrite">
            <summary>
            Reserve to make transition at LateUpdate. Overwrite if already reserved.
            </summary>
        </member>
        <member name="F:Arbor.TransitionTiming.Immediate">
            <summary>
            Transit immediately. Processing is completed in the transition method.
            </summary>
        </member>
        <member name="F:Arbor.TransitionTiming.LateUpdateDontOverwrite">
            <summary>
            Reserve to make transition at LateUpdate. If it is already reserved, do not overwrite it.
            </summary>
        </member>
        <member name="F:Arbor.TransitionTiming.NextUpdateOverwrite">
            <summary>
            Reserve to make transition at next Update. Overwrite if already reserved.
            </summary>
        </member>
        <member name="F:Arbor.TransitionTiming.NextUpdateDontOverwrite">
            <summary>
            Reserve to make transition at next Update. If it is already reserved, do not overwrite it.
            </summary>
        </member>
        <member name="T:Arbor.TagSelectorAttribute">
            <summary>
            Display the tag selection popup when the type of <see cref="T:Arbor.FlexibleString"/> is Constant.
            </summary>
        </member>
        <member name="T:Arbor.TaskSystem.IProgress">
            <summary>
            Interface that defines progress
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.IProgress.progress">
            <summary>
            Progress from 0f to 1f
            </summary>
        </member>
        <member name="T:Arbor.TaskSystem.TaskStatus">
            <summary>
            Task status
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TaskStatus.Idle">
            <summary>
            Idle
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TaskStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TaskStatus.Pausing">
            <summary>
            Pausing
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TaskStatus.InterruptPausing">
            <summary>
            Pausing by interrupt
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TaskStatus.Complete">
            <summary>
            Completion
            </summary>
        </member>
        <member name="T:Arbor.TaskSystem.Task">
            <summary>
            The class to process. The processing to be performed is inherited and implemented. <br/> Register in <see cref="T:Arbor.TaskSystem.TaskScheduler"/> and execute sequentially.
            </summary>
            <remarks>
            Unlike asynchronous tasks, it is a simple system that sequentially executes queued tasks.
            </remarks>
        </member>
        <member name="E:Arbor.TaskSystem.Task.onComplete">
            <summary>
            Called when completed
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.Task.taskStatus">
            <summary>
            Task status
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.Task.scheduler">
            <summary>
            Returns the registered Task Scheduler.
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.Task.progress">
            <summary>
            Progress from 0f to 1f
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.Task.pooled">
            <summary>
            Whether it is pooled
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Init">
            <summary>
            Method called when initializing
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnEnter">
            <summary>
            Method called when execution starts
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnUpdate">
            <summary>
            Method called when updated
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnInterruptPause">
            <summary>
            Method called when paused by interrupt
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnInterruptResume">
            <summary>
            Method called when resuming from pause due to interrupt
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnExit">
            <summary>
            Method called when exiting a task
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnPause">
            <summary>
            Method called when paused
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnResume">
            <summary>
            Method called when resuming from pause
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.OnComplete">
            <summary>
            Method called when the task is completed
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Complete">
            <summary>
            Complete the task.
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Dispose">
            <summary>
            Dispose of it.
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Update">
            <summary>
            Update the task.
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Pause">
            <summary>
            Pause the task.
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task.Resume">
            <summary>
            Resume the task from pause.
            </summary>
        </member>
        <member name="T:Arbor.TaskSystem.Task`1">
            <summary>
            Task class corresponding to the pool
            </summary>
            <typeparam name="T">Type to implement</typeparam>
        </member>
        <member name="M:Arbor.TaskSystem.Task`1.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task`1.Init">
            <summary>
            Method called when initializing
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.Task`1.GetPooled">
            <summary>
            Get a task instance from the pool
            </summary>
            <returns>Task instance</returns>
        </member>
        <member name="M:Arbor.TaskSystem.Task`1.Dispose">
            <summary>
            Dispose of it.
            </summary>
        </member>
        <member name="T:Arbor.TaskSystem.TaskScheduler">
            <summary>
            Scheduler to execute tasks sequentially
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.Init">
            <summary>
            Method called when initializing
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.TaskScheduler.progress">
            <summary>
            Progress from 0f to 1f
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.Add(Arbor.TaskSystem.Task)">
            <summary>
            Add a task.
            </summary>
            <param name="task">Tasks to add</param>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.Interrupt(Arbor.TaskSystem.Task)">
            <summary>
            Interrupt the task.
            </summary>
            <param name="task">Task to interrupt</param>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.Play">
            <summary>
            Start playing
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.Stop">
            <summary>
            Playback stops.
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.OnEnter">
            <summary>
            Method called when execution starts
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.OnUpdate">
            <summary>
            Method called when updated
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TaskScheduler.ToString">
            <summary>
            Convert to a character string that represents the execution status of the task.
            </summary>
            <returns>Returns a string that represents the execution status of the task.</returns>
        </member>
        <member name="T:Arbor.TaskSystem.TimerTaskBase`1">
            <summary>
            The base class of a task that processes by time.
            </summary>
            <typeparam name="T">Type to implement</typeparam>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.GetPooled(Arbor.TimeType,System.Single)">
            <summary>
            Get a task instance from the pool
            </summary>
            <param name="timeType">Time type</param>
            <param name="duration">Time to process</param>
            <returns>Task instance</returns>
        </member>
        <member name="E:Arbor.TaskSystem.TimerTaskBase`1.onProgress">
            <summary>
            Called when progress changes
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.TimerTaskBase`1.progress">
            <summary>
            Progress from 0f to 1f
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.TimerTaskBase`1.timeType">
            <summary>
            Time type
            </summary>
        </member>
        <member name="P:Arbor.TaskSystem.TimerTaskBase`1.duration">
            <summary>
            Time to process
            </summary>
        </member>
        <member name="F:Arbor.TaskSystem.TimerTaskBase`1.interuptPause">
            <summary>
            Whether to pause the timer by interrupt
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.Init">
            <summary>
            Method called when initializing
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnEnter">
            <summary>
            Method called when execution starts
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnProgress(System.Single)">
            <summary>
            Perform processing according to progress
            </summary>
            <param name="progress">Progress from 0f to 1f</param>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnUpdate">
            <summary>
            Method called when updated
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnExit">
            <summary>
            Method called when exiting a task
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnInterruptPause">
            <summary>
            Method called when paused by interrupt
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnInterruptResume">
            <summary>
            Method called when resuming from pause due to interrupt
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnPause">
            <summary>
            Method called when paused
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.OnResume">
            <summary>
            Method called when resuming from pause
            </summary>
        </member>
        <member name="M:Arbor.TaskSystem.TimerTaskBase`1.ToString">
            <summary>
            Convert to a character string that represents the execution status of the task.
            </summary>
            <returns>Returns a string that represents the execution status of the task.</returns>
        </member>
        <member name="T:Arbor.TaskSystem.TimerTask">
            <summary>
            Tasks that wait for the passage of time
            </summary>
        </member>
        <member name="T:Arbor.Threading.Tasks.IActionDispatcher">
            <summary>
            An interface that defines a dispatcher for an action.
            </summary>
        </member>
        <member name="M:Arbor.Threading.Tasks.IActionDispatcher.Register(System.Action)">
            <summary>
            Register the action.
            </summary>
            <param name="continuation">Action to be called</param>
        </member>
        <member name="T:Arbor.Threading.Tasks.YieldAwaitable">
            <summary>
            await可能な呼び出し待機用の構造体
            </summary>
        </member>
        <member name="F:Arbor.Threading.Tasks.YieldAwaitable.dispatcher">
            <summary>
            Action dispatcher
            </summary>
        </member>
        <member name="F:Arbor.Threading.Tasks.YieldAwaitable.cancellationToken">
            <summary>
            Cancellation token
            </summary>
        </member>
        <member name="M:Arbor.Threading.Tasks.YieldAwaitable.GetAwaiter">
            <summary>
            Get awaiter to wait.
            </summary>
            <returns>Instance of awaiter</returns>
        </member>
        <member name="T:Arbor.Threading.Tasks.YieldAwaitable.Awaiter">
            <summary>
            A structure for waiting for an asynchronous task to complete
            </summary>
        </member>
        <member name="P:Arbor.Threading.Tasks.YieldAwaitable.Awaiter.IsCompleted">
            <summary>
            Gets whether the asynchronous task has completed.
            </summary>
        </member>
        <member name="M:Arbor.Threading.Tasks.YieldAwaitable.Awaiter.GetResult">
            <summary>
            End the wait for the completion of the asynchronous task.
            </summary>
        </member>
        <member name="M:Arbor.Threading.Tasks.YieldAwaitable.Awaiter.OnCompleted(System.Action)">
            <summary>
            Set the action to be taken when you stop waiting for the asynchronous task to complete.
            </summary>
            <param name="continuation">The action to take when the wait operation completes.</param>
        </member>
        <member name="M:Arbor.Threading.Tasks.YieldAwaitable.Awaiter.UnsafeOnCompleted(System.Action)">
            <summary>
            Schedule a continuation operation to the asynchronous task associated with this awaiter.
            </summary>
            <param name="continuation">The action to call when the wait operation is complete.</param>
        </member>
        <member name="T:Arbor.Timer">
            <summary>
            A class that measures elapsed time.
            </summary>
        </member>
        <member name="T:Arbor.Timer.PlayState">
            <summary>
            Playback state
            </summary>
        </member>
        <member name="F:Arbor.Timer.PlayState.Stopping">
            <summary>
            Stopping
            </summary>
        </member>
        <member name="F:Arbor.Timer.PlayState.Playing">
            <summary>
            Playing
            </summary>
        </member>
        <member name="F:Arbor.Timer.PlayState.Pausing">
            <summary>
            Pausing
            </summary>
        </member>
        <member name="P:Arbor.Timer.playState">
            <summary>
            Get the playback state.
            </summary>
        </member>
        <member name="P:Arbor.Timer.timeType">
            <summary>
            Time type.
            </summary>
        </member>
        <member name="P:Arbor.Timer.elapsedTime">
            <summary>
            Get the elapsed time.
            </summary>
        </member>
        <member name="M:Arbor.Timer.Start">
            <summary>
            Start measuring the elapsed time.
            </summary>
        </member>
        <member name="M:Arbor.Timer.Stop">
            <summary>
            Stop measuring the elapsed time.
            </summary>
        </member>
        <member name="M:Arbor.Timer.Pause">
            <summary>
            Pause measuring the elapsed time.
            </summary>
        </member>
        <member name="M:Arbor.Timer.Resume">
            <summary>
            Resume measuring the elapsed time.
            </summary>
        </member>
        <member name="T:Arbor.TimeType">
            <summary>
            Time type
            </summary>
        </member>
        <member name="F:Arbor.TimeType.Normal">
            <summary>
            Use time of current frame considering timeScale.
            </summary>
        </member>
        <member name="F:Arbor.TimeType.Unscaled">
            <summary>
            Use time of current frame without considering timeScale.
            </summary>
        </member>
        <member name="F:Arbor.TimeType.Realtime">
            <summary>
            Use realtime.
            </summary>
        </member>
        <member name="F:Arbor.TimeType.FixedTime">
            <summary>
            Use the latest FixedUpdate start time considering the timeScale.
            </summary>
        </member>
        <member name="F:Arbor.TimeType.FixedUnscaledTime">
            <summary>
            Use the latest FixedUpdate start time without considering timeScale.
            </summary>
        </member>
        <member name="T:Arbor.TimeUtility">
            <summary>
            Time utility class
            </summary>
        </member>
        <member name="M:Arbor.TimeUtility.CurrentTime(Arbor.TimeType)">
            <summary>
            Return current time.
            </summary>
            <param name="type">Time type</param>
            <returns>Current time</returns>
        </member>
        <member name="T:Arbor.UpdateSettings">
            <summary>
            Settings related to updating.
            </summary>
        </member>
        <member name="F:Arbor.UpdateSettings.type">
            <summary>
            Update type.
            </summary>
        </member>
        <member name="F:Arbor.UpdateSettings.timeType">
            <summary>
            Time type(only SpecifySeconds).
            </summary>
        </member>
        <member name="F:Arbor.UpdateSettings.seconds">
            <summary>
            Update interval(only SpecifySeconds).
            </summary>
        </member>
        <member name="P:Arbor.UpdateSettings.isUpdatableOnUpdate">
            <summary>
            It returns whether it can be updated with Update()
            </summary>
        </member>
        <member name="M:Arbor.UpdateSettings.ClearTime">
            <summary>
            Clear update time
            </summary>
        </member>
        <member name="M:Arbor.UpdateSettings.Pause">
            <summary>
            Pause update time.
            </summary>
        </member>
        <member name="M:Arbor.UpdateSettings.Resume">
            <summary>
            Resume update time.
            </summary>
        </member>
        <member name="T:Arbor.UpdateType">
            <summary>
            Update type.
            </summary>
        </member>
        <member name="F:Arbor.UpdateType.EveryFrame">
            <summary>
            Update every frame.
            </summary>
        </member>
        <member name="F:Arbor.UpdateType.SpecifySeconds">
            <summary>
            Updated by specifying seconds.
            </summary>
        </member>
        <member name="F:Arbor.UpdateType.Manual">
            <summary>
            Manually updated from the script.<br/>
            For the update method, refer to the page of the corresponding component in the <a href="https://arbor-docs.caitsithware.com/en/scriptreference.html">script reference</a>.
            </summary>
        </member>
        <member name="T:Arbor.Utilities.AnimatorUtility">
            <summary>
            Animator utility class
            </summary>
        </member>
        <member name="M:Arbor.Utilities.AnimatorUtility.GetLayerIndex(UnityEngine.Animator,System.String)">
            <summary>
            Get the index from the layer name.
            </summary>
            <param name="animator">Animator</param>
            <param name="layerName">Layer Name</param>
            <returns>Index found. If not found, returns -1.</returns>
        </member>
        <member name="M:Arbor.Utilities.AnimatorUtility.IsInTransition(UnityEngine.Animator,System.Int32,System.String)">
            <summary>
            Determine if the transition is in progress.
            </summary>
            <param name="animator">Animator</param>
            <param name="layerIndex">Layer index</param>
            <param name="stateName">State name</param>
            <returns>Returns true if transitioning to state.</returns>
        </member>
        <member name="M:Arbor.Utilities.AnimatorUtility.HasParameter(UnityEngine.Animator,System.String)">
            <summary>
            Determine if there are parameters.
            </summary>
            <param name="animator">Animator</param>
            <param name="name">Parameter name</param>
            <returns>Returns true if there are parameters.</returns>
        </member>
        <member name="M:Arbor.Utilities.AnimatorUtility.CheckExistsParameter(UnityEngine.Animator,System.String)">
            <summary>
            パラメータが存在しているか確認する。
            </summary>
            <param name="animator">Animator</param>
            <param name="name">パラメータ名</param>
            <returns>パラメータがある場合にtrueを返す。</returns>
            <remarks>
            確認はUnityEditor上でのプレイかDevelopmentBuildの時にのみ行われる。<br/>
            Scripting Define Symbolsに"ARBOR_DISABLE_CHECK_ANIMATOR_PARAMETER"を追加すると常に無効化できる。
            </remarks>
        </member>
        <member name="T:Arbor.ObjectUtility">
            <summary>
            Utility class for Unity objects
            </summary>
        </member>
        <member name="M:Arbor.ObjectUtility.FindObjectOfType``1">
            <summary>
            Call Object.FindObjectOfType.<br />
            For Unity2023.1 or later, call Object.FindFirstObjectByType.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>the object found</returns>
        </member>
        <member name="M:Arbor.ObjectUtility.FindObjectsOfType``1">
            <summary>
            Call Object.FindObjectsOfType. <br />
            For Unity2023.1 or later, call Object.FindObjectsByType.
            </summary>
            <typeparam name="T">Object type</typeparam>
            <returns>an array of found objects</returns>
        </member>
    </members>
</doc>
